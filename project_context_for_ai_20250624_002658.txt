Android Project Backup for AI Analysis

Generated on: 2025-06-24 00:28:26

Project root: C:\Users\azrie\AndroidStudioProjects\CueD8at

Platform: Windows_NT / PowerShell 5.1.27881.1000

---

This document contains a concatenation of relevant source and configuration files.

Each file begins with a '--- FILE: [relative_path] ---' header.

A list of non-text assets (e.g., images, fonts) is included at the end.



--- FILE: .github/workflows/blank.yml ---

# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.



--- FILE: .github/workflows/nextjs.yml ---

# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4



--- FILE: .gitignore ---

*.iml
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
.DS_Store
/build
/captures
.externalNativeBuild
.cxx
local.properties



--- FILE: .idea/.gitignore ---

# Default ignored files
/shelf/
/workspace.xml



--- FILE: .idea/AndroidProjectSystem.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AndroidProjectSystem">
    <option name="providerId" value="com.android.tools.idea.GradleProjectSystem" />
  </component>
</project>


--- FILE: .idea/appInsightsSettings.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AppInsightsSettings">
    <option name="selectedTabId" value="Firebase Crashlytics" />
    <option name="tabSettings">
      <map>
        <entry key="Firebase Crashlytics">
          <value>
            <InsightsFilterSettings>
              <option name="connection">
                <ConnectionSetting>
                  <option name="appId" value="PLACEHOLDER" />
                  <option name="mobileSdkAppId" value="" />
                  <option name="projectId" value="" />
                  <option name="projectNumber" value="" />
                </ConnectionSetting>
              </option>
              <option name="signal" value="SIGNAL_UNSPECIFIED" />
              <option name="timeIntervalDays" value="THIRTY_DAYS" />
              <option name="visibilityType" value="ALL" />
            </InsightsFilterSettings>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>


--- FILE: .idea/assetWizardSettings.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="WizardSettings">
    <option name="children">
      <map>
        <entry key="imageWizard">
          <value>
            <PersistentState>
              <option name="children">
                <map>
                  <entry key="imageAssetPanel">
                    <value>
                      <PersistentState>
                        <option name="children">
                          <map>
                            <entry key="actionbar">
                              <value>
                                <PersistentState>
                                  <option name="children">
                                    <map>
                                      <entry key="clipArt">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="imagePath" value="C:\Users\azrie\AppData\Local\Temp\ic_android_black_24dp.xml" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="text">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="textAsset">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                    </map>
                                  </option>
                                </PersistentState>
                              </value>
                            </entry>
                            <entry key="launcher">
                              <value>
                                <PersistentState>
                                  <option name="children">
                                    <map>
                                      <entry key="backgroundImage">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="imagePath" value="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\drawable\logo_cue_detat.webp" />
                                                <entry key="scalingPercent" value="61" />
                                                <entry key="trimmed" value="true" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundClipArt">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="imagePath" value="C:\Users\azrie\AppData\Local\Temp\ic_android_black_24dp.xml" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundImage">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="imagePath" value="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\drawable\logo_cue_detat.webp" />
                                                <entry key="trimmed" value="true" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundText">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="fontFamily" value="Barbaro" />
                                                <entry key="trimmed" value="true" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundTextAsset">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="fontFamily" value="Barbaro" />
                                                <entry key="trimmed" value="true" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                    </map>
                                  </option>
                                  <option name="values">
                                    <map>
                                      <entry key="backgroundColor" value="000000" />
                                      <entry key="generateWebpIcons" value="false" />
                                      <entry key="legacyIconShape" value="NONE" />
                                      <entry key="previewDensity" value="xxxhdpi" />
                                    </map>
                                  </option>
                                </PersistentState>
                              </value>
                            </entry>
                            <entry key="launcherLegacy">
                              <value>
                                <PersistentState>
                                  <option name="children">
                                    <map>
                                      <entry key="clipArt">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="imagePath" value="C:\Users\azrie\AppData\Local\Temp\ic_android_black_24dp.xml" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="text">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="textAsset">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                    </map>
                                  </option>
                                </PersistentState>
                              </value>
                            </entry>
                            <entry key="notification">
                              <value>
                                <PersistentState>
                                  <option name="children">
                                    <map>
                                      <entry key="clipArt">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="imagePath" value="C:\Users\azrie\AppData\Local\Temp\ic_android_black_24dp.xml" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="text">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="textAsset">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                    </map>
                                  </option>
                                </PersistentState>
                              </value>
                            </entry>
                            <entry key="tvBanner">
                              <value>
                                <PersistentState>
                                  <option name="children">
                                    <map>
                                      <entry key="foregroundText">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                    </map>
                                  </option>
                                </PersistentState>
                              </value>
                            </entry>
                            <entry key="tvChannel">
                              <value>
                                <PersistentState>
                                  <option name="children">
                                    <map>
                                      <entry key="foregroundClipArt">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="imagePath" value="C:\Users\azrie\AppData\Local\Temp\ic_android_black_24dp.xml" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundImage">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundText">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundTextAsset">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                    </map>
                                  </option>
                                  <option name="values">
                                    <map>
                                      <entry key="previewDensity" value="xxxhdpi" />
                                    </map>
                                  </option>
                                </PersistentState>
                              </value>
                            </entry>
                          </map>
                        </option>
                      </PersistentState>
                    </value>
                  </entry>
                </map>
              </option>
            </PersistentState>
          </value>
        </entry>
        <entry key="vectorWizard">
          <value>
            <PersistentState>
              <option name="children">
                <map>
                  <entry key="vectorAssetStep">
                    <value>
                      <PersistentState>
                        <option name="values">
                          <map>
                            <entry key="assetSourceType" value="FILE" />
                            <entry key="outputName" value="cuedetat_simplest" />
                            <entry key="sourceFile" value="G:\My Drive\cuedetat_simplest.svg" />
                          </map>
                        </option>
                      </PersistentState>
                    </value>
                  </entry>
                </map>
              </option>
            </PersistentState>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>


--- FILE: .idea/checkstyle-idea.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CheckStyle-IDEA" serialisationVersion="2">
    <checkstyleVersion>10.22.0</checkstyleVersion>
    <scanScope>JavaOnly</scanScope>
    <copyLibs>true</copyLibs>
    <option name="thirdPartyClasspath" />
    <option name="activeLocationIds" />
    <option name="locations">
      <list>
        <ConfigurationLocation id="bundled-sun-checks" type="BUNDLED" scope="All" description="Sun Checks">(bundled)</ConfigurationLocation>
        <ConfigurationLocation id="bundled-google-checks" type="BUNDLED" scope="All" description="Google Checks">(bundled)</ConfigurationLocation>
      </list>
    </option>
  </component>
</project>


--- FILE: .idea/compiler.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <bytecodeTargetLevel target="24" />
  </component>
</project>


--- FILE: .idea/dbnavigator.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DBNavigator.Project.DDLFileAttachmentManager">
    <mappings />
    <preferences />
  </component>
  <component name="DBNavigator.Project.DatabaseAssistantManager">
    <assistants />
  </component>
  <component name="DBNavigator.Project.DatabaseBrowserManager">
    <autoscroll-to-editor value="false" />
    <autoscroll-from-editor value="true" />
    <show-object-properties value="true" />
    <loaded-nodes />
  </component>
  <component name="DBNavigator.Project.DatabaseFileManager">
    <open-files />
  </component>
  <component name="DBNavigator.Project.ExecutionManager">
    <retain-sticky-names value="false" />
  </component>
  <component name="DBNavigator.Project.ParserDiagnosticsManager">
    <diagnostics-history />
  </component>
  <component name="DBNavigator.Project.Settings">
    <connections />
    <browser-settings>
      <general>
        <display-mode value="TABBED" />
        <navigation-history-size value="100" />
        <show-object-details value="false" />
        <enable-sticky-paths value="true" />
      </general>
      <filters>
        <object-type-filter>
          <object-type name="SCHEMA" enabled="true" />
          <object-type name="USER" enabled="true" />
          <object-type name="ROLE" enabled="true" />
          <object-type name="PRIVILEGE" enabled="true" />
          <object-type name="CHARSET" enabled="true" />
          <object-type name="TABLE" enabled="true" />
          <object-type name="VIEW" enabled="true" />
          <object-type name="MATERIALIZED_VIEW" enabled="true" />
          <object-type name="NESTED_TABLE" enabled="true" />
          <object-type name="COLUMN" enabled="true" />
          <object-type name="INDEX" enabled="true" />
          <object-type name="CONSTRAINT" enabled="true" />
          <object-type name="DATASET_TRIGGER" enabled="true" />
          <object-type name="DATABASE_TRIGGER" enabled="true" />
          <object-type name="SYNONYM" enabled="true" />
          <object-type name="SEQUENCE" enabled="true" />
          <object-type name="PROCEDURE" enabled="true" />
          <object-type name="FUNCTION" enabled="true" />
          <object-type name="PACKAGE" enabled="true" />
          <object-type name="TYPE" enabled="true" />
          <object-type name="TYPE_ATTRIBUTE" enabled="true" />
          <object-type name="ARGUMENT" enabled="true" />
          <object-type name="JAVA_CLASS" enabled="true" />
          <object-type name="JAVA_INNER_CLASS" enabled="true" />
          <object-type name="JAVA_FIELD" enabled="true" />
          <object-type name="JAVA_METHOD" enabled="true" />
          <object-type name="DIMENSION" enabled="true" />
          <object-type name="CLUSTER" enabled="true" />
          <object-type name="DBLINK" enabled="true" />
          <object-type name="CREDENTIAL" enabled="true" />
          <object-type name="AI_PROFILE" enabled="true" />
        </object-type-filter>
      </filters>
      <sorting>
        <object-type name="COLUMN" sorting-type="NAME" />
        <object-type name="FUNCTION" sorting-type="NAME" />
        <object-type name="PROCEDURE" sorting-type="NAME" />
        <object-type name="ARGUMENT" sorting-type="POSITION" />
        <object-type name="TYPE ATTRIBUTE" sorting-type="POSITION" />
      </sorting>
      <default-editors>
        <object-type name="VIEW" editor-type="SELECTION" />
        <object-type name="PACKAGE" editor-type="SELECTION" />
        <object-type name="TYPE" editor-type="SELECTION" />
      </default-editors>
    </browser-settings>
    <navigation-settings>
      <lookup-filters>
        <lookup-objects>
          <object-type name="SCHEMA" enabled="true" />
          <object-type name="USER" enabled="false" />
          <object-type name="ROLE" enabled="false" />
          <object-type name="PRIVILEGE" enabled="false" />
          <object-type name="CHARSET" enabled="false" />
          <object-type name="TABLE" enabled="true" />
          <object-type name="VIEW" enabled="true" />
          <object-type name="MATERIALIZED VIEW" enabled="true" />
          <object-type name="INDEX" enabled="true" />
          <object-type name="CONSTRAINT" enabled="true" />
          <object-type name="DATASET TRIGGER" enabled="true" />
          <object-type name="DATABASE TRIGGER" enabled="true" />
          <object-type name="SYNONYM" enabled="false" />
          <object-type name="SEQUENCE" enabled="true" />
          <object-type name="PROCEDURE" enabled="true" />
          <object-type name="FUNCTION" enabled="true" />
          <object-type name="PACKAGE" enabled="true" />
          <object-type name="TYPE" enabled="true" />
          <object-type name="JAVA CLASS" enabled="true" />
          <object-type name="INNER CLASS" enabled="true" />
          <object-type name="JAVA FIELD" enabled="true" />
          <object-type name="JAVA METHOD" enabled="true" />
          <object-type name="JAVA PARAMETER" enabled="true" />
          <object-type name="DIMENSION" enabled="false" />
          <object-type name="CLUSTER" enabled="false" />
          <object-type name="DBLINK" enabled="false" />
          <object-type name="CREDENTIAL" enabled="false" />
        </lookup-objects>
        <force-database-load value="false" />
        <prompt-connection-selection value="true" />
        <prompt-schema-selection value="true" />
      </lookup-filters>
    </navigation-settings>
    <dataset-grid-settings>
      <general>
        <enable-zooming value="true" />
        <enable-column-tooltip value="true" />
      </general>
      <sorting>
        <nulls-first value="true" />
        <max-sorting-columns value="4" />
      </sorting>
      <audit-columns>
        <column-names value="" />
        <visible value="true" />
        <editable value="false" />
      </audit-columns>
    </dataset-grid-settings>
    <dataset-editor-settings>
      <text-editor-popup>
        <active value="false" />
        <active-if-empty value="false" />
        <data-length-threshold value="100" />
        <popup-delay value="1000" />
      </text-editor-popup>
      <values-actions-popup>
        <show-popup-button value="true" />
        <element-count-threshold value="1000" />
        <data-length-threshold value="250" />
      </values-actions-popup>
      <general>
        <fetch-block-size value="100" />
        <fetch-timeout value="30" />
        <trim-whitespaces value="true" />
        <convert-empty-strings-to-null value="true" />
        <select-content-on-cell-edit value="true" />
        <large-value-preview-active value="true" />
      </general>
      <filters>
        <prompt-filter-dialog value="true" />
        <default-filter-type value="BASIC" />
      </filters>
      <qualified-text-editor text-length-threshold="300">
        <content-types>
          <content-type name="Text" enabled="true" />
          <content-type name="Properties" enabled="true" />
          <content-type name="XML" enabled="true" />
          <content-type name="DTD" enabled="true" />
          <content-type name="HTML" enabled="true" />
          <content-type name="XHTML" enabled="true" />
          <content-type name="Java" enabled="true" />
          <content-type name="SQL" enabled="true" />
          <content-type name="PL/SQL" enabled="true" />
          <content-type name="JSON" enabled="true" />
          <content-type name="JSON5" enabled="true" />
          <content-type name="Groovy" enabled="true" />
          <content-type name="AIDL" enabled="true" />
          <content-type name="YAML" enabled="true" />
          <content-type name="Manifest" enabled="true" />
        </content-types>
      </qualified-text-editor>
      <record-navigation>
        <navigation-target value="VIEWER" />
      </record-navigation>
    </dataset-editor-settings>
    <code-editor-settings>
      <general>
        <show-object-navigation-gutter value="false" />
        <show-spec-declaration-navigation-gutter value="true" />
        <enable-spellchecking value="true" />
        <enable-reference-spellchecking value="false" />
      </general>
      <confirmations>
        <save-changes value="false" />
        <revert-changes value="true" />
        <exit-on-changes value="ASK" />
      </confirmations>
    </code-editor-settings>
    <code-completion-settings>
      <filters>
        <basic-filter>
          <filter-element type="RESERVED_WORD" id="keyword" selected="true" />
          <filter-element type="RESERVED_WORD" id="function" selected="true" />
          <filter-element type="RESERVED_WORD" id="parameter" selected="true" />
          <filter-element type="RESERVED_WORD" id="datatype" selected="true" />
          <filter-element type="RESERVED_WORD" id="exception" selected="true" />
          <filter-element type="OBJECT" id="schema" selected="true" />
          <filter-element type="OBJECT" id="role" selected="true" />
          <filter-element type="OBJECT" id="user" selected="true" />
          <filter-element type="OBJECT" id="privilege" selected="true" />
          <user-schema>
            <filter-element type="OBJECT" id="table" selected="true" />
            <filter-element type="OBJECT" id="view" selected="true" />
            <filter-element type="OBJECT" id="materialized view" selected="true" />
            <filter-element type="OBJECT" id="index" selected="true" />
            <filter-element type="OBJECT" id="constraint" selected="true" />
            <filter-element type="OBJECT" id="trigger" selected="true" />
            <filter-element type="OBJECT" id="synonym" selected="false" />
            <filter-element type="OBJECT" id="sequence" selected="true" />
            <filter-element type="OBJECT" id="procedure" selected="true" />
            <filter-element type="OBJECT" id="function" selected="true" />
            <filter-element type="OBJECT" id="package" selected="true" />
            <filter-element type="OBJECT" id="type" selected="true" />
            <filter-element type="OBJECT" id="dimension" selected="true" />
            <filter-element type="OBJECT" id="cluster" selected="true" />
            <filter-element type="OBJECT" id="dblink" selected="true" />
          </user-schema>
          <public-schema>
            <filter-element type="OBJECT" id="table" selected="false" />
            <filter-element type="OBJECT" id="view" selected="false" />
            <filter-element type="OBJECT" id="materialized view" selected="false" />
            <filter-element type="OBJECT" id="index" selected="false" />
            <filter-element type="OBJECT" id="constraint" selected="false" />
            <filter-element type="OBJECT" id="trigger" selected="false" />
            <filter-element type="OBJECT" id="synonym" selected="false" />
            <filter-element type="OBJECT" id="sequence" selected="false" />
            <filter-element type="OBJECT" id="procedure" selected="false" />
            <filter-element type="OBJECT" id="function" selected="false" />
            <filter-element type="OBJECT" id="package" selected="false" />
            <filter-element type="OBJECT" id="type" selected="false" />
            <filter-element type="OBJECT" id="dimension" selected="false" />
            <filter-element type="OBJECT" id="cluster" selected="false" />
            <filter-element type="OBJECT" id="dblink" selected="false" />
          </public-schema>
          <any-schema>
            <filter-element type="OBJECT" id="table" selected="true" />
            <filter-element type="OBJECT" id="view" selected="true" />
            <filter-element type="OBJECT" id="materialized view" selected="true" />
            <filter-element type="OBJECT" id="index" selected="true" />
            <filter-element type="OBJECT" id="constraint" selected="true" />
            <filter-element type="OBJECT" id="trigger" selected="true" />
            <filter-element type="OBJECT" id="synonym" selected="true" />
            <filter-element type="OBJECT" id="sequence" selected="true" />
            <filter-element type="OBJECT" id="procedure" selected="true" />
            <filter-element type="OBJECT" id="function" selected="true" />
            <filter-element type="OBJECT" id="package" selected="true" />
            <filter-element type="OBJECT" id="type" selected="true" />
            <filter-element type="OBJECT" id="dimension" selected="true" />
            <filter-element type="OBJECT" id="cluster" selected="true" />
            <filter-element type="OBJECT" id="dblink" selected="true" />
          </any-schema>
        </basic-filter>
        <extended-filter>
          <filter-element type="RESERVED_WORD" id="keyword" selected="true" />
          <filter-element type="RESERVED_WORD" id="function" selected="true" />
          <filter-element type="RESERVED_WORD" id="parameter" selected="true" />
          <filter-element type="RESERVED_WORD" id="datatype" selected="true" />
          <filter-element type="RESERVED_WORD" id="exception" selected="true" />
          <filter-element type="OBJECT" id="schema" selected="true" />
          <filter-element type="OBJECT" id="user" selected="true" />
          <filter-element type="OBJECT" id="role" selected="true" />
          <filter-element type="OBJECT" id="privilege" selected="true" />
          <user-schema>
            <filter-element type="OBJECT" id="table" selected="true" />
            <filter-element type="OBJECT" id="view" selected="true" />
            <filter-element type="OBJECT" id="materialized view" selected="true" />
            <filter-element type="OBJECT" id="index" selected="true" />
            <filter-element type="OBJECT" id="constraint" selected="true" />
            <filter-element type="OBJECT" id="trigger" selected="true" />
            <filter-element type="OBJECT" id="synonym" selected="true" />
            <filter-element type="OBJECT" id="sequence" selected="true" />
            <filter-element type="OBJECT" id="procedure" selected="true" />
            <filter-element type="OBJECT" id="function" selected="true" />
            <filter-element type="OBJECT" id="package" selected="true" />
            <filter-element type="OBJECT" id="type" selected="true" />
            <filter-element type="OBJECT" id="dimension" selected="true" />
            <filter-element type="OBJECT" id="cluster" selected="true" />
            <filter-element type="OBJECT" id="dblink" selected="true" />
          </user-schema>
          <public-schema>
            <filter-element type="OBJECT" id="table" selected="true" />
            <filter-element type="OBJECT" id="view" selected="true" />
            <filter-element type="OBJECT" id="materialized view" selected="true" />
            <filter-element type="OBJECT" id="index" selected="true" />
            <filter-element type="OBJECT" id="constraint" selected="true" />
            <filter-element type="OBJECT" id="trigger" selected="true" />
            <filter-element type="OBJECT" id="synonym" selected="true" />
            <filter-element type="OBJECT" id="sequence" selected="true" />
            <filter-element type="OBJECT" id="procedure" selected="true" />
            <filter-element type="OBJECT" id="function" selected="true" />
            <filter-element type="OBJECT" id="package" selected="true" />
            <filter-element type="OBJECT" id="type" selected="true" />
            <filter-element type="OBJECT" id="dimension" selected="true" />
            <filter-element type="OBJECT" id="cluster" selected="true" />
            <filter-element type="OBJECT" id="dblink" selected="true" />
          </public-schema>
          <any-schema>
            <filter-element type="OBJECT" id="table" selected="true" />
            <filter-element type="OBJECT" id="view" selected="true" />
            <filter-element type="OBJECT" id="materialized view" selected="true" />
            <filter-element type="OBJECT" id="index" selected="true" />
            <filter-element type="OBJECT" id="constraint" selected="true" />
            <filter-element type="OBJECT" id="trigger" selected="true" />
            <filter-element type="OBJECT" id="synonym" selected="true" />
            <filter-element type="OBJECT" id="sequence" selected="true" />
            <filter-element type="OBJECT" id="procedure" selected="true" />
            <filter-element type="OBJECT" id="function" selected="true" />
            <filter-element type="OBJECT" id="package" selected="true" />
            <filter-element type="OBJECT" id="type" selected="true" />
            <filter-element type="OBJECT" id="dimension" selected="true" />
            <filter-element type="OBJECT" id="cluster" selected="true" />
            <filter-element type="OBJECT" id="dblink" selected="true" />
          </any-schema>
        </extended-filter>
      </filters>
      <sorting enabled="true">
        <sorting-element type="RESERVED_WORD" id="keyword" />
        <sorting-element type="RESERVED_WORD" id="datatype" />
        <sorting-element type="OBJECT" id="column" />
        <sorting-element type="OBJECT" id="table" />
        <sorting-element type="OBJECT" id="view" />
        <sorting-element type="OBJECT" id="materialized view" />
        <sorting-element type="OBJECT" id="index" />
        <sorting-element type="OBJECT" id="constraint" />
        <sorting-element type="OBJECT" id="trigger" />
        <sorting-element type="OBJECT" id="synonym" />
        <sorting-element type="OBJECT" id="sequence" />
        <sorting-element type="OBJECT" id="procedure" />
        <sorting-element type="OBJECT" id="function" />
        <sorting-element type="OBJECT" id="package" />
        <sorting-element type="OBJECT" id="type" />
        <sorting-element type="OBJECT" id="dimension" />
        <sorting-element type="OBJECT" id="cluster" />
        <sorting-element type="OBJECT" id="dblink" />
        <sorting-element type="OBJECT" id="schema" />
        <sorting-element type="OBJECT" id="role" />
        <sorting-element type="OBJECT" id="user" />
        <sorting-element type="RESERVED_WORD" id="function" />
        <sorting-element type="RESERVED_WORD" id="parameter" />
      </sorting>
      <format>
        <enforce-code-style-case value="true" />
      </format>
    </code-completion-settings>
    <execution-engine-settings>
      <statement-execution>
        <fetch-block-size value="100" />
        <execution-timeout value="20" />
        <debug-execution-timeout value="600" />
        <focus-result value="false" />
        <prompt-execution value="false" />
      </statement-execution>
      <script-execution>
        <command-line-interfaces />
        <execution-timeout value="300" />
      </script-execution>
      <method-execution>
        <execution-timeout value="30" />
        <debug-execution-timeout value="600" />
        <parameter-history-size value="10" />
      </method-execution>
    </execution-engine-settings>
    <operation-settings>
      <transactions>
        <uncommitted-changes>
          <on-project-close value="ASK" />
          <on-disconnect value="ASK" />
          <on-autocommit-toggle value="ASK" />
        </uncommitted-changes>
        <multiple-uncommitted-changes>
          <on-commit value="ASK" />
          <on-rollback value="ASK" />
        </multiple-uncommitted-changes>
      </transactions>
      <session-browser>
        <disconnect-session value="ASK" />
        <kill-session value="ASK" />
        <reload-on-filter-change value="false" />
      </session-browser>
      <compiler>
        <compile-type value="KEEP" />
        <compile-dependencies value="ASK" />
        <always-show-controls value="false" />
      </compiler>
    </operation-settings>
    <ddl-file-settings>
      <extensions>
        <mapping file-type-id="VIEW" extensions="vw" />
        <mapping file-type-id="TRIGGER" extensions="trg" />
        <mapping file-type-id="PROCEDURE" extensions="prc" />
        <mapping file-type-id="FUNCTION" extensions="fnc" />
        <mapping file-type-id="PACKAGE" extensions="pkg" />
        <mapping file-type-id="PACKAGE_SPEC" extensions="pks" />
        <mapping file-type-id="PACKAGE_BODY" extensions="pkb" />
        <mapping file-type-id="TYPE" extensions="tpe" />
        <mapping file-type-id="TYPE_SPEC" extensions="tps" />
        <mapping file-type-id="TYPE_BODY" extensions="tpb" />
        <mapping file-type-id="JAVA_SOURCE" extensions="sql" />
      </extensions>
      <general>
        <lookup-ddl-files value="true" />
        <create-ddl-files value="false" />
        <synchronize-ddl-files value="true" />
        <use-qualified-names value="false" />
        <make-scripts-rerunnable value="true" />
      </general>
    </ddl-file-settings>
    <assistant-settings>
      <credential-settings>
        <credentials />
      </credential-settings>
    </assistant-settings>
    <general-settings>
      <regional-settings>
        <date-format value="MEDIUM" />
        <number-format value="UNGROUPED" />
        <locale value="SYSTEM_DEFAULT" />
        <use-custom-formats value="false" />
      </regional-settings>
      <environment>
        <environment-types>
          <environment-type id="development" name="Development" description="Development environment" color="-2430209/-12296320" readonly-code="false" readonly-data="false" />
          <environment-type id="integration" name="Integration" description="Integration environment" color="-2621494/-12163514" readonly-code="true" readonly-data="false" />
          <environment-type id="production" name="Production" description="Productive environment" color="-11574/-10271420" readonly-code="true" readonly-data="true" />
          <environment-type id="other" name="Other" description="" color="-1576/-10724543" readonly-code="false" readonly-data="false" />
        </environment-types>
        <visibility-settings>
          <connection-tabs value="true" />
          <dialog-headers value="true" />
          <object-editor-tabs value="true" />
          <script-editor-tabs value="false" />
          <execution-result-tabs value="true" />
        </visibility-settings>
      </environment>
    </general-settings>
  </component>
</project>


--- FILE: .idea/DDGenerateAssetsClassConfig.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DDGenerateAssetsClassConfig">
    <option name="path" value="$PROJECT_DIR$/../PoolProtractor\lib" />
  </component>
</project>


--- FILE: .idea/deploymentTargetSelector.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="deploymentTargetSelector">
    <selectionStates>
      <SelectionState runConfigName="app">
        <option name="selectionMode" value="DROPDOWN" />
      </SelectionState>
    </selectionStates>
  </component>
</project>


--- FILE: .idea/developer-tools.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DeveloperToolsToolWindowSettingsV1" lastSelectedContentNodeId="base64-encoder-decoder">
    <developerToolsConfigurations />
  </component>
</project>


--- FILE: .idea/deviceManager.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DeviceTable">
    <option name="columnSorters">
      <list>
        <ColumnSorterState>
          <option name="column" value="Name" />
          <option name="order" value="ASCENDING" />
        </ColumnSorterState>
      </list>
    </option>
  </component>
</project>


--- FILE: .idea/FlutterxFullConfig.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="FlutterxFullConfig">
    <option name="assetDirectory" value="$PROJECT_DIR$" />
  </component>
</project>


--- FILE: .idea/google-java-format.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="GoogleJavaFormatSettings">
    <option name="enabled" value="true" />
  </component>
</project>


--- FILE: .idea/gradle.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="GradleMigrationSettings" migrationVersion="1" />
  <component name="GradleSettings">
    <option name="linkedExternalProjectsSettings">
      <GradleProjectSettings>
        <option name="testRunner" value="CHOOSE_PER_TEST" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="gradleJvm" value="#JAVA_HOME" />
        <option name="modules">
          <set>
            <option value="$PROJECT_DIR$" />
            <option value="$PROJECT_DIR$/app" />
          </set>
        </option>
      </GradleProjectSettings>
    </option>
  </component>
</project>


--- FILE: .idea/iFlutter.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="iFlutter">
    <option name="foldRegisterEnable" value="true" />
    <option name="registerResWithPackage" value="true" />
    <option name="isUnModifiableFromJson" value="true" />
  </component>
</project>


--- FILE: .idea/kotlinc.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="KotlinJpsPluginSettings">
    <option name="version" value="2.1.20" />
  </component>
</project>


--- FILE: .idea/LanguageServersSettings.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="LanguageServerSettingsState">
    <state>
      <map>
        <entry key="be11af61-2a5f-4a53-a3fb-b9cf079c73c1">
          <value>
            <LanguageServerDefinitionSettings>
              <option name="errorReportingKind" value="none" />
            </LanguageServerDefinitionSettings>
          </value>
        </entry>
      </map>
    </state>
  </component>
</project>


--- FILE: .idea/material_theme_project_new.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="MaterialThemeProjectNewConfig">
    <option name="metadata">
      <MTProjectMetadataState>
        <option name="migrated" value="true" />
        <option name="pristineConfig" value="false" />
        <option name="userId" value="670d4b3b:19093868817:-7ffe" />
      </MTProjectMetadataState>
    </option>
  </component>
</project>


--- FILE: .idea/migrations.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectMigrations">
    <option name="MigrateToGradleLocalJavaHome">
      <set>
        <option value="$PROJECT_DIR$" />
      </set>
    </option>
  </component>
</project>


--- FILE: .idea/misc.xml ---

<project version="4">
  <component name="EntryPointsManager">
    <entry_points version="2.0">
      <entry_point TYPE="field" FQNAME="file://$PROJECT_DIR$/app/src/main/java/com/hereliesaz/poolprotractor/ui/theme/Type.kt Typography" />
      <entry_point TYPE="field" FQNAME="file://$PROJECT_DIR$/app/src/main/java/com/hereliesaz/poolprotractor/ui/theme/Theme.kt DarkColorScheme" />
      <entry_point TYPE="field" FQNAME="file://$PROJECT_DIR$/app/src/main/java/com/hereliesaz/poolprotractor/ui/theme/Theme.kt LightColorScheme" />
      <entry_point TYPE="field" FQNAME="com.hereliesaz.poolprotractor.ProtractorOverlayView M3_COLOR_TERTIARY" />
      <entry_point TYPE="field" FQNAME="com.hereliesaz.poolprotractor.ProtractorOverlayView TAG" />
      <entry_point TYPE="field" FQNAME="com.hereliesaz.poolprotractor.MainActivity zoomIcon" />
    </entry_points>
    <pattern value="com.hereliesaz.poolprotractor.ProtractorOverlayView" method="getPitchAngle" />
  </component>
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="ProjectInspectionProfilesVisibleTreeState">
    <entry key="Project Default">
      <profile-state>
        <selected-state>
          <State>
            <id>User defined</id>
          </State>
        </selected-state>
      </profile-state>
    </entry>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_24" default="true" project-jdk-name="24" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/build/classes" />
  </component>
  <component name="ProjectType">
    <option name="id" value="Android" />
  </component>
  <component name="VisualizationToolProject">
    <option name="state">
      <ProjectState>
        <option name="scale" value="0.17140898183064793" />
      </ProjectState>
    </option>
  </component>
</project>


--- FILE: .idea/modules.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/modules/CueDetat.iml" filepath="$PROJECT_DIR$/.idea/modules/CueDetat.iml" />
    </modules>
  </component>
</project>


--- FILE: .idea/runConfigurations.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RunConfigurationProducerService">
    <option name="ignoredProducers">
      <set>
        <option value="com.intellij.execution.junit.AbstractAllInDirectoryConfigurationProducer" />
        <option value="com.intellij.execution.junit.AllInPackageConfigurationProducer" />
        <option value="com.intellij.execution.junit.PatternConfigurationProducer" />
        <option value="com.intellij.execution.junit.TestInClassConfigurationProducer" />
        <option value="com.intellij.execution.junit.UniqueIdConfigurationProducer" />
        <option value="com.intellij.execution.junit.testDiscovery.JUnitTestDiscoveryConfigurationProducer" />
        <option value="org.jetbrains.kotlin.idea.junit.KotlinJUnitRunConfigurationProducer" />
        <option value="org.jetbrains.kotlin.idea.junit.KotlinPatternConfigurationProducer" />
      </set>
    </option>
  </component>
</project>


--- FILE: .idea/studiobot.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudioBotProjectSettings">
    <option name="shareContext" value="OptedIn" />
  </component>
</project>


--- FILE: .idea/vcs.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CommitMessageInspectionProfile">
    <profile version="1.0">
      <inspection_tool class="CommitMessageSpellChecking" enabled="false" level="TYPO" enabled_by_default="false" />
    </profile>
  </component>
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>


--- FILE: .idea/workspace.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AndroidLayouts">
    <shared>
      <config />
    </shared>
    <layouts>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_help_outline_24.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_jump_shot.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_background.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/drawable/pool_table.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/drawable/seekbar_custom_track.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/font/barbaro_family.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
    </layouts>
  </component>
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="NONE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="9fbbdfde-14dd-4720-a481-cde04fa54f58" name="Changes" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ChangesViewManager" show_ignored="true">
    <option name="groupingKeys">
      <option value="directory" />
      <option value="module" />
      <option value="repository" />
    </option>
  </component>
  <component name="ClangdSettings">
    <option name="formatViaClangd" value="false" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[DeviceId(pluginId=PhysicalDevice, isTemplate=false, identifier=serial=IV6HHIIF6P497DCI)]" />
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="GRADLE">
      <state>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="CueDetat" type="f1a62948:ProjectNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="resourceFile" />
        <option value="Kotlin File" />
        <option value="XML Properties File" />
        <option value="Kotlin Class" />
      </list>
    </option>
  </component>
  <component name="GenerateSignedApkSettings">
    <option name="KEY_STORE_PATH" value="G:\My Drive\az_apk_keystore.jks" />
    <option name="KEY_ALIAS" value="key0" />
    <option name="REMEMBER_PASSWORDS" value="true" />
    <option name="BUILD_TARGET_KEY" value="apk" />
  </component>
  <component name="Git.Settings">
    <favorite-branches>
      <branch-storage>
        <map>
          <entry type="REMOTE">
            <value>
              <list>
                <branch-info repo="$PROJECT_DIR$" source="CueDetat/main" />
              </list>
            </value>
          </entry>
        </map>
      </branch-storage>
    </favorite-branches>
    <option name="PREVIOUS_COMMIT_AUTHORS">
      <list>
        <option value="Az" />
      </list>
    </option>
    <option name="PUSH_AUTO_UPDATE" value="true" />
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="main" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="RESET_MODE" value="SOFT" />
    <option name="SIGN_OFF_COMMIT" value="true" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;HereLiesAz&quot;
  }
}</component>
  <component name="GithubDefaultAccount">
    <option name="defaultAccountId" value="ec06c625-beeb-4144-b820-11c2bdc7ab20" />
  </component>
  <component name="GithubProjectSettings">
    <option name="branchProtectionPatterns">
      <list>
        <option value="main" />
      </list>
    </option>
  </component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/HereLiesAz/CueDetat&quot;,
    &quot;accountId&quot;: &quot;ec06c625-beeb-4144-b820-11c2bdc7ab20&quot;
  }
}</component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="ProjectErrors" />
  </component>
  <component name="ProjectCodeStyleSettingsMigration">
    <option name="version" value="2" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;customColor&quot;: &quot;&quot;,
  &quot;associatedIndex&quot;: 5
}</component>
  <component name="ProjectId" id="2yBtJ0nvE8PEdIJltJ0MUbDdTkP" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectReloadState">
    <option name="STATE" value="1" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Android App.app.executor": "Run",
    "ApkExportedModule": "CueDetat.app",
    "BundleExportedModule": "CueDetat.app",
    "ExportApk.ApkPathForCueDetat.app": "C:\\Users\\azrie\\AndroidStudioProjects\\CueD8at\\app",
    "ExportBundle.BundlePathForCueDetat.app": "C:\\Users\\azrie\\AndroidStudioProjects\\CueD8at\\app",
    "ModuleVcsDetector.initialDetectionPerformed": "true",
    "PowerShell.backup_for_ai.ps1.executor": "Run",
    "ResourceManagerPrefKey.ModuleName": "CueDetat.app.main",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.cidr.known.project.marker": "true",
    "RunOnceActivity.git.unshallow": "true",
    "RunOnceActivity.readMode.enableVisualFormatting": "true",
    "android-custom-viewC:/Users/azrie/AndroidStudioProjects/CueD8at/app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt_SELECTED": "ProtractorOverlayView",
    "cf.first.check.clang-format": "false",
    "cidr.known.project.marker": "true",
    "com.google.services.firebase.aqiPopupShown": "true",
    "dart.analysis.tool.window.visible": "false",
    "git-widget-placeholder": "main",
    "last_opened_file_path": "C:/Users/azrie/AndroidStudioProjects/CueD8at/app/src/main/res/drawable",
    "project.structure.last.edited": "Dependencies",
    "project.structure.proportion": "0.17",
    "project.structure.side.proportion": "0.2",
    "run.code.analysis.last.selected.profile": "pProject Default",
    "settings.editor.selected.configurable": "AndroidSdkUpdater",
    "show.migrate.to.gradle.popup": "false",
    "vcs.patch.to.clipboard": "true"
  },
  "keyToStringList": {
    "ExportApk.BuildVariants": [
      "release"
    ],
    "android-custom-viewC:/Users/azrie/AndroidStudioProjects/CueD8at/app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt_ProtractorOverlayView_DIMENSIONS": [
      "1080",
      "1920"
    ]
  }
}]]></component>
  <component name="PsdUISettings">
    <option name="MODULE_TAB" value="Signing Configs" />
    <option name="BUILD_VARIANTS_TAB" value="Build Types" />
    <option name="LAST_EDITED_SIGNING_CONFIG" value="release" />
    <option name="LAST_EDITED_BUILD_TYPE" value="debug" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\drawable" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\drawable" />
      <recent name="C:\Users\azrie\AndroidStudioProjects\CueD8at" />
      <recent name="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\vectors" />
      <recent name="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\raw" />
      <recent name="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\font" />
    </key>
    <key name="K2MoveDeclarationsDialog.RECENT_PACKAGE_KEY">
      <recent name="com.hereliesaz.cuedetat.ui.composables" />
      <recent name="com.hereliesaz.cuedetat.ui.composables.cuedetat" />
      <recent name="com.hereliesaz.cuedetat.ui.composables.cudetat" />
      <recent name="com.hereliesaz.cuedetat.ui.theme" />
      <recent name="com.hereliesaz.cuedetat.ui" />
    </key>
  </component>
  <component name="RunManager" selected="Android App.app">
    <configuration name="app" type="AndroidRunConfigurationType" factoryName="Android App" activateToolWindowBeforeRun="false">
      <module name="CueDetat.app" />
      <option name="ANDROID_RUN_CONFIGURATION_SCHEMA_VERSION" value="1" />
      <option name="DEPLOY" value="true" />
      <option name="DEPLOY_APK_FROM_BUNDLE" value="false" />
      <option name="DEPLOY_AS_INSTANT" value="false" />
      <option name="ARTIFACT_NAME" value="" />
      <option name="PM_INSTALL_OPTIONS" value="" />
      <option name="ALL_USERS" value="false" />
      <option name="ALWAYS_INSTALL_WITH_PM" value="false" />
      <option name="ALLOW_ASSUME_VERIFIED" value="false" />
      <option name="CLEAR_APP_STORAGE" value="false" />
      <option name="DYNAMIC_FEATURES_DISABLED_LIST" value="" />
      <option name="ACTIVITY_EXTRA_FLAGS" value="" />
      <option name="MODE" value="default_activity" />
      <option name="RESTORE_ENABLED" value="false" />
      <option name="RESTORE_FILE" value="" />
      <option name="RESTORE_FRESH_INSTALL_ONLY" value="false" />
      <option name="CLEAR_LOGCAT" value="false" />
      <option name="SHOW_LOGCAT_AUTOMATICALLY" value="false" />
      <option name="TARGET_SELECTION_MODE" value="DEVICE_AND_SNAPSHOT_COMBO_BOX" />
      <option name="SELECTED_CLOUD_MATRIX_CONFIGURATION_ID" value="-1" />
      <option name="SELECTED_CLOUD_MATRIX_PROJECT_ID" value="" />
      <option name="DEBUGGER_TYPE" value="Auto" />
      <Auto>
        <option name="USE_JAVA_AWARE_DEBUGGER" value="false" />
        <option name="SHOW_STATIC_VARS" value="true" />
        <option name="WORKING_DIR" value="" />
        <option name="TARGET_LOGGING_CHANNELS" value="lldb process:gdb-remote packets" />
        <option name="SHOW_OPTIMIZED_WARNING" value="true" />
        <option name="ATTACH_ON_WAIT_FOR_DEBUGGER" value="false" />
        <option name="DEBUG_SANDBOX_SDK" value="false" />
      </Auto>
      <Hybrid>
        <option name="USE_JAVA_AWARE_DEBUGGER" value="false" />
        <option name="SHOW_STATIC_VARS" value="true" />
        <option name="WORKING_DIR" value="" />
        <option name="TARGET_LOGGING_CHANNELS" value="lldb process:gdb-remote packets" />
        <option name="SHOW_OPTIMIZED_WARNING" value="true" />
        <option name="ATTACH_ON_WAIT_FOR_DEBUGGER" value="false" />
        <option name="DEBUG_SANDBOX_SDK" value="false" />
      </Hybrid>
      <Java>
        <option name="ATTACH_ON_WAIT_FOR_DEBUGGER" value="false" />
        <option name="DEBUG_SANDBOX_SDK" value="false" />
      </Java>
      <Native>
        <option name="USE_JAVA_AWARE_DEBUGGER" value="false" />
        <option name="SHOW_STATIC_VARS" value="true" />
        <option name="WORKING_DIR" value="" />
        <option name="TARGET_LOGGING_CHANNELS" value="lldb process:gdb-remote packets" />
        <option name="SHOW_OPTIMIZED_WARNING" value="true" />
        <option name="ATTACH_ON_WAIT_FOR_DEBUGGER" value="false" />
        <option name="DEBUG_SANDBOX_SDK" value="false" />
      </Native>
      <Profilers>
        <option name="ADVANCED_PROFILING_ENABLED" value="false" />
        <option name="STARTUP_PROFILING_ENABLED" value="false" />
        <option name="STARTUP_CPU_PROFILING_ENABLED" value="false" />
        <option name="STARTUP_CPU_PROFILING_CONFIGURATION_NAME" value="Java/Kotlin Method Sample (legacy)" />
        <option name="STARTUP_NATIVE_MEMORY_PROFILING_ENABLED" value="false" />
        <option name="NATIVE_MEMORY_SAMPLE_RATE_BYTES" value="2048" />
      </Profilers>
      <option name="DEEP_LINK" value="" />
      <option name="ACTIVITY" value="" />
      <option name="ACTIVITY_CLASS" value="" />
      <option name="SEARCH_ACTIVITY_IN_GLOBAL_SCOPE" value="false" />
      <option name="SKIP_ACTIVITY_VALIDATION" value="false" />
      <method v="2">
        <option name="Android.Gradle.BeforeRunTask" enabled="true" />
      </method>
    </configuration>
    <configuration name="backup_for_ai.ps1" type="PowerShellRunType" factoryName="PowerShell" temporary="true" scriptUrl="$PROJECT_DIR$/backup_for_ai.ps1" executablePath="$PROJECT_DIR$/../../../../WINDOWS/System32/WindowsPowerShell/v1.0/powershell.exe">
      <envs />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="PowerShell.backup_for_ai.ps1" />
      </list>
    </recent_temporary>
  </component>
  <component name="ShelveChangesManager">
    <option name="remove_strategy" value="true" />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="9fbbdfde-14dd-4720-a481-cde04fa54f58" name="Changes" comment="" />
      <created>1749319721188</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1749319721188</updated>
    </task>
    <task id="LOCAL-00024" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/OverlayRenderer.kt">
      <option name="closed" value="true" />
      <created>1749862932678</created>
      <option name="number" value="00024" />
      <option name="presentableId" value="LOCAL-00024" />
      <option name="project" value="LOCAL" />
      <updated>1749862932678</updated>
    </task>
    <task id="LOCAL-00025" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/OverlayRenderer.kt">
      <option name="closed" value="true" />
      <created>1749865454923</created>
      <option name="number" value="00025" />
      <option name="presentableId" value="LOCAL-00025" />
      <option name="project" value="LOCAL" />
      <updated>1749865454923</updated>
    </task>
    <task id="LOCAL-00026" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/OverlayRenderer.kt">
      <option name="closed" value="true" />
      <created>1749865755118</created>
      <option name="number" value="00026" />
      <option name="presentableId" value="LOCAL-00026" />
      <option name="project" value="LOCAL" />
      <updated>1749865755118</updated>
    </task>
    <task id="LOCAL-00027" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/OverlayRenderer.kt">
      <option name="closed" value="true" />
      <created>1749865778773</created>
      <option name="number" value="00027" />
      <option name="presentableId" value="LOCAL-00027" />
      <option name="project" value="LOCAL" />
      <updated>1749865778773</updated>
    </task>
    <task id="LOCAL-00028" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749866411272</created>
      <option name="number" value="00028" />
      <option name="presentableId" value="LOCAL-00028" />
      <option name="project" value="LOCAL" />
      <updated>1749866411272</updated>
    </task>
    <task id="LOCAL-00029" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749866526370</created>
      <option name="number" value="00029" />
      <option name="presentableId" value="LOCAL-00029" />
      <option name="project" value="LOCAL" />
      <updated>1749866526370</updated>
    </task>
    <task id="LOCAL-00030" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1749884477064</created>
      <option name="number" value="00030" />
      <option name="presentableId" value="LOCAL-00030" />
      <option name="project" value="LOCAL" />
      <updated>1749884477064</updated>
    </task>
    <task id="LOCAL-00031" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749900971023</created>
      <option name="number" value="00031" />
      <option name="presentableId" value="LOCAL-00031" />
      <option name="project" value="LOCAL" />
      <updated>1749900971023</updated>
    </task>
    <task id="LOCAL-00032" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749911880991</created>
      <option name="number" value="00032" />
      <option name="presentableId" value="LOCAL-00032" />
      <option name="project" value="LOCAL" />
      <updated>1749911880991</updated>
    </task>
    <task id="LOCAL-00033" summary="Last bits of housekeeping before starting the first major functional upgrade.">
      <option name="closed" value="true" />
      <created>1749964371556</created>
      <option name="number" value="00033" />
      <option name="presentableId" value="LOCAL-00033" />
      <option name="project" value="LOCAL" />
      <updated>1749964371556</updated>
    </task>
    <task id="LOCAL-00034" summary="Last bits of housekeeping before starting the first major functional upgrade.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1749964934721</created>
      <option name="number" value="00034" />
      <option name="presentableId" value="LOCAL-00034" />
      <option name="project" value="LOCAL" />
      <updated>1749964934721</updated>
    </task>
    <task id="LOCAL-00035" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749965890596</created>
      <option name="number" value="00035" />
      <option name="presentableId" value="LOCAL-00035" />
      <option name="project" value="LOCAL" />
      <updated>1749965890596</updated>
    </task>
    <task id="LOCAL-00036" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1750035986807</created>
      <option name="number" value="00036" />
      <option name="presentableId" value="LOCAL-00036" />
      <option name="project" value="LOCAL" />
      <updated>1750035986807</updated>
    </task>
    <task id="LOCAL-00037" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1750037671374</created>
      <option name="number" value="00037" />
      <option name="presentableId" value="LOCAL-00037" />
      <option name="project" value="LOCAL" />
      <updated>1750037671374</updated>
    </task>
    <task id="LOCAL-00038" summary="Starting work on the table, which will give us the bank shot visualization">
      <option name="closed" value="true" />
      <created>1750043529283</created>
      <option name="number" value="00038" />
      <option name="presentableId" value="LOCAL-00038" />
      <option name="project" value="LOCAL" />
      <updated>1750043529283</updated>
    </task>
    <task id="LOCAL-00039" summary="Starting work on the table, which will give us the bank shot visualization">
      <option name="closed" value="true" />
      <created>1750045564065</created>
      <option name="number" value="00039" />
      <option name="presentableId" value="LOCAL-00039" />
      <option name="project" value="LOCAL" />
      <updated>1750045564065</updated>
    </task>
    <task id="LOCAL-00040" summary="Fixing a bug in the touch UI">
      <option name="closed" value="true" />
      <created>1750047075185</created>
      <option name="number" value="00040" />
      <option name="presentableId" value="LOCAL-00040" />
      <option name="project" value="LOCAL" />
      <updated>1750047075185</updated>
    </task>
    <task id="LOCAL-00041" summary="Fixing a bug in the touch UI&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750064494950</created>
      <option name="number" value="00041" />
      <option name="presentableId" value="LOCAL-00041" />
      <option name="project" value="LOCAL" />
      <updated>1750064494950</updated>
    </task>
    <task id="LOCAL-00042" summary="Fixing a bug in the touch UI&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750064723466</created>
      <option name="number" value="00042" />
      <option name="presentableId" value="LOCAL-00042" />
      <option name="project" value="LOCAL" />
      <updated>1750064723466</updated>
    </task>
    <task id="LOCAL-00043" summary="Fixing a bug in the touch UI&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750064792487</created>
      <option name="number" value="00043" />
      <option name="presentableId" value="LOCAL-00043" />
      <option name="project" value="LOCAL" />
      <updated>1750064792487</updated>
    </task>
    <task id="LOCAL-00044" summary="Fixing a bug in the touch UI&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750064967962</created>
      <option name="number" value="00044" />
      <option name="presentableId" value="LOCAL-00044" />
      <option name="project" value="LOCAL" />
      <updated>1750064967962</updated>
    </task>
    <task id="LOCAL-00045" summary="Merge remote-tracking branch 'CueDetat/main'&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/domain/StateReducer.kt&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt">
      <option name="closed" value="true" />
      <created>1750065040768</created>
      <option name="number" value="00045" />
      <option name="presentableId" value="LOCAL-00045" />
      <option name="project" value="LOCAL" />
      <updated>1750065040768</updated>
    </task>
    <task id="LOCAL-00046" summary="Merge remote-tracking branch 'CueDetat/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/domain/StateReducer.kt&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt">
      <option name="closed" value="true" />
      <created>1750065065628</created>
      <option name="number" value="00046" />
      <option name="presentableId" value="LOCAL-00046" />
      <option name="project" value="LOCAL" />
      <updated>1750065065628</updated>
    </task>
    <task id="LOCAL-00047" summary="Getting that bank calculator up innere.">
      <option name="closed" value="true" />
      <created>1750076882255</created>
      <option name="number" value="00047" />
      <option name="presentableId" value="LOCAL-00047" />
      <option name="project" value="LOCAL" />
      <updated>1750076882255</updated>
    </task>
    <task id="LOCAL-00048" summary="Getting that bank calculator up innere.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750077441843</created>
      <option name="number" value="00048" />
      <option name="presentableId" value="LOCAL-00048" />
      <option name="project" value="LOCAL" />
      <updated>1750077441843</updated>
    </task>
    <task id="LOCAL-00049" summary="Merge branch 'main' of https://github.com/HereLiesAz/CueDetat&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md">
      <option name="closed" value="true" />
      <created>1750077737903</created>
      <option name="number" value="00049" />
      <option name="presentableId" value="LOCAL-00049" />
      <option name="project" value="LOCAL" />
      <updated>1750077737903</updated>
    </task>
    <task id="LOCAL-00050" summary="NOW I'm getting the table and bank shot calculator in there.">
      <option name="closed" value="true" />
      <created>1750078295700</created>
      <option name="number" value="00050" />
      <option name="presentableId" value="LOCAL-00050" />
      <option name="project" value="LOCAL" />
      <updated>1750078295701</updated>
    </task>
    <task id="LOCAL-00051" summary="Now you can go to the bank.">
      <option name="closed" value="true" />
      <created>1750597754242</created>
      <option name="number" value="00051" />
      <option name="presentableId" value="LOCAL-00051" />
      <option name="project" value="LOCAL" />
      <updated>1750597754243</updated>
    </task>
    <task id="LOCAL-00052" summary="Now you can go to the bank.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750611999104</created>
      <option name="number" value="00052" />
      <option name="presentableId" value="LOCAL-00052" />
      <option name="project" value="LOCAL" />
      <updated>1750611999106</updated>
    </task>
    <task id="LOCAL-00053" summary="Merge remote-tracking branch 'CueDetat/main'">
      <option name="closed" value="true" />
      <created>1750612932398</created>
      <option name="number" value="00053" />
      <option name="presentableId" value="LOCAL-00053" />
      <option name="project" value="LOCAL" />
      <updated>1750612932398</updated>
    </task>
    <task id="LOCAL-00054" summary="Working on conveniences.">
      <option name="closed" value="true" />
      <created>1750634857186</created>
      <option name="number" value="00054" />
      <option name="presentableId" value="LOCAL-00054" />
      <option name="project" value="LOCAL" />
      <updated>1750634857186</updated>
    </task>
    <task id="LOCAL-00055" summary="Working on conveniences.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750635198674</created>
      <option name="number" value="00055" />
      <option name="presentableId" value="LOCAL-00055" />
      <option name="project" value="LOCAL" />
      <updated>1750635198674</updated>
    </task>
    <task id="LOCAL-00056" summary="Merge remote-tracking branch 'CueDetat/main'&#10;&#10;# Conflicts:&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/BallRenderer.kt&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/LineRenderer.kt">
      <option name="closed" value="true" />
      <created>1750639487996</created>
      <option name="number" value="00056" />
      <option name="presentableId" value="LOCAL-00056" />
      <option name="project" value="LOCAL" />
      <updated>1750639487996</updated>
    </task>
    <task id="LOCAL-00057" summary="Merge remote-tracking branch 'CueDetat/main'&#10;&#10;# Conflicts:&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/BallRenderer.kt&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/LineRenderer.kt">
      <option name="closed" value="true" />
      <created>1750639768381</created>
      <option name="number" value="00057" />
      <option name="presentableId" value="LOCAL-00057" />
      <option name="project" value="LOCAL" />
      <updated>1750639768381</updated>
    </task>
    <task id="LOCAL-00058" summary="Bug fixing the UI">
      <option name="closed" value="true" />
      <created>1750647540505</created>
      <option name="number" value="00058" />
      <option name="presentableId" value="LOCAL-00058" />
      <option name="project" value="LOCAL" />
      <updated>1750647540506</updated>
    </task>
    <task id="LOCAL-00059" summary="Bug fixing the UI&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750647640945</created>
      <option name="number" value="00059" />
      <option name="presentableId" value="LOCAL-00059" />
      <option name="project" value="LOCAL" />
      <updated>1750647640945</updated>
    </task>
    <task id="LOCAL-00060" summary="Implementing a spatial lock.">
      <option name="closed" value="true" />
      <created>1750648136390</created>
      <option name="number" value="00060" />
      <option name="presentableId" value="LOCAL-00060" />
      <option name="project" value="LOCAL" />
      <updated>1750648136390</updated>
    </task>
    <task id="LOCAL-00061" summary="Trying to get our spatial awareness on.">
      <option name="closed" value="true" />
      <created>1750650537534</created>
      <option name="number" value="00061" />
      <option name="presentableId" value="LOCAL-00061" />
      <option name="project" value="LOCAL" />
      <updated>1750650537535</updated>
    </task>
    <task id="LOCAL-00062" summary="Trying to get our spatial awareness on.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750651013818</created>
      <option name="number" value="00062" />
      <option name="presentableId" value="LOCAL-00062" />
      <option name="project" value="LOCAL" />
      <updated>1750651013818</updated>
    </task>
    <task id="LOCAL-00063" summary="Merge remote-tracking branch 'CueDetat/main'">
      <option name="closed" value="true" />
      <created>1750651044727</created>
      <option name="number" value="00063" />
      <option name="presentableId" value="LOCAL-00063" />
      <option name="project" value="LOCAL" />
      <updated>1750651044727</updated>
    </task>
    <task id="LOCAL-00064" summary="Merge remote-tracking branch 'CueDetat/main'">
      <option name="closed" value="true" />
      <created>1750652910330</created>
      <option name="number" value="00064" />
      <option name="presentableId" value="LOCAL-00064" />
      <option name="project" value="LOCAL" />
      <updated>1750652910331</updated>
    </task>
    <task id="LOCAL-00065" summary="Merge remote-tracking branch 'CueDetat/main'">
      <option name="closed" value="true" />
      <created>1750654023173</created>
      <option name="number" value="00065" />
      <option name="presentableId" value="LOCAL-00065" />
      <option name="project" value="LOCAL" />
      <updated>1750654023174</updated>
    </task>
    <task id="LOCAL-00066" summary="Merge remote-tracking branch 'CueDetat/main'">
      <option name="closed" value="true" />
      <created>1750654422107</created>
      <option name="number" value="00066" />
      <option name="presentableId" value="LOCAL-00066" />
      <option name="project" value="LOCAL" />
      <updated>1750654422107</updated>
    </task>
    <task id="LOCAL-00067" summary="Merge remote-tracking branch 'CueDetat/main'">
      <option name="closed" value="true" />
      <created>1750708445967</created>
      <option name="number" value="00067" />
      <option name="presentableId" value="LOCAL-00067" />
      <option name="project" value="LOCAL" />
      <updated>1750708445967</updated>
    </task>
    <task id="LOCAL-00068" summary="Merge remote-tracking branch 'CueDetat/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750708459641</created>
      <option name="number" value="00068" />
      <option name="presentableId" value="LOCAL-00068" />
      <option name="project" value="LOCAL" />
      <updated>1750708459641</updated>
    </task>
    <task id="LOCAL-00069" summary="Merge remote-tracking branch 'CueDetat/main'">
      <option name="closed" value="true" />
      <created>1750709448425</created>
      <option name="number" value="00069" />
      <option name="presentableId" value="LOCAL-00069" />
      <option name="project" value="LOCAL" />
      <updated>1750709448425</updated>
    </task>
    <task id="LOCAL-00070" summary="Increment version to 0.3.65&#10;&#10;This commit updates the application version from 0.3.6 to 0.3.65.&#10;&#10;The following files were modified:&#10;- `app/release/output-metadata.json`: Updated `versionCode` to 15, `versionName` to &quot;0.3.65&quot;, and output/baseline profile filenames.&#10;- `app/build.gradle.kts`: Updated `versionCode` to 15 and `versionName` to &quot;0.3.65&quot;.&#10;&#10;The following files were added:&#10;- `app/release/baselineProfiles/0/CueDetat-0.3.65-release.dm`&#10;- `app/release/baselineProfiles/1/CueDetat-0.3.65-release.dm`&#10;- `app/release/CueDetat-0.3.65-release.apk`&#10;&#10;The following files were deleted:&#10;- `app/release/baselineProfiles/0/CueDetat-0.3.6-release.dm`&#10;- `app/release/baselineProfiles/1/CueDetat-0.3.6-release.dm`&#10;- `app/release/CueDetat-0.3.6-release.apk`&#10;&#10;Build-related session files were also updated.">
      <option name="closed" value="true" />
      <created>1750709708249</created>
      <option name="number" value="00070" />
      <option name="presentableId" value="LOCAL-00070" />
      <option name="project" value="LOCAL" />
      <updated>1750709708249</updated>
    </task>
    <task id="LOCAL-00071" summary="Having nightmARes.">
      <option name="closed" value="true" />
      <created>1750733346585</created>
      <option name="number" value="00071" />
      <option name="presentableId" value="LOCAL-00071" />
      <option name="project" value="LOCAL" />
      <updated>1750733346585</updated>
    </task>
    <task id="LOCAL-00072" summary="Having nightmARes.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750733778537</created>
      <option name="number" value="00072" />
      <option name="presentableId" value="LOCAL-00072" />
      <option name="project" value="LOCAL" />
      <updated>1750733778537</updated>
    </task>
    <option name="localTasksCounter" value="73" />
    <servers />
  </component>
  <component name="Vcs.Log.History.Properties">
    <option name="SHOW_DETAILS" value="true" />
    <option name="SHOW_ROOT_NAMES" value="true" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="RECENT_FILTERS">
      <map>
        <entry key="User">
          <value>
            <list>
              <RecentGroup>
                <option name="FILTER_VALUES">
                  <option value="*" />
                </option>
              </RecentGroup>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="branch">
                    <value>
                      <list>
                        <option value="CueDetat/main" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_SMELLS_BEFORE_PROJECT_COMMIT" value="false" />
    <option name="CHECK_NEW_TODO" value="false" />
    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
    <option name="MARK_IGNORED_AS_EXCLUDED" value="true" />
    <option name="CLEAR_INITIAL_COMMIT_MESSAGE" value="true" />
    <MESSAGE value="Starting work on the table, which will give us the bank shot visualization" />
    <MESSAGE value="Fixing a bug in the touch UI" />
    <MESSAGE value="Fixing a bug in the touch UI&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <MESSAGE value="Merge remote-tracking branch 'CueDetat/main'&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/domain/StateReducer.kt&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt" />
    <MESSAGE value="Merge remote-tracking branch 'CueDetat/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/domain/StateReducer.kt&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt" />
    <MESSAGE value="Getting that bank calculator up innere." />
    <MESSAGE value="Getting that bank calculator up innere.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <MESSAGE value="Merge branch 'main' of https://github.com/HereLiesAz/CueDetat&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md" />
    <MESSAGE value="NOW I'm getting the table and bank shot calculator in there." />
    <MESSAGE value="Merge branch 'main' of https://github.com/HereLiesAz/CueDetat&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md" />
    <MESSAGE value="Now you can go to the bank." />
    <MESSAGE value="Now you can go to the bank.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <MESSAGE value="Working on conveniences." />
    <MESSAGE value="Working on conveniences.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <MESSAGE value="Merge remote-tracking branch 'CueDetat/main'&#10;&#10;# Conflicts:&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/BallRenderer.kt&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/LineRenderer.kt" />
    <MESSAGE value="Bug fixing the UI" />
    <MESSAGE value="Bug fixing the UI&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <MESSAGE value="Implementing a spatial lock." />
    <MESSAGE value="Trying to get our spatial awareness on." />
    <MESSAGE value="Trying to get our spatial awareness on.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <MESSAGE value="Merge remote-tracking branch 'CueDetat/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <MESSAGE value="Merge remote-tracking branch 'CueDetat/main'" />
    <MESSAGE value="Increment version to 0.3.65&#10;&#10;This commit updates the application version from 0.3.6 to 0.3.65.&#10;&#10;The following files were modified:&#10;- `app/release/output-metadata.json`: Updated `versionCode` to 15, `versionName` to &quot;0.3.65&quot;, and output/baseline profile filenames.&#10;- `app/build.gradle.kts`: Updated `versionCode` to 15 and `versionName` to &quot;0.3.65&quot;.&#10;&#10;The following files were added:&#10;- `app/release/baselineProfiles/0/CueDetat-0.3.65-release.dm`&#10;- `app/release/baselineProfiles/1/CueDetat-0.3.65-release.dm`&#10;- `app/release/CueDetat-0.3.65-release.apk`&#10;&#10;The following files were deleted:&#10;- `app/release/baselineProfiles/0/CueDetat-0.3.6-release.dm`&#10;- `app/release/baselineProfiles/1/CueDetat-0.3.6-release.dm`&#10;- `app/release/CueDetat-0.3.6-release.apk`&#10;&#10;Build-related session files were also updated." />
    <MESSAGE value="Having nightmARes." />
    <MESSAGE value="Having nightmARes.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <option name="LAST_COMMIT_MESSAGE" value="Having nightmARes.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <option name="MAKE_NEW_CHANGELIST_ACTIVE" value="true" />
  </component>
  <component name="play_dynamic_filters_status">
    <option name="appIdToCheckInfo">
      <map>
        <entry key="com.hereliesaz.cuedetat">
          <value>
            <CheckInfo lastCheckTimestamp="1750710250677" />
          </value>
        </entry>
        <entry key="com.hereliesaz.cuedetat.test">
          <value>
            <CheckInfo lastCheckTimestamp="1750710250678" />
          </value>
        </entry>
        <entry key="com.hereliesaz.cuedetat.trackless">
          <value>
            <CheckInfo lastCheckTimestamp="1749320159617" />
          </value>
        </entry>
        <entry key="com.hereliesaz.cuedetat.trackless.test">
          <value>
            <CheckInfo lastCheckTimestamp="1749320159623" />
          </value>
        </entry>
        <entry key="com.hereliesaz.poolprotractor.trackless.trackless">
          <value>
            <CheckInfo lastCheckTimestamp="1749319794625" />
          </value>
        </entry>
        <entry key="com.hereliesaz.poolprotractor.trackless.trackless.test">
          <value>
            <CheckInfo lastCheckTimestamp="1749319794627" />
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>


--- FILE: app/.gitignore ---

/build


--- FILE: app/proguard-rules.pro ---

# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile


# Keep Retrofit, OkHttp, Okio, and Gson classes
-keep class retrofit2.** { *; }
-keep interface retrofit2.** { *; }
-keep class com.google.gson.** { *; }
-keep class okhttp3.** { *; }
-keep interface okhttp3.** { *; }
-keep class okio.** { *; }
-keep interface okio.** { *; }

# Keep your GithubApi interface and its methods
-keep interface com.hereliesaz.cuedetat.network.GithubApi { *; }
# Keep your GithubRelease data class and its members if used directly by Gson
-keep class com.hereliesaz.cuedetat.network.GithubRelease { *; }
-keepclassmembers class com.hereliesaz.cuedetat.network.GithubRelease {
    <fields>;
    <init>(...);
}

# Keep Hilt generated classes
-keep class * extends androidx.lifecycle.ViewModel
-keep class **_HiltModules* { *; }
-keep class dagger.hilt.internal.aggregatedroot.AggregatedRoot { *; }
-keep class **_Factory { *; }
-keep class **_MembersInjector { *; }


--- FILE: app/release/output-metadata.json ---

{
  "version": 3,
  "artifactType": {
    "type": "APK",
    "kind": "Directory"
  },
  "applicationId": "com.hereliesaz.cuedetat",
  "variantName": "release",
  "elements": [
    {
      "type": "SINGLE",
      "filters": [],
      "attributes": [],
      "versionCode": 15,
      "versionName": "0.3.65",
      "outputFile": "CueDetat-0.3.65-release.apk"
    }
  ],
  "elementType": "File",
  "baselineProfiles": [
    {
      "minApi": 28,
      "maxApi": 30,
      "baselineProfiles": [
        "baselineProfiles/1/CueDetat-0.3.65-release.dm"
      ]
    },
    {
      "minApi": 31,
      "maxApi": 2147483647,
      "baselineProfiles": [
        "baselineProfiles/0/CueDetat-0.3.65-release.dm"
      ]
    }
  ],
  "minSdkVersionForDexing": 26
}


--- FILE: app/src/main/AndroidManifest.xml ---

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.INTERNET" />

    <uses-feature android:name="android.hardware.camera.any" />

    <uses-feature android:name="android.hardware.camera.ar" android:required="true" />
    <uses-feature android:name="com.google.ar.core.depth" android:required="false" />
    <uses-feature android:name="com.google.ar.core.instant_placement" android:required="false" />

    <application
        android:name=".MyApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.CueDetat"
        android:enableOnBackInvokedCallback="true"
        tools:targetApi="36">

        <meta-data android:name="com.google.ar.core" android:value="required" />

        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:theme="@style/Theme.CueDetat">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/data/GithubRepository.kt ---

package com.hereliesaz.cuedetat.data

import com.hereliesaz.cuedetat.network.GithubApi
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Represents the result of a version fetch, providing more detail than a nullable string.
 */
sealed class VersionResult {
    /**
     * Indicates a successful fetch.
     * @param tagName The version tag from the release.
     */
    data class Success(val tagName: String) : VersionResult()

    /**
     * Indicates a failed API request.
     * @param code The HTTP status code of the failure.
     */
    data class Failure(val code: Int) : VersionResult()

    /**
     * Indicates a network or other unknown error occurred.
     */
    object Error : VersionResult()
}

@Singleton
class GithubRepository @Inject constructor(private val githubApi: GithubApi) {

    companion object {
        private const val REPO_OWNER = "hereliesaz"
        private const val REPO_NAME = "CueDetat"
    }

    /**
     * Fetches the latest release version name from the project's GitHub repository.
     * @return A [VersionResult] indicating success, failure with an HTTP code, or a generic error.
     */
    suspend fun getLatestVersion(): VersionResult {
        return try {
            val response = githubApi.getLatestRelease(REPO_OWNER, REPO_NAME)
            if (response.isSuccessful) {
                // If successful, ensure the body and tag name are not null.
                response.body()?.tag_name?.let {
                    VersionResult.Success(it)
                } ?: VersionResult.Failure(response.code()) // Success but empty body is a failure.
            } else {
                // If the request was not successful, return the HTTP error code.
                VersionResult.Failure(response.code())
            }
        } catch (e: Exception) {
            // Exceptions are the universe's way of saying "not today."
            VersionResult.Error
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/data/SensorRepository.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/data/SensorRepository.kt
package com.hereliesaz.cuedetat.data

import android.content.Context
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.callbackFlow
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Holds the full orientation data: yaw, pitch, roll in degrees.
 * Yaw (Azimuth): Rotation around Z-axis.
 * Pitch: Rotation around X-axis.
 * Roll: Rotation around Y-axis.
 */
data class FullOrientation(val yaw: Float, val pitch: Float, val roll: Float)

@Singleton
class SensorRepository @Inject constructor(
    @ApplicationContext context: Context
) {
    private val sensorManager = context.getSystemService(Context.SENSOR_SERVICE) as SensorManager
    private val rotationVectorSensor: Sensor? =
        sensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR)

    // EMA filter parameters
    private val alpha = 0.1f // Smoothing factor; lower means more smoothing (less responsive)
    private var smoothedYaw: Float? = null
    private var smoothedPitch: Float? = null
    private var smoothedRoll: Float? = null

    // Keep the old pitchAngleFlow for now if anything still relies on it directly,
    // but prefer using fullOrientationFlow.
    val pitchAngleFlow: Flow<Float> = callbackFlow {
        val listener = object : SensorEventListener {
            private val rotationMatrix = FloatArray(9)
            private val orientationAngles = FloatArray(3) // For yaw, pitch, roll

            override fun onSensorChanged(event: SensorEvent?) {
                if (event?.sensor?.type == Sensor.TYPE_ROTATION_VECTOR) {
                    SensorManager.getRotationMatrixFromVector(rotationMatrix, event.values)
                    SensorManager.getOrientation(rotationMatrix, orientationAngles)
                    // orientationAngles[1] is pitch. Convert radians to degrees.
                    val pitchInDegrees = Math.toDegrees(orientationAngles[1].toDouble()).toFloat()
                    trySend(-pitchInDegrees) // Send negative pitch as per existing convention
                }
            }
            override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) { /* Not used */ }
        }
        if (rotationVectorSensor != null) {
            sensorManager.registerListener(listener, rotationVectorSensor, SensorManager.SENSOR_DELAY_GAME)
        }
        awaitClose { sensorManager.unregisterListener(listener) }
    }

    val fullOrientationFlow: Flow<FullOrientation> = callbackFlow {
        val listener = object : SensorEventListener {
            private val rotationMatrix = FloatArray(9)
            private val orientationAngles = FloatArray(3) // For yaw, pitch, roll

            override fun onSensorChanged(event: SensorEvent?) {
                if (event?.sensor?.type == Sensor.TYPE_ROTATION_VECTOR) {
                    SensorManager.getRotationMatrixFromVector(rotationMatrix, event.values)
                    SensorManager.getOrientation(rotationMatrix, orientationAngles)

                    val rawYaw = Math.toDegrees(orientationAngles[0].toDouble()).toFloat()
                    val rawPitch = Math.toDegrees(orientationAngles[1].toDouble()).toFloat()
                    val rawRoll = Math.toDegrees(orientationAngles[2].toDouble()).toFloat()

                    // Apply EMA filter
                    smoothedYaw = smoothedYaw?.let { (rawYaw * alpha) + (it * (1 - alpha)) } ?: rawYaw
                    smoothedPitch = smoothedPitch?.let { (rawPitch * alpha) + (it * (1 - alpha)) } ?: rawPitch
                    smoothedRoll = smoothedRoll?.let { (rawRoll * alpha) + (it * (1 - alpha)) } ?: rawRoll

                    // Send pitch as negative to match existing convention for `pitchAngle` in state.
                    trySend(FullOrientation(yaw = smoothedYaw!!, pitch = -smoothedPitch!!, roll = smoothedRoll!!))
                }
            }
            override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) { /* Not used */ }
        }

        if (rotationVectorSensor != null) {
            sensorManager.registerListener(
                listener,
                rotationVectorSensor,
                SensorManager.SENSOR_DELAY_GAME // SENSOR_DELAY_UI or SENSOR_DELAY_NORMAL might be better for smoother UI if GAME is too fast
            )
        }
        awaitClose {
            sensorManager.unregisterListener(listener)
            // Reset smoothed values when listener is unregistered
            smoothedYaw = null
            smoothedPitch = null
            smoothedRoll = null
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/data/UpdateChecker.kt ---

package com.hereliesaz.cuedetat.data

import com.hereliesaz.cuedetat.BuildConfig
import javax.inject.Inject
import javax.inject.Singleton

/**
 * A sealed class representing the possible outcomes of an update check.
 */
sealed class UpdateResult {
    object UpToDate : UpdateResult()
    data class UpdateAvailable(val latestVersion: String) : UpdateResult()

    /**
     * Indicates that the update check failed.
     * @param reason A user-facing string explaining why.
     */
    data class CheckFailed(val reason: String) : UpdateResult()
}

/**
 * A dedicated class to handle the application update check logic.
 * It encapsulates the process of fetching the latest version and comparing it
 * with the current installed version.
 */
@Singleton
class UpdateChecker @Inject constructor(private val githubRepository: GithubRepository) {

    /**
     * Checks for a new application version on GitHub.
     * @return An [UpdateResult] indicating the outcome of the check.
     */
    suspend fun checkForUpdate(): UpdateResult {
        val versionResult = githubRepository.getLatestVersion()
        val currentVersion = BuildConfig.VERSION_NAME

        return when (versionResult) {
            is VersionResult.Success -> {
                val comparableLatestVersion = versionResult.tagName.removePrefix("v")
                if (comparableLatestVersion == currentVersion) {
                    UpdateResult.UpToDate
                } else {
                    UpdateResult.UpdateAvailable(versionResult.tagName)
                }
            }

            is VersionResult.Failure -> {
                // Provide a more descriptive reason based on the HTTP code.
                val reason = if (versionResult.code == 404) {
                    "No public release found."
                } else {
                    "API request failed (Code: ${versionResult.code})"
                }
                UpdateResult.CheckFailed(reason)
            }

            is VersionResult.Error -> {
                UpdateResult.CheckFailed("A network error occurred.")
            }
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/di/AppModule.kt ---

package com.hereliesaz.cuedetat.di

import com.hereliesaz.cuedetat.network.GithubApi
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object AppModule {

    @Provides
    @Singleton
    fun provideGithubApi(): GithubApi {
        return Retrofit.Builder()
            .baseUrl("https://api.github.com/")
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(GithubApi::class.java)
    }
}



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/domain/StateReducer.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/domain/StateReducer.kt
package com.hereliesaz.cuedetat.domain

import android.graphics.PointF
import android.util.Log
import androidx.compose.material3.ColorScheme
import com.hereliesaz.cuedetat.data.FullOrientation
import com.hereliesaz.cuedetat.ui.MainScreenEvent
import com.hereliesaz.cuedetat.ui.ZoomMapping
import com.hereliesaz.cuedetat.view.model.ActualCueBall
import com.hereliesaz.cuedetat.view.model.ProtractorUnit
import com.hereliesaz.cuedetat.view.state.OverlayState
import javax.inject.Inject
import kotlin.math.min

class StateReducer @Inject constructor() {

    private val tableToBallRatioLong = 88f
    private val defaultBankingAimDistanceFactor = 15f

    private fun getCurrentLogicalRadius(
        stateWidth: Int,
        stateHeight: Int,
        zoomSliderPos: Float
    ): Float {
        if (stateWidth == 0 || stateHeight == 0) return 1f
        val zoomFactor = ZoomMapping.sliderToZoom(zoomSliderPos)
        return (min(stateWidth, stateHeight) * 0.30f / 2f) * zoomFactor
    }

    private fun adjustBallForCenteredZoom(
        currentBall: ActualCueBall?, viewCenterX: Float, viewCenterY: Float,
        oldZoomFactorFromSlider: Float, newZoomFactorFromSlider: Float
    ): ActualCueBall? {
        if (currentBall == null || oldZoomFactorFromSlider.ほぼEquals(0f) || newZoomFactorFromSlider.ほぼEquals(
                0f
            ) || oldZoomFactorFromSlider.ほぼEquals(newZoomFactorFromSlider)
        ) {
            return currentBall
        }
        val scaleEffectRatio = oldZoomFactorFromSlider / newZoomFactorFromSlider
        // Use screenCenter explicitly here
        val vecX = currentBall.screenCenter.x - viewCenterX
        val vecY = currentBall.screenCenter.y - viewCenterY
        val newVecX = vecX * scaleEffectRatio
        val newVecY = vecY * scaleEffectRatio
        val newCenterX = viewCenterX + newVecX
        val newCenterY = viewCenterY + newVecY
        // Return with updated screenCenter
        return currentBall.copy(screenCenter = PointF(newCenterX, newCenterY))
    }

    private fun Float.ほぼEquals(other: Float, tolerance: Float = 0.00001f): Boolean {
        return kotlin.math.abs(this - other) < tolerance
    }

    fun reduce(currentState: OverlayState, event: MainScreenEvent): OverlayState {
        val viewCenterX = currentState.viewWidth / 2f
        val viewCenterY = currentState.viewHeight / 2f

        if (currentState.isSpatiallyLocked) {
            when (event) {
                is MainScreenEvent.ToggleSpatialLock,
                is MainScreenEvent.ZoomSliderChanged,
                is MainScreenEvent.ZoomScaleChanged,
                is MainScreenEvent.ToggleBankingMode,
                is MainScreenEvent.FullOrientationChanged,
                is MainScreenEvent.ToggleHelp,
                is MainScreenEvent.ToggleForceTheme,
                is MainScreenEvent.ToggleLuminanceDialog,
                is MainScreenEvent.AdjustLuminance,
                is MainScreenEvent.StartTutorial,
                is MainScreenEvent.NextTutorialStep,
                is MainScreenEvent.EndTutorial,
                is MainScreenEvent.Reset,
                is MainScreenEvent.ThemeChanged,
                is MainScreenEvent.GestureStarted,
                is MainScreenEvent.GestureEnded,
                is MainScreenEvent.CheckForUpdate,
                is MainScreenEvent.ViewArt,
                is MainScreenEvent.FeatureComingSoon,
                is MainScreenEvent.ShowDonationOptions,
                is MainScreenEvent.SingleEventConsumed,
                is MainScreenEvent.ShowToast,
                is MainScreenEvent.ToastShown -> {
                    // Allowed events proceed
                }
                else -> return currentState
            }
        }

        return when (event) {
            is MainScreenEvent.SizeChanged -> {
                if (currentState.viewWidth == 0 && currentState.viewHeight == 0) {
                    createInitialState(event.width, event.height, currentState.appControlColorScheme)
                } else {
                    val newLogicalRadius = getCurrentLogicalRadius(event.width, event.height, currentState.zoomSliderPosition)
                    var updatedActualCueBall = currentState.actualCueBall?.copy(radius = newLogicalRadius)
                    var protractorNewScreenCenter = currentState.protractorUnit.screenCenter
                    if (!currentState.isSpatiallyLocked) {
                        if (protractorNewScreenCenter.x. लगभगEquals(currentState.viewWidth / 2f) &&
                            protractorNewScreenCenter.y. लगभगEquals(currentState.viewHeight / 2f)) {
                            protractorNewScreenCenter = PointF(event.width / 2f, event.height / 2f)
                        }
                        if (currentState.isBankingMode && updatedActualCueBall != null) {
                            if (updatedActualCueBall.screenCenter.x. लगभगEquals(currentState.viewWidth/2f) && updatedActualCueBall.screenCenter.y. लगभगEquals(currentState.viewHeight/2f)) {
                                updatedActualCueBall = updatedActualCueBall.copy(screenCenter = PointF(event.width / 2f, event.height / 2f))
                            }
                        }
                    }
                    currentState.copy(
                        viewWidth = event.width, viewHeight = event.height,
                        protractorUnit = currentState.protractorUnit.copy(
                            radius = newLogicalRadius,
                            screenCenter = protractorNewScreenCenter,
                            logicalPosition = protractorNewScreenCenter
                        ),
                        actualCueBall = updatedActualCueBall
                    )
                }
            }
            is MainScreenEvent.ZoomSliderChanged -> {
                val oldZoomSliderPos = currentState.zoomSliderPosition
                val oldZoomFactor = ZoomMapping.sliderToZoom(oldZoomSliderPos)
                val newSliderPos = event.position.coerceIn(0f, 100f)
                val newLogicalRadius = getCurrentLogicalRadius(currentState.viewWidth, currentState.viewHeight, newSliderPos)
                val newZoomFactor = ZoomMapping.sliderToZoom(newSliderPos)
                var updatedActualCueBall = currentState.actualCueBall?.copy(radius = newLogicalRadius)
                if (currentState.isBankingMode && updatedActualCueBall != null) {
                    updatedActualCueBall = adjustBallForCenteredZoom(updatedActualCueBall, viewCenterX, viewCenterY, oldZoomFactor, newZoomFactor)
                }
                currentState.copy(
                    protractorUnit = currentState.protractorUnit.copy(radius = newLogicalRadius),
                    actualCueBall = updatedActualCueBall,
                    zoomSliderPosition = newSliderPos,
                    valuesChangedSinceReset = true
                )
            }
            is MainScreenEvent.ZoomScaleChanged -> {
                val oldZoomSliderPos = currentState.zoomSliderPosition
                val oldZoomFactor = ZoomMapping.sliderToZoom(oldZoomSliderPos)
                val currentZoomValue = ZoomMapping.sliderToZoom(oldZoomSliderPos)
                val newZoomValue = (currentZoomValue * event.scaleFactor).coerceIn(ZoomMapping.MIN_ZOOM, ZoomMapping.MAX_ZOOM)
                val newSliderPos = ZoomMapping.zoomToSlider(newZoomValue)
                val newLogicalRadius = getCurrentLogicalRadius(currentState.viewWidth, currentState.viewHeight, newSliderPos)
                val newZoomFactor = newZoomValue
                var updatedActualCueBall = currentState.actualCueBall?.copy(radius = newLogicalRadius)
                if (currentState.isBankingMode && updatedActualCueBall != null) {
                    updatedActualCueBall = adjustBallForCenteredZoom(updatedActualCueBall, viewCenterX, viewCenterY, oldZoomFactor, newZoomFactor)
                }
                currentState.copy(
                    protractorUnit = currentState.protractorUnit.copy(radius = newLogicalRadius),
                    actualCueBall = updatedActualCueBall,
                    zoomSliderPosition = newSliderPos,
                    valuesChangedSinceReset = true
                )
            }
            is MainScreenEvent.FullOrientationChanged -> {
                Log.d("StateReducer", "FullOrientationChanged: ${event.orientation}, Locked: ${currentState.isSpatiallyLocked}")
                currentState.copy(currentOrientation = event.orientation)
            }
            is MainScreenEvent.ToggleSpatialLock -> {
                val newLockState = event.isLocked
                if (newLockState) {
                    currentState.copy(
                        isSpatiallyLocked = true,
                        anchorOrientation = currentState.currentOrientation,
                        valuesChangedSinceReset = true
                    )
                } else {
                    currentState.copy(
                        isSpatiallyLocked = false,
                        anchorOrientation = null,
                        valuesChangedSinceReset = true
                    )
                }
            }
            is MainScreenEvent.Reset -> {
                createInitialState(currentState.viewWidth, currentState.viewHeight, currentState.appControlColorScheme)
            }
            is MainScreenEvent.RotationChanged -> {
                var normAng = event.newRotation % 360f; if (normAng < 0) normAng += 360f
                currentState.copy(protractorUnit = currentState.protractorUnit.copy(rotationDegrees = normAng), valuesChangedSinceReset = true)
            }
            is MainScreenEvent.UnitMoved -> {
                currentState.copy(protractorUnit = currentState.protractorUnit.copy(screenCenter = event.position), valuesChangedSinceReset = true)
            }
            is MainScreenEvent.ActualCueBallMoved -> {
                currentState.actualCueBall?.let {
                    currentState.copy(actualCueBall = it.copy(screenCenter = event.position), valuesChangedSinceReset = true)
                } ?: currentState
            }
            is MainScreenEvent.TableRotationChanged -> {
                currentState.copy(tableRotationDegrees = event.degrees, valuesChangedSinceReset = true)
            }
            is MainScreenEvent.BankingAimTargetDragged -> {
                currentState.copy(bankingAimTarget = event.screenPoint, valuesChangedSinceReset = true)
            }
            is MainScreenEvent.ToggleActualCueBall -> {
                if (currentState.isBankingMode) return currentState
                if (currentState.actualCueBall == null) {
                    val newRadius = getCurrentLogicalRadius(currentState.viewWidth, currentState.viewHeight, currentState.zoomSliderPosition)
                    val initialCenter = PointF(viewCenterX, viewCenterY + newRadius * 4)
                    currentState.copy(actualCueBall = ActualCueBall(screenCenter = initialCenter, radius = newRadius, logicalPosition = initialCenter), valuesChangedSinceReset = true)
                } else {
                    currentState.copy(actualCueBall = null, valuesChangedSinceReset = true)
                }
            }
            is MainScreenEvent.ToggleBankingMode -> {
                val bankingEnabled = !currentState.isBankingMode
                val newState = if (bankingEnabled) {
                    val bankingZoomSliderPos = ZoomMapping.zoomToSlider(ZoomMapping.DEFAULT_ZOOM * 0.8f)
                    val newLogicalRadius = getCurrentLogicalRadius(currentState.viewWidth, currentState.viewHeight, bankingZoomSliderPos)
                    val bankingBallLogicalCenter = PointF(viewCenterX, viewCenterY)
                    val bankingBallScreenCenter = bankingBallLogicalCenter
                    val newBankingBall = ActualCueBall(screenCenter = bankingBallScreenCenter, radius = newLogicalRadius, logicalPosition = bankingBallLogicalCenter)
                    val initialAimTarget = calculateInitialBankingAimTarget(newBankingBall, 0f, newLogicalRadius)
                    currentState.copy(
                        isBankingMode = true, actualCueBall = newBankingBall,
                        zoomSliderPosition = bankingZoomSliderPos, tableRotationDegrees = 0f,
                        bankingAimTarget = initialAimTarget,
                        protractorUnit = currentState.protractorUnit.copy(radius = newLogicalRadius),
                        warningText = null
                    )
                } else {
                    val defaultSliderPos = ZoomMapping.zoomToSlider(ZoomMapping.DEFAULT_ZOOM)
                    val defaultLogicalRadius = getCurrentLogicalRadius(currentState.viewWidth, currentState.viewHeight, defaultSliderPos)
                    currentState.copy(
                        isBankingMode = false, bankingAimTarget = null, actualCueBall = null,
                        zoomSliderPosition = defaultSliderPos,
                        protractorUnit = currentState.protractorUnit.copy(
                            radius = defaultLogicalRadius,
                            screenCenter = PointF(viewCenterX, viewCenterY),
                            logicalPosition = PointF(viewCenterX, viewCenterY)
                        ),
                        tableRotationDegrees = 0f, warningText = null
                    )
                }
                return newState.copy(
                    isSpatiallyLocked = false, anchorOrientation = null,
                    valuesChangedSinceReset = true,
                    showLuminanceDialog = false, showTutorialOverlay = false,
                    isMoreHelpVisible = false
                )
            }
            is MainScreenEvent.ToggleForceTheme -> {
                val newMode = when (currentState.isForceLightMode) { null -> true; true -> false; false -> null }
                currentState.copy(isForceLightMode = newMode, valuesChangedSinceReset = true)
            }
            is MainScreenEvent.ToggleLuminanceDialog -> currentState.copy(showLuminanceDialog = !currentState.showLuminanceDialog)
            is MainScreenEvent.AdjustLuminance -> currentState.copy(luminanceAdjustment = event.adjustment.coerceIn(-0.4f, 0.4f), valuesChangedSinceReset = true)
            is MainScreenEvent.StartTutorial -> currentState.copy(
                showTutorialOverlay = true, currentTutorialStep = 0, valuesChangedSinceReset = true,
                areHelpersVisible = false, showLuminanceDialog = false, isMoreHelpVisible = false,
                isSpatiallyLocked = false, anchorOrientation = null
            )
            is MainScreenEvent.NextTutorialStep -> currentState.copy(currentTutorialStep = currentState.currentTutorialStep + 1, valuesChangedSinceReset = true)
            is MainScreenEvent.EndTutorial -> currentState.copy(showTutorialOverlay = false, currentTutorialStep = 0)
            is MainScreenEvent.ToggleHelp -> currentState.copy(areHelpersVisible = !currentState.areHelpersVisible)
            is MainScreenEvent.ThemeChanged -> currentState
            is MainScreenEvent.CheckForUpdate -> currentState
            is MainScreenEvent.ViewArt -> currentState
            is MainScreenEvent.FeatureComingSoon -> currentState
            is MainScreenEvent.ShowDonationOptions -> currentState
            is MainScreenEvent.SingleEventConsumed -> currentState
            is MainScreenEvent.ToastShown -> currentState
            is MainScreenEvent.GestureStarted -> currentState
            is MainScreenEvent.GestureEnded -> currentState
            is MainScreenEvent.ShowToast -> currentState

            else -> currentState
        }
    }

    private fun calculateInitialBankingAimTarget(
        cueBall: ActualCueBall,
        tableRotationDegrees: Float,
        cueBallRadius: Float
    ): PointF {
        val aimDistance = cueBallRadius * defaultBankingAimDistanceFactor
        val angleRad = Math.toRadians((tableRotationDegrees - 90.0))
        return PointF(
            cueBall.logicalPosition.x + (aimDistance * kotlin.math.cos(angleRad)).toFloat(),
            cueBall.logicalPosition.y + (aimDistance * kotlin.math.sin(angleRad)).toFloat()
        )
    }

    private fun createInitialState(
        viewWidth: Int,
        viewHeight: Int,
        appColorScheme: ColorScheme?
    ): OverlayState {
        val initialSliderPos = ZoomMapping.zoomToSlider(ZoomMapping.DEFAULT_ZOOM)
        val initialLogicalRadius = getCurrentLogicalRadius(viewWidth, viewHeight, initialSliderPos)
        val initialScreenCenter = PointF(viewWidth / 2f, viewHeight / 2f)
        val initialLogicalCenter = initialScreenCenter
        return OverlayState(
            viewWidth = viewWidth, viewHeight = viewHeight,
            protractorUnit = ProtractorUnit(screenCenter = initialScreenCenter, radius = initialLogicalRadius, rotationDegrees = 0f, logicalPosition = initialLogicalCenter),
            actualCueBall = null, zoomSliderPosition = initialSliderPos,
            isBankingMode = false, tableRotationDegrees = 0f, bankingAimTarget = null,
            valuesChangedSinceReset = false, areHelpersVisible = false, isMoreHelpVisible = false,
            isForceLightMode = null, luminanceAdjustment = 0f, showLuminanceDialog = false,
            showTutorialOverlay = false, currentTutorialStep = 0,
            appControlColorScheme = appColorScheme,
            isSpatiallyLocked = false,
            currentOrientation = FullOrientation(0f, 0f, 0f),
            anchorOrientation = null
        )
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/domain/UpdateStateUseCase.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/domain/UpdateStateUseCase.kt
package com.hereliesaz.cuedetat.domain

import android.graphics.Camera
import android.graphics.Matrix
import android.graphics.PointF
import com.hereliesaz.cuedetat.data.FullOrientation
import com.hereliesaz.cuedetat.view.model.Perspective
import com.hereliesaz.cuedetat.view.state.OverlayState
import javax.inject.Inject
import kotlin.math.pow
import kotlin.math.sqrt

class UpdateStateUseCase @Inject constructor() {

    private val tableToBallRatioShort = 44f
    private val railHeightToTableHeightRatio = 0.05f

    operator fun invoke(state: OverlayState, camera: Camera): OverlayState {
        if (state.viewWidth == 0 || state.viewHeight == 0) return state

        val pitchMatrix = Perspective.createPitchMatrix(
            currentOrientation = state.currentOrientation,
            anchorOrientation = state.anchorOrientation,
            isSpatiallyLocked = state.isSpatiallyLocked,
            viewWidth = state.viewWidth,
            viewHeight = state.viewHeight,
            camera = camera
        )

        val referenceRadiusForTable = state.actualCueBall?.radius ?: state.protractorUnit.radius
        val logicalTableShortSide = tableToBallRatioShort * referenceRadiusForTable
        val railLiftAmount = logicalTableShortSide * railHeightToTableHeightRatio

        val railPitchMatrix = Perspective.createPitchMatrix(
            currentOrientation = state.currentOrientation,
            anchorOrientation = state.anchorOrientation,
            isSpatiallyLocked = state.isSpatiallyLocked,
            viewWidth = state.viewWidth,
            viewHeight = state.viewHeight,
            camera = camera,
            lift = railLiftAmount
        )

        val centerX = state.viewWidth / 2f
        val centerY = state.viewHeight / 2f

        if (state.isBankingMode) {
            pitchMatrix.preRotate(90f, centerX, centerY)
            railPitchMatrix.preRotate(90f, centerX, centerY)

            val effectiveTableRotation = state.tableRotationDegrees % 360f
            if (effectiveTableRotation != 0f) {
                pitchMatrix.preRotate(effectiveTableRotation, centerX, centerY)
                railPitchMatrix.preRotate(effectiveTableRotation, centerX, centerY)
            }
        }

        val inverseMatrix = Matrix()
        val hasInverse = pitchMatrix.invert(inverseMatrix)

        val anchorPointA: PointF? = state.actualCueBall?.logicalPosition ?: run {
            if (hasInverse) {
                val screenAnchor = floatArrayOf(state.viewWidth / 2f, state.viewHeight.toFloat())
                val logicalAnchorArray = FloatArray(2)
                inverseMatrix.mapPoints(logicalAnchorArray, screenAnchor)
                PointF(logicalAnchorArray[0], logicalAnchorArray[1])
            } else {
                null
            }
        }

        val calculatedIsImpossibleShot = anchorPointA?.let { anchor ->
            val distAtoG = distance(anchor, state.protractorUnit.protractorCueBallLogicalCenter)
            val distAtoT = distance(anchor, state.protractorUnit.logicalPosition)
            distAtoG > distAtoT
        } ?: false

        return state.copy(
            pitchMatrix = pitchMatrix,
            railPitchMatrix = railPitchMatrix,
            inversePitchMatrix = inverseMatrix,
            hasInverseMatrix = hasInverse,
            isImpossibleShot = calculatedIsImpossibleShot
        )
    }

    private fun distance(p1: PointF, p2: PointF): Float =
        sqrt((p1.x - p2.x).pow(2) + (p1.y - p2.y).pow(2))
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/domain/WarningManager.kt ---

package com.hereliesaz.cuedetat.domain

import com.hereliesaz.cuedetat.view.state.OverlayState // Import OverlayState
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

class WarningManager @Inject constructor() {

    private var warningIndex = 0
    private var warningDismissJob: Job? = null

    private val _currentWarning = MutableStateFlow<String?>(null)
    val currentWarning = _currentWarning.asStateFlow()

    fun triggerWarning(warnings: Array<String>, scope: CoroutineScope) {
        warningDismissJob?.cancel()
        _currentWarning.value = warnings[warningIndex]
        warningIndex = (warningIndex + 1) % warnings.size
        warningDismissJob = scope.launch {
            delay(3000L)
            dismissWarning()
        }
    }

    private fun dismissWarning() {
        _currentWarning.value = null
    }

    /**
     * Re-added: Function to check for warnings based on OverlayState.
     * This is a skeletal implementation; you should populate the actual warning
     * logic based on your application's specific conditions.
     */
    fun checkWarnings(state: OverlayState): String? {
        if (state.isImpossibleShot) {
            return "Impossible Shot Detected!"
        }
        // Example: Add a warning if ARCore session exists but its tracking is not reliable
        // (Note: `isDepthSensorUsed` is not a direct property of CameraConfig accessible this way).
        // You would need to check `frame.camera.trackingState` from the ARCore rendering loop
        // and propagate that state to OverlayState if you want to warn based on tracking quality.
        if (state.isSpatiallyLocked && state.arSession != null /* && state.arTrackingState != TrackingState.TRACKING */) {
            // This condition is illustrative and needs actual AR tracking state check which isn't in OverlayState.
            // For a real check, you'd need AR tracking state propagated to OverlayState.
            // return "Poor AR Tracking Quality!"
        }
        // Add more warning conditions here (e.g., if a ball is out of bounds, etc.)
        return null // No warning
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/MainActivity.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/MainActivity.kt
package com.hereliesaz.cuedetat

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.lifecycle.lifecycleScope
import com.google.ar.core.ArCoreApk
import com.google.ar.core.Session
import com.google.ar.core.exceptions.UnavailableArcoreNotInstalledException
import com.google.ar.core.exceptions.UnavailableDeviceNotCompatibleException
import com.google.ar.core.exceptions.UnavailableException
import com.google.ar.core.exceptions.UnavailableSdkTooOldException
import com.google.ar.core.exceptions.UnavailableUserDeclinedInstallationException
import com.hereliesaz.cuedetat.ui.MainScreen
import com.hereliesaz.cuedetat.ui.MainViewModel
import com.hereliesaz.cuedetat.ui.theme.CueDetatTheme
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.launch
import javax.inject.Inject

@AndroidEntryPoint
class MainActivity : ComponentActivity() {

    @Inject
    lateinit var viewModel: MainViewModel

    private var arSession: Session? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        // Attempt to enable ARCore if not already done, or check for its availability
        maybeEnableArCore()

        setContent {
            CueDetatTheme {
                MainScreen(viewModel = viewModel)
            }
        }

        // Observe the spatial lock state from the ViewModel
        // and manage the AR session accordingly.
        lifecycleScope.launch {
            viewModel.uiState.collectLatest { uiState ->
                if (uiState.isSpatiallyLocked) {
                    // If switching to locked (AR) mode, ensure AR session is created and resumed
                    if (arSession == null) {
                        tryCreateArSession()
                    } else {
                        try {
                            arSession?.resume()
                        } catch (e: Exception) {
                            Log.e("ARCore", "Failed to resume AR session on lock enable", e)
                        }
                    }
                } else {
                    // If switching off locked (AR) mode, pause AR session
                    arSession?.pause()
                }
            }
        }
    }

    /**
     * Checks ARCore availability and attempts to install it if needed.
     * This function should be called early in the Activity lifecycle.
     */
    private fun maybeEnableArCore() {
        val availability = ArCoreApk.getInstance().checkAvailability(this)

        if (availability.isTransient) {
            // ARCore is not yet available, but might be soon. Retry later.
            Log.d("ARCore", "ARCore availability is transient. Retrying soon.")
            // Consider adding a delay or retry mechanism here if critical for initial load
            return
        }

        if (availability.isSupported) {
            Log.d("ARCore", "ARCore is supported on this device.")
            // If supported, attempt to create the AR session immediately
            tryCreateArSession()
        } else {
            Log.w("ARCore", "ARCore is NOT supported on this device.")
            // Handle cases where ARCore is permanently not supported on the device.
            // You might want to disable AR-related UI elements or show a message.
        }
    }

    /**
     * Attempts to create an ARCore session. Handles installation requests if necessary.
     */
    private fun tryCreateArSession() {
        if (arSession != null) {
            Log.d("ARCore", "AR Session already exists. Skipping creation.")
            return // Session already exists
        }

        try {
            when (ArCoreApk.getInstance().requestInstall(this, true)) { // `true` requests user installation if needed
                ArCoreApk.InstallStatus.INSTALLED -> {
                    // ARCore is installed. Create the AR session.
                    arSession = Session(this)
                    Log.d("ARCore", "AR Session created successfully.")
                    // Inform ViewModel about the created AR session
                    viewModel.onArSessionCreated(arSession!!)
                }
                // If 'INSTALL_REQUEST_NEEDED' remains unresolved, please verify your ARCore SDK setup in build.gradle.kts
                // and ensure Gradle caches are cleared. This is a build environment issue.
                ArCoreApk.InstallStatus.INSTALL_REQUEST_NEEDED -> {
                    Log.d("ARCore", "ARCore installation requested. Waiting for user interaction.")
                    // User will be prompted to install Google Play Services for AR.
                    // The activity will resume (via onResume) when installation is complete or cancelled.
                }
                else -> { // Added else branch to make 'when' exhaustive
                    Log.e("ARCore", "Unhandled ARCore installation status.")
                }
            }
        } catch (e: UnavailableUserDeclinedInstallationException) {
            Log.e("ARCore", "User declined ARCore installation.", e)
            // Inform ViewModel or show user-friendly message
        } catch (e: UnavailableDeviceNotCompatibleException) {
            Log.e("ARCore", "Device not compatible with ARCore.", e)
            // Inform ViewModel or show user-friendly message
        } catch (e: UnavailableArcoreNotInstalledException) {
            Log.e("ARCore", "ARCore not installed unexpectedly.", e)
            // This case should ideally be caught by requestInstall mostly, but here as a fallback
        } catch (e: UnavailableSdkTooOldException) {
            Log.e("ARCore", "ARCore SDK version too old.", e)
        } catch (e: UnavailableException) {
            Log.e("ARCore", "ARCore is unavailable for an unknown reason.", e)
        } catch (e: Exception) { // Catch any other unexpected exceptions during session creation
            Log.e("ARCore", "Unexpected error during AR session creation.", e)
        }
    }

    override fun onResume() {
        super.onResume()
        // Resume AR session only if it exists and the app is in spatially locked (AR) mode
        if (viewModel.uiState.value.isSpatiallyLocked) {
            try {
                arSession?.resume()
                Log.d("ARCore", "AR Session resumed from onResume.")
            } catch (e: Exception) {
                Log.e("ARCore", "Failed to resume AR session in onResume", e)
            }
        }
    }

    override fun onPause() {
        super.onPause()
        // Pause AR session regardless of spatial lock state when activity pauses
        arSession?.pause()
        Log.d("ARCore", "AR Session paused from onPause.")
    }

    override fun onDestroy() {
        super.onDestroy()
        // Close AR session when activity is destroyed
        arSession?.close()
        arSession = null
        Log.d("ARCore", "AR Session closed from onDestroy.")
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/MyApplication.kt ---

package com.hereliesaz.cuedetat

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

/**
 * The Application class, annotated with @HiltAndroidApp, is the entry point for Hilt
 * and is responsible for creating the top-level dependency container.
 */
@HiltAndroidApp
class MyApplication : Application() {
    // This class can be empty. Its presence and annotation are all that's needed for Hilt.
}



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/network/GithubApi.kt ---

package com.hereliesaz.cuedetat.network

import retrofit2.Response
import retrofit2.http.GET
import retrofit2.http.Path

/**
 * A data class representing the relevant fields from a GitHub Release API response.
 * We only care about the tag name, which contains the version.
 */
data class GithubRelease(
    val tag_name: String
)

/**
 * Retrofit interface for the GitHub API.
 * Defines the endpoint for fetching the latest release of a repository.
 */
interface GithubApi {
    @GET("repos/{owner}/{repo}/releases/latest")
    suspend fun getLatestRelease(
        @Path("owner") owner: String,
        @Path("repo") repo: String
    ): Response<GithubRelease>
}



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/CameraPreview.kt ---

package com.hereliesaz.cuedetat.ui

import androidx.camera.core.CameraSelector
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.viewinterop.AndroidView
import androidx.core.content.ContextCompat
import androidx.lifecycle.compose.LocalLifecycleOwner

@Composable
fun CameraPreview(
    modifier: Modifier = Modifier,
    scaleType: PreviewView.ScaleType = PreviewView.ScaleType.FILL_CENTER
) {
    val context = LocalContext.current
    val lifecycleOwner = LocalLifecycleOwner.current // This now uses the correct dependency
    val cameraProviderFuture = remember { ProcessCameraProvider.getInstance(context) }

    AndroidView(
        factory = { ctx ->
            val previewView = PreviewView(ctx).apply {
                this.scaleType = scaleType
            }
            val executor = ContextCompat.getMainExecutor(ctx)
            cameraProviderFuture.addListener({
                val cameraProvider = cameraProviderFuture.get()
                val preview = Preview.Builder().build().also {
                    it.surfaceProvider = previewView.surfaceProvider
                }
                val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA
                try {
                    cameraProvider.unbindAll()
                    cameraProvider.bindToLifecycle(lifecycleOwner, cameraSelector, preview)
                } catch (exc: Exception) {
                    // Log error or handle exception
                }
            }, executor)
            previewView
        },
        modifier = modifier
    )
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/composables/ActionFabs.kt ---

package com.hereliesaz.cuedetat.ui.composables

import androidx.compose.foundation.layout.navigationBarsPadding
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.hereliesaz.cuedetat.R
import com.hereliesaz.cuedetat.ui.MainScreenEvent
import com.hereliesaz.cuedetat.view.state.OverlayState

@Composable
fun ResetFab(
    uiState: OverlayState,
    onEvent: (MainScreenEvent) -> Unit,
    modifier: Modifier = Modifier
) {
    FloatingActionButton(
        onClick = { onEvent(MainScreenEvent.Reset) },
        modifier = modifier
            .padding(16.dp)
            .navigationBarsPadding(),
        // Corrected: `valuesChangedSinceReset` now exists in OverlayState
        containerColor = if (uiState.valuesChangedSinceReset) MaterialTheme.colorScheme.secondaryContainer else MaterialTheme.colorScheme.surfaceVariant
    ) {
        if (uiState.areHelpersVisible) {
            Text(
                text = "Reset\nView",
                textAlign = TextAlign.Center,
                style = MaterialTheme.typography.labelSmall,
                // Corrected: `valuesChangedSinceReset` now exists in OverlayState
                color = if (uiState.valuesChangedSinceReset) MaterialTheme.colorScheme.onSecondaryContainer else MaterialTheme.colorScheme.onSurfaceVariant
            )
        } else {
            Icon(
                painter = painterResource(id = R.drawable.ic_undo_24),
                contentDescription = "Reset View",
                // Corrected: `valuesChangedSinceReset` now exists in OverlayState
                tint = if (uiState.valuesChangedSinceReset) MaterialTheme.colorScheme.onSecondaryContainer else MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

@Composable
fun ToggleCueBallFab(
    uiState: OverlayState,
    onEvent: (MainScreenEvent) -> Unit,
    modifier: Modifier = Modifier
) {
    FloatingActionButton(
        onClick = { onEvent(MainScreenEvent.ToggleActualCueBall) },
        modifier = modifier
            .padding(16.dp)
            .navigationBarsPadding(),
        containerColor = if (uiState.actualCueBall != null) MaterialTheme.colorScheme.secondaryContainer else MaterialTheme.colorScheme.surfaceVariant
    ) {
        if (uiState.areHelpersVisible) {
            Text(
                text = "Cue Ball\nToggle",
                textAlign = TextAlign.Center,
                style = MaterialTheme.typography.labelSmall,
                color = if (uiState.actualCueBall != null) MaterialTheme.colorScheme.onSecondaryContainer else MaterialTheme.colorScheme.onSurfaceVariant
            )
        } else {
            Icon(
                painter = painterResource(id = R.drawable.ic_jump_shot),
                contentDescription = "Toggle Actual Cue Ball",
                tint = if (uiState.actualCueBall != null) MaterialTheme.colorScheme.onSecondaryContainer else MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/composables/ArCoreScene.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/ui/composables/ArCoreScene.kt
package com.hereliesaz.cuedetat.ui.composables

import android.content.Context
import android.opengl.GLES11Ext // Correct import for GL_TEXTURE_EXTERNAL_OES
import android.opengl.GLES20
import android.opengl.GLSurfaceView
import android.os.Build
import android.util.Log
import android.view.Display
import android.view.WindowManager
import androidx.annotation.RequiresApi
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.viewinterop.AndroidView
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleEventObserver
import com.google.ar.core.Frame
import com.google.ar.core.Session
import com.google.ar.core.TrackingState
import com.google.ar.core.exceptions.CameraNotAvailableException
import com.google.ar.core.exceptions.SessionPausedException
import com.google.ar.core.exceptions.UnavailableException
import com.hereliesaz.cuedetat.view.state.OverlayState
import javax.microedition.khronos.egl.EGLConfig
import javax.microedition.khronos.opengles.GL10

private const val TAG = "ArCoreScene"

/**
 * This Composable integrates ARCore's rendering and session management.
 * It serves as a placeholder for a complete AR rendering solution.
 *
 * NOTE: This is a skeletal implementation.
 * You will need to:
 * 1. Implement actual OpenGL ES rendering for AR camera background.
 * 2. Implement OpenGL ES rendering for your virtual objects (protractor, balls)
 * using ARCore's projection and view matrices.
 * 3. Handle ARCore's hit-testing and plane detection for object placement/interaction.
 * 4. Adapt your existing rendering logic from LineRenderer, BallRenderer, etc.,
 * to work with OpenGL ES in this AR context.
 */
@RequiresApi(Build.VERSION_CODES.N)
@Composable
fun ArCoreScene(
    modifier: Modifier = Modifier,
    arSession: Session?, // ARCore Session from MainActivity
    uiState: OverlayState // Pass the full UI state for rendering parameters
) {
    val context = LocalContext.current
    val lifecycleOwner = LocalLifecycleOwner.current

    val glSurfaceView = remember {
        GLSurfaceView(context).apply {
            setEGLContextClientVersion(2) // Use OpenGL ES 2.0
            setRenderer(ArCoreRenderer(context, arSession, uiState)) // Pass context to renderer
            renderMode = GLSurfaceView.RENDERMODE_CONTINUOUSLY // Render continuously
            setWillNotDraw(false) // Allow drawing (important for GLSurfaceView)
        }
    }

    DisposableEffect(lifecycleOwner, arSession) {
        val observer = LifecycleEventObserver { _, event ->
            when (event) {
                Lifecycle.Event.ON_RESUME -> {
                    try {
                        arSession?.resume()
                        Log.d(TAG, "AR Session resumed from Lifecycle.")
                    } catch (e: CameraNotAvailableException) {
                        Log.e(TAG, "Camera not available during ARCore resume", e)
                        // Handle camera not available (e.g., show error message to user)
                    } catch (e: UnavailableException) {
                        Log.e(TAG, "ARCore unavailable during resume", e)
                        // Handle ARCore unavailable (e.g., fallback to non-AR mode)
                    }
                }
                Lifecycle.Event.ON_PAUSE -> {
                    arSession?.pause()
                    Log.d(TAG, "AR Session paused from Lifecycle.")
                }
                Lifecycle.Event.ON_DESTROY -> {
                    arSession?.close() // Release ARCore resources
                    Log.d(TAG, "AR Session closed from Lifecycle.")
                }
                else -> {}
            }
        }
        lifecycleOwner.lifecycle.addObserver(observer)

        onDispose {
            lifecycleOwner.lifecycle.removeObserver(observer)
        }
    }

    AndroidView(
        factory = { glSurfaceView },
        modifier = modifier
    )
}

/**
 * OpenGL ES Renderer for ARCore content.
 * This class handles rendering the camera background and virtual AR objects.
 */
@RequiresApi(Build.VERSION_CODES.N)
class ArCoreRenderer(
    private val context: Context, // Context for resource loading (e.g., shaders)
    private var arSession: Session?,
    private var uiState: OverlayState // UI state to drive rendering of virtual objects
) : GLSurfaceView.Renderer {

    // Conceptual renderer for AR camera background
    private lateinit var arBackgroundRenderer: ArBackgroundRenderer
    private var backgroundRendererInitialized = false

    override fun onSurfaceCreated(gl: GL10?, config: EGLConfig?) {
        // Clear the screen to a solid color initially
        GLES20.glClearColor(0.0f, 0.0f, 0.0f, 1.0f)

        // Initialize AR background renderer
        arBackgroundRenderer = ArBackgroundRenderer()
        try {
            arBackgroundRenderer.createOnGlThread(context)
            backgroundRendererInitialized = true
        } catch (e: Exception) {
            Log.e(TAG, "Failed to create AR background renderer", e)
        }

        // Enable depth testing for proper object occlusion
        GLES20.glEnable(GLES20.GL_DEPTH_TEST)
        // Enable blending for transparency
        GLES20.glEnable(GLES20.GL_BLEND)
        GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA, GLES20.GL_ONE_MINUS_SRC_ALPHA)

        // TODO: Initialize your OpenGL ES programs and assets for virtual objects (e.g., protractor, balls) here.
        // You will need to load shaders, create vertex buffers, etc.
    }

    override fun onSurfaceChanged(gl: GL10?, width: Int, height: Int) {
        GLES20.glViewport(0, 0, width, height)
        // Update ARCore session's display geometry
        val display: Display? = (context.getSystemService(Context.WINDOW_SERVICE) as? WindowManager)?.defaultDisplay
        if (display != null) {
            arSession?.setDisplayGeometry(display.rotation, width, height)
        } else {
            Log.w(TAG, "Could not get display to set ARCore display geometry.")
        }
    }

    override fun onDrawFrame(gl: GL10?) {
        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT or GLES20.GL_DEPTH_BUFFER_BIT)

        if (arSession == null || !backgroundRendererInitialized) {
            return
        }

        try {
            // Update the ARCore session to get the latest frame
            val frame: Frame = arSession!!.update()
            val camera = frame.camera

            // If the camera is tracking, draw the AR camera background and virtual objects
            if (camera.trackingState == TrackingState.TRACKING) {
                // Render the AR camera background (e.g., video stream)
                arBackgroundRenderer.draw(frame)

                // Get ARCore camera projection matrix (for perspective)
                val projectionMatrix = FloatArray(16)
                camera.getProjectionMatrix(projectionMatrix, 0, 0.1f, 100.0f) // Near and far planes

                // Get ARCore camera view matrix (for camera position/orientation)
                val viewMatrix = FloatArray(16)
                camera.getViewMatrix(viewMatrix, 0)

                // TODO: Here's where you would render your virtual objects (protractor lines, balls)
                // You would use `uiState` to get the logical positions/parameters of your objects,
                // and then apply `projectionMatrix` and `viewMatrix` (and potentially ARCore's `Pose` for anchors)
                // to transform these logical objects into their correct 3D AR positions.

                // Example: conceptually pass rendering data
                // YourCustomProtractorRenderer.draw(projectionMatrix, viewMatrix, uiState.protractorUnit, ...)
                // YourCustomBallRenderer.draw(projectionMatrix, viewMatrix, uiState.actualCueBall, ...)
            }
        } catch (e: SessionPausedException) {
            Log.w(TAG, "AR Session paused during onDrawFrame", e)
        } catch (e: CameraNotAvailableException) {
            Log.e(TAG, "Camera not available during onDrawFrame", e)
            // Handle camera not available (e.g., show error message)
        } catch (e: UnavailableException) {
            Log.e(TAG, "ARCore unavailable during onDrawFrame", e)
            // Handle ARCore unavailable (e.g., fallback to non-AR mode or show error)
        } catch (t: Throwable) {
            Log.e(TAG, "Exception on draw frame", t)
        }
    }

    /**
     * Conceptual helper class for rendering the AR camera background.
     * In a real ARCore app, this would use a specific shader program to draw the camera texture.
     * This is highly simplified and serves as a placeholder.
     */
    class ArBackgroundRenderer {
        private var textureId: Int = -1
        // Corrected: Use GLES11Ext.GL_TEXTURE_EXTERNAL_OES
        private val TEXTURE_TARGET = GLES11Ext.GL_TEXTURE_EXTERNAL_OES // For camera texture

        fun createOnGlThread(context: Context) {
            val textures = IntArray(1)
            GLES20.glGenTextures(1, textures, 0)
            textureId = textures[0]
            GLES20.glBindTexture(TEXTURE_TARGET, textureId)

            // Set texture parameters for linear filtering and clamping to edge
            GLES20.glTexParameteri(TEXTURE_TARGET, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE)
            GLES20.glTexParameteri(TEXTURE_TARGET, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE)
            GLES20.glTexParameteri(TEXTURE_TARGET, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR)
            GLES20.glTexParameteri(TEXTURE_TARGET, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR)

            // TODO: In a complete implementation, you'd load shader programs (vertex and fragment shaders)
            // and set up a full-screen quad to draw the camera texture onto.
        }

        fun draw(frame: Frame) {
            // Update the camera texture with the latest frame
            // GLES20.glBindTexture(TEXTURE_TARGET, textureId) // Re-bind if necessary
            // arSession?.setCameraTextureName(textureId) // This is typically done earlier in session setup
            // frame.transformDisplayUvCoords( /* your texture coords */ );

            // TODO: In a real ARCore background renderer, you would draw the camera feed.
            // This involves drawing a quad (two triangles) that fills the screen,
            // and mapping the camera texture onto it using the correct UV coordinates.
            // The texture ID needs to be linked to the ARCore session via `session.setCameraTextureName`.
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/composables/CameraBackground.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/ui/composables/CameraBackground.kt
package com.hereliesaz.cuedetat.ui.composables

import android.content.Context
import android.util.Log
import android.util.Range // Import Range for setTargetFrameRate
import androidx.camera.core.CameraSelector
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.viewinterop.AndroidView
import androidx.core.content.ContextCompat
import androidx.lifecycle.LifecycleOwner
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

private const val TAG = "CameraBackground"

@Composable
fun CameraBackground(modifier: Modifier = Modifier) {
    val context = LocalContext.current
    val lifecycleOwner = LocalLifecycleOwner.current
    val cameraExecutor = remember { Executors.newSingleThreadExecutor() }
    // Create the PreviewView once and remember it across recompositions
    val previewView = remember { PreviewView(context) }

    // Use DisposableEffect to manage camera lifecycle
    DisposableEffect(lifecycleOwner) { // Re-bind if lifecycleOwner changes
        startCamera(context, lifecycleOwner, cameraExecutor, previewView)
        onDispose {
            cameraExecutor.shutdown()
            // Ensure camera is unbound when the composable leaves the composition
            val cameraProviderFuture = ProcessCameraProvider.getInstance(context)
            cameraProviderFuture.addListener({
                val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()
                cameraProvider.unbindAll()
            }, ContextCompat.getMainExecutor(context))
        }
    }

    // Embed the Android PreviewView into Compose UI
    AndroidView(
        factory = {
            previewView.apply {
                this.scaleType = PreviewView.ScaleType.FILL_CENTER
            }
        },
        modifier = modifier
    )
}

private fun startCamera(
    context: Context,
    lifecycleOwner: LifecycleOwner,
    cameraExecutor: ExecutorService,
    previewView: PreviewView // The PreviewView instance from Compose
) {
    val cameraProviderFuture = ProcessCameraProvider.getInstance(context)

    cameraProviderFuture.addListener({
        val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

        val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

        try {
            // First bind a minimal preview to get cameraInfo and check capabilities
            // Then unbind it to prepare for the final binding with stabilization settings
            val cameraForInfo = cameraProvider.bindToLifecycle(lifecycleOwner, cameraSelector)
            val cameraInfo = cameraForInfo.cameraInfo
            cameraProvider.unbindAll() // Unbind all use cases before rebinding with new settings

            val previewBuilder = Preview.Builder()

            // Check for preview stabilization capabilities and apply if supported
            val previewCapabilities = Preview.getPreviewCapabilities(cameraInfo)
            if (previewCapabilities.isStabilizationSupported) {
                previewBuilder.setPreviewStabilizationEnabled(true)
                Log.d(TAG, "Requested Preview Stabilization to be enabled on the Preview.Builder")
            } else {
                Log.w(TAG, "Preview Stabilization is NOT supported on this device.")
            }
            // Attempt to set a higher frame rate for smoother preview
            // Corrected: setTargetFrameRate expects a Range<Int>
            previewBuilder.setTargetFrameRate(Range(60, 60)) // Use Range for target frame rate

            // Build the Preview use case with configured settings
            val previewUseCase = previewBuilder.build()
            // Set the surface provider for the Preview use case to the PreviewView
            previewUseCase.setSurfaceProvider(previewView.surfaceProvider)

            // Re-bind use cases with the configured preview use case
            cameraProvider.bindToLifecycle(
                lifecycleOwner,
                cameraSelector,
                previewUseCase
            )

        } catch (exc: Exception) {
            Log.e(TAG, "Use case binding failed", exc)
        }

    }, ContextCompat.getMainExecutor(context))
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/composables/KineticWarning.kt ---

package com.hereliesaz.cuedetat.ui.composables

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.BiasAlignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.platform.LocalResources
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.ExperimentalTextApi
import androidx.compose.ui.text.TextLayoutResult
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.rememberTextMeasurer
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.hereliesaz.cuedetat.ui.theme.WarningRed
import kotlin.random.Random

@OptIn(ExperimentalTextApi::class)
@Composable
fun KineticWarningOverlay(text: String?, modifier: Modifier = Modifier) {
    // Generate a random alignment each time a new warning appears
    val randomAlignment = remember(text) {
        if (text == null) Alignment.Center else
            BiasAlignment(
                horizontalBias = Random.nextDouble(-0.5, 0.5).toFloat(),
                verticalBias = Random.nextDouble(-0.7, 0.7).toFloat()
            )
    }

    AnimatedVisibility(
        visible = text != null,
        modifier = modifier.fillMaxSize(),
        enter = fadeIn(animationSpec = tween(300)),
        exit = fadeOut(animationSpec = tween(1000))
    ) {
        // This Box is now the root of the visible content. It does not fill the
        // screen and therefore cannot block touches meant for what's underneath.
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            contentAlignment = randomAlignment
        ) {
            if (text != null) {
                Column(
                    horizontalAlignment = Alignment.Start, // Align column content to the left
                    verticalArrangement = Arrangement.Center
                ) {
                    val words = text.split(" ")
                    val textMeasurer = rememberTextMeasurer()
                    val style = MaterialTheme.typography.displayLarge.copy(
                        textAlign = TextAlign.Start, // Align text to the left
                        color = WarningRed.copy(alpha = 0.85f)
                    )
                    val screenWidthPx = with(LocalDensity.current) {
                        (LocalResources.current.displayMetrics.widthPixels - 64.dp.toPx())
                    }

                    var currentLineWords = mutableListOf<String>()
                    words.forEach { word ->
                        val testLine = (currentLineWords + word).joinToString(" ")
                        val textLayoutResult = textMeasurer.measure(
                            text = AnnotatedString(testLine),
                            style = style.copy(fontSize = 100.sp)
                        )

                        if (textLayoutResult.size.width > screenWidthPx && currentLineWords.isNotEmpty()) {
                            KineticLine(
                                text = currentLineWords.joinToString(" "),
                                style = style,
                                screenWidthPx = screenWidthPx
                            )
                            currentLineWords = mutableListOf(word)
                        } else {
                            currentLineWords.add(word)
                        }
                    }
                    if (currentLineWords.isNotEmpty()) {
                        KineticLine(
                            text = currentLineWords.joinToString(" "),
                            style = style,
                            screenWidthPx = screenWidthPx
                        )
                    }
                }
            }
        }
    }
}

@Composable
private fun KineticLine(text: String, style: TextStyle, screenWidthPx: Float) {
    var readyToDraw by remember { mutableStateOf(false) }
    var dynamicFontSize by remember { mutableStateOf(100.sp) }

    Text(
        text = text,
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 2.dp),
        style = style.copy(fontSize = dynamicFontSize),
        maxLines = 1,
        onTextLayout = { result: TextLayoutResult ->
            if (result.hasVisualOverflow && !readyToDraw) {
                val scaleFactor = screenWidthPx / result.size.width
                dynamicFontSize = (dynamicFontSize.value * scaleFactor * 0.95f).sp
            } else {
                readyToDraw = true
            }
        }
    )
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/composables/MenuDrawer.kt ---

package com.hereliesaz.cuedetat.ui.composables

import androidx.compose.foundation.clickable
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.outlined.Brush
import androidx.compose.material.icons.outlined.BrightnessMedium
import androidx.compose.material.icons.outlined.LightMode
import androidx.compose.material.icons.outlined.MonetizationOn
import androidx.compose.material.icons.outlined.Nightlight
import androidx.compose.material.icons.outlined.School
import androidx.compose.material.icons.outlined.SystemUpdate
import androidx.compose.material.icons.outlined.ViewInAr
import androidx.compose.material3.DividerDefaults
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.ModalDrawerSheet
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.res.vectorResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.hereliesaz.cuedetat.R
import com.hereliesaz.cuedetat.ui.MainScreenEvent
import com.hereliesaz.cuedetat.view.state.OverlayState

@Composable
fun MenuDrawerContent(
    uiState: OverlayState,
    onEvent: (MainScreenEvent) -> Unit,
    onCloseDrawer: () -> Unit
) {
    ModalDrawerSheet(
        drawerContainerColor = MaterialTheme.colorScheme.surfaceVariant
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 24.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = stringResource(id = R.string.app_name),
                color = MaterialTheme.colorScheme.primary,
                style = MaterialTheme.typography.displaySmall,
                textAlign = TextAlign.Center
            )
        }
        HorizontalDivider(
            thickness = DividerDefaults.Thickness,
            color = MaterialTheme.colorScheme.outline
        )
        Spacer(modifier = Modifier.height(8.dp))

        // --- Help & Tutorial ---
        MenuItem(
            icon = ImageVector.vectorResource(R.drawable.ic_help_outline_24),
            text = stringResource(if (uiState.areHelpersVisible) R.string.hide_helpers else R.string.show_helpers),
            onClick = { onEvent(MainScreenEvent.ToggleHelp); onCloseDrawer() }
        )
        MenuItem(
            icon = Icons.Outlined.School,
            text = "Show Tutorial",
            onClick = { onEvent(MainScreenEvent.StartTutorial); onCloseDrawer() }
        )
        HorizontalDivider(
            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
            color = MaterialTheme.colorScheme.outline
        )

        // --- View Controls ---
        MenuItem(
            icon = ImageVector.vectorResource(R.drawable.ic_undo_24),
            text = "Reset View",
            onClick = { onEvent(MainScreenEvent.Reset); onCloseDrawer() }
        )
        if (!uiState.isBankingMode) {
            MenuItem(
                icon = ImageVector.vectorResource(R.drawable.ic_jump_shot),
                text = "Toggle Aiming Ball",
                onClick = { onEvent(MainScreenEvent.ToggleActualCueBall); onCloseDrawer() }
            )
        }
        val bankingModeToggleText =
            if (uiState.isBankingMode) "Visualize Ghost Ball" else "Calculate Bank"
        MenuItem(
            icon = Icons.Outlined.ViewInAr,
            text = bankingModeToggleText,
            onClick = { onEvent(MainScreenEvent.ToggleBankingMode); onCloseDrawer() }
        )
        HorizontalDivider(
            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
            color = MaterialTheme.colorScheme.outline
        )

        // --- Theme and Appearance (for Drawn Elements) ---
        val systemIsCurrentlyDark = isSystemInDarkTheme()
        val (themeToggleText, themeToggleIcon) = when (uiState.isForceLightMode) { // Corrected: isForceLightMode now accessible
            true -> "Embrace the Dark" to Icons.Outlined.Nightlight
            false -> "Use System Theme" to Icons.Outlined.BrightnessMedium
            else -> if (systemIsCurrentlyDark) "Let there be Light" to Icons.Outlined.LightMode else "Embrace the Dark" to Icons.Outlined.Nightlight
        }
        MenuItem(
            icon = themeToggleIcon,
            text = themeToggleText,
            onClick = { onEvent(MainScreenEvent.ToggleForceTheme); onCloseDrawer() }
        )
        MenuItem(
            icon = Icons.Outlined.BrightnessMedium,
            text = "Luminance",
            onClick = { onEvent(MainScreenEvent.ToggleLuminanceDialog); onCloseDrawer() }
        )
        HorizontalDivider(
            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
            color = MaterialTheme.colorScheme.outline
        )

        // --- Meta Section ---
        MenuItem(
            icon = Icons.Outlined.Brush,
            text = "About Me",
            onClick = { onEvent(MainScreenEvent.ViewArt); onCloseDrawer() })
        MenuItem(
            icon = Icons.Outlined.MonetizationOn,
            text = "Chalk Your Tip",
            onClick = { onEvent(MainScreenEvent.ShowDonationOptions); onCloseDrawer() })
        MenuItem(
            icon = Icons.Outlined.SystemUpdate,
            text = "Check for Updates",
            onClick = { onEvent(MainScreenEvent.CheckForUpdate); onCloseDrawer() })
        Spacer(modifier = Modifier.height(12.dp))
    }
}

@Composable
private fun MenuItem(icon: ImageVector, text: String, onClick: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clickable(onClick = onClick)
            .padding(horizontal = 24.dp, vertical = 16.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            imageVector = icon, contentDescription = text, modifier = Modifier.size(24.dp),
            tint = MaterialTheme.colorScheme.onSurfaceVariant
        )
        Spacer(modifier = Modifier.width(16.dp))
        Text(
            text = text,
            style = MaterialTheme.typography.bodyLarge,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/composables/TopControls.kt ---

package com.hereliesaz.cuedetat.ui.composables

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.statusBarsPadding
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.hereliesaz.cuedetat.R
import com.hereliesaz.cuedetat.ui.theme.AccentGold
import com.hereliesaz.cuedetat.view.state.OverlayState

@Composable
fun TopControls(
    uiState: OverlayState,
    onMenuClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier
            .fillMaxWidth()
            .statusBarsPadding()
            .padding(start = 16.dp, end = 16.dp, top = 16.dp),
        horizontalArrangement = Arrangement.Start,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Box(
            modifier = Modifier
                .size(width = 200.dp, height = 64.dp)
                .clickable(onClick = onMenuClick),
            contentAlignment = Alignment.CenterStart
        ) {
            if (uiState.areHelpersVisible) {
                Text(
                    text = stringResource(id = R.string.app_name),
                    style = MaterialTheme.typography.titleLarge.copy(fontSize = 28.sp),
                    color = AccentGold,
                    textAlign = TextAlign.Start
                )
            } else {
                Image(
                    painter = painterResource(id = R.drawable.ic_launcher),
                    contentDescription = "Menu",
                    modifier = Modifier
                        .size(64.dp)
                        .clip(CircleShape)
                )
            }
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/composables/ZoomControls.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/ui/composables/ZoomControls.kt
package com.hereliesaz.cuedetat.ui.composables

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight // Keep this
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
// import androidx.compose.foundation.layout.width // Not strictly needed for the Column here if VerticalSlider defines its own width
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.SliderDefaults
import androidx.compose.material3.Text
// Remove: import androidx.compose.material3.VerticalSlider
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.hereliesaz.cuedetat.R
import com.hereliesaz.cuedetat.ui.MainScreenEvent
import com.hereliesaz.cuedetat.ui.VerticalSlider // <-- IMPORT THE CUSTOM ONE
import com.hereliesaz.cuedetat.view.state.OverlayState
// We need Color for the SliderDefaults if we were using it for ticks, but M3 SliderDefaults handles it.
// import androidx.compose.ui.graphics.Color // Not needed if SliderDefaults handles everything

@Composable
fun ZoomControls(
    uiState: OverlayState,
    onEvent: (MainScreenEvent) -> Unit,
    modifier: Modifier = Modifier // This modifier is applied to the Column
) {
    Column(
        modifier = modifier // The parent in MainScreen.kt gives this Column its height and alignment
            .padding(vertical = 16.dp), // Add some vertical padding for the icon and text
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        if (uiState.areHelpersVisible) {
            Text(
                text = "Zoom",
                style = MaterialTheme.typography.bodyLarge,
                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
            )
        } else {
            Icon(
                painter = painterResource(id = R.drawable.ic_zoom_in_24),
                contentDescription = stringResource(id = R.string.zoom_icon),
                tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),
                modifier = Modifier.size(36.dp)
            )
        }

        Spacer(modifier = Modifier.height(16.dp)) // Consistent spacer

        VerticalSlider( // Using the custom VerticalSlider
            value = uiState.zoomSliderPosition,
            onValueChange = { onEvent(MainScreenEvent.ZoomSliderChanged(it)) },
            valueRange = 0f..100f,
            modifier = Modifier
                .weight(1f) // Slider will take available vertical space in the Column
                .fillMaxHeight(), // Ensure it tries to fill the weighted space.
            colors = SliderDefaults.colors(
                activeTrackColor = MaterialTheme.colorScheme.primary,
                inactiveTrackColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.2f),
                thumbColor = MaterialTheme.colorScheme.primary
            )
        )
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/MainScreen.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/ui/MainScreen.kt
package com.hereliesaz.cuedetat.ui

import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.navigationBarsPadding
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Lock
import androidx.compose.material.icons.filled.LockOpen
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.DrawerValue
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.ModalNavigationDrawer
import androidx.compose.material3.Slider
import androidx.compose.material3.SliderDefaults
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.rememberDrawerState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.compose.ui.zIndex
import com.hereliesaz.cuedetat.ui.composables.ArCoreScene
import com.hereliesaz.cuedetat.ui.composables.CameraBackground
import com.hereliesaz.cuedetat.ui.composables.KineticWarningOverlay
import com.hereliesaz.cuedetat.ui.composables.MenuDrawerContent
import com.hereliesaz.cuedetat.ui.composables.ResetFab
import com.hereliesaz.cuedetat.ui.composables.ToggleCueBallFab
import com.hereliesaz.cuedetat.ui.composables.TopControls
import com.hereliesaz.cuedetat.ui.composables.ZoomControls
import com.hereliesaz.cuedetat.view.ProtractorOverlayView
import com.hereliesaz.cuedetat.view.state.OverlayState
import com.hereliesaz.cuedetat.view.state.ToastMessage
import kotlinx.coroutines.launch

@Composable
fun TableRotationSlider(
    uiState: OverlayState,
    onEvent: (MainScreenEvent) -> Unit,
    modifier: Modifier = Modifier
) {
    if (uiState.isBankingMode) {
        val sliderColors = SliderDefaults.colors(
            activeTrackColor = MaterialTheme.colorScheme.primary,
            inactiveTrackColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.2f),
            thumbColor = Color.Yellow
        )
        Column(
            modifier = modifier
                .fillMaxWidth()
                .navigationBarsPadding(),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                "Table Rotation: ${uiState.tableRotationDegrees.toInt()}°",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurface
            )
            Slider(
                value = uiState.tableRotationDegrees,
                onValueChange = { onEvent(MainScreenEvent.TableRotationChanged(it)) },
                valueRange = 0f..359f,
                steps = 358,
                modifier = Modifier.fillMaxWidth(),
                colors = sliderColors
            )
        }
    }
}

@Composable
fun LuminanceAdjustmentDialog(
    uiState: OverlayState,
    onEvent: (MainScreenEvent) -> Unit,
    onDismiss: () -> Unit
) {
    if (uiState.showLuminanceDialog) {
        AlertDialog(
            onDismissRequest = onDismiss,
            title = { Text("Adjust Drawn Elements Luminance", color = MaterialTheme.colorScheme.onSurfaceVariant) },
            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f),
            text = {
                Column {
                    Text("Current: ${"%.2f".format(uiState.luminanceAdjustment)}", color = MaterialTheme.colorScheme.onSurfaceVariant)
                    Slider(
                        value = uiState.luminanceAdjustment,
                        onValueChange = { onEvent(MainScreenEvent.AdjustLuminance(it)) },
                        valueRange = -0.4f..0.4f,
                        steps = 79,
                        colors = SliderDefaults.colors(
                            activeTrackColor = MaterialTheme.colorScheme.primary,
                            inactiveTrackColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.2f),
                            thumbColor = MaterialTheme.colorScheme.primary
                        )
                    )
                }
            },
            confirmButton = { TextButton(onClick = onDismiss) { Text("Done", color = MaterialTheme.colorScheme.primary) } }
        )
    }
}

@Composable
fun TutorialOverlay(
    uiState: OverlayState,
    tutorialMessages: List<String>,
    onEvent: (MainScreenEvent) -> Unit
) {
    if (uiState.showTutorialOverlay && uiState.currentTutorialStep < tutorialMessages.size) {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(MaterialTheme.colorScheme.scrim.copy(alpha = 0.5f))
                .clickable(onClick = { /* Consume clicks */ })
                .zIndex(5f),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier
                    .fillMaxWidth(0.85f)
                    .background(MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f), MaterialTheme.shapes.medium)
                    .padding(24.dp)
            ) {
                Text(
                    text = tutorialMessages[uiState.currentTutorialStep],
                    color = MaterialTheme.colorScheme.onSurfaceVariant,
                    style = MaterialTheme.typography.headlineSmall,
                    textAlign = TextAlign.Center
                )
                Spacer(modifier = Modifier.height(32.dp))
                Row {
                    if (uiState.currentTutorialStep > 0) {
                        // TODO: Implement PreviousTutorialStep if desired
                    }
                    Spacer(modifier = Modifier.weight(1f))

                    TextButton(onClick = {
                        if (uiState.currentTutorialStep < tutorialMessages.size - 1) {
                            onEvent(MainScreenEvent.NextTutorialStep)
                        } else {
                            onEvent(MainScreenEvent.EndTutorial)
                        }
                    }) {
                        Text(
                            if (uiState.currentTutorialStep < tutorialMessages.size - 1) "Next" else "Got it!",
                            color = MaterialTheme.colorScheme.primary,
                            style = MaterialTheme.typography.labelLarge
                        )
                    }
                }
            }
        }
    }
}


@Composable
fun LockFab(
    uiState: OverlayState,
    onEvent: (MainScreenEvent) -> Unit,
    modifier: Modifier = Modifier
) {
    FloatingActionButton(
        onClick = { onEvent(MainScreenEvent.ToggleSpatialLock(isLocked = !uiState.isSpatiallyLocked)) },
        modifier = modifier.navigationBarsPadding(),
        containerColor = if (uiState.isSpatiallyLocked) MaterialTheme.colorScheme.tertiaryContainer else MaterialTheme.colorScheme.secondaryContainer,
        contentColor = if (uiState.isSpatiallyLocked) MaterialTheme.colorScheme.onTertiaryContainer else MaterialTheme.colorScheme.onSecondaryContainer
    ) {
        Row(modifier = Modifier.padding(horizontal = 16.dp), verticalAlignment = Alignment.CenterVertically) {
            Icon(
                imageVector = if (uiState.isSpatiallyLocked) Icons.Filled.Lock else Icons.Filled.LockOpen,
                contentDescription = if (uiState.isSpatiallyLocked) "Unlock Spatial Position" else "Lock Spatial Position"
            )
            if (uiState.areHelpersVisible) {
                Spacer(modifier = Modifier.width(8.dp))
                Text(if (uiState.isSpatiallyLocked) "Locked" else "Lock")
            }
        }
    }
}


@Composable
fun MainScreen(viewModel: MainViewModel) {
    val uiState by viewModel.uiState.collectAsState()
    val toastMessage by viewModel.toastMessage.collectAsState()
    val context = LocalContext.current
    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)
    val scope = rememberCoroutineScope()

    val protractorView = remember { ProtractorOverlayView(context) }
    val systemIsDark = isSystemInDarkTheme()

    val appControlColorScheme = MaterialTheme.colorScheme
    LaunchedEffect(appControlColorScheme) {
        viewModel.onEvent(MainScreenEvent.ThemeChanged(appControlColorScheme))
    }

    LaunchedEffect(toastMessage) {
        toastMessage?.let {
            val messageText = when (it) {
                is ToastMessage.StringResource -> context.getString(it.id, *it.formatArgs.toTypedArray())
                is ToastMessage.PlainText -> it.text
            }
            Toast.makeText(context, messageText, Toast.LENGTH_SHORT).show()
            viewModel.onEvent(MainScreenEvent.ToastShown)
        }
    }

    ModalNavigationDrawer(
        drawerState = drawerState,
        gesturesEnabled = drawerState.isOpen,
        drawerContent = {
            MenuDrawerContent(
                uiState = uiState,
                onEvent = viewModel::onEvent,
                onCloseDrawer = { scope.launch { drawerState.close() } }
            )
        }
    ) {
        Box(modifier = Modifier.fillMaxSize()) {
            if (uiState.isSpatiallyLocked) {
                uiState.arSession?.let { session ->
                    ArCoreScene(
                        modifier = Modifier.fillMaxSize().zIndex(0f),
                        arSession = session,
                        uiState = uiState
                    )
                } ?: run {
                    Box(
                        modifier = Modifier.fillMaxSize().background(Color.Black.copy(alpha = 0.7f)),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "Initializing ARCore...",
                            color = Color.White,
                            style = MaterialTheme.typography.headlineMedium,
                            textAlign = TextAlign.Center
                        )
                    }
                }
            } else {
                CameraBackground(modifier = Modifier.fillMaxSize().zIndex(0f))

                AndroidView(
                    factory = {
                        protractorView.apply {
                            onSizeChanged = { w, h -> viewModel.onEvent(MainScreenEvent.SizeChanged(w, h)) }
                            onProtractorRotationChange = { rot -> viewModel.onEvent(MainScreenEvent.RotationChanged(rot)) }
                            onProtractorUnitMoved = { pos -> viewModel.onEvent(MainScreenEvent.UnitMoved(pos)) }
                            onActualCueBallScreenMoved = { pos -> viewModel.onEvent(MainScreenEvent.ActualCueBallMoved(pos)) }
                            onScale = { scaleFactor -> viewModel.onEvent(MainScreenEvent.ZoomScaleChanged(scaleFactor)) }
                            onGestureStarted = { viewModel.onEvent(MainScreenEvent.GestureStarted) }
                            onGestureEnded = { viewModel.onEvent(MainScreenEvent.GestureEnded) }
                            onBankingAimTargetScreenDrag = { screenPoint -> viewModel.onEvent(MainScreenEvent.BankingAimTargetDragged(screenPoint)) }
                        }
                    },
                    modifier = Modifier.fillMaxSize().zIndex(1f),
                    update = { view -> view.updateState(uiState, systemIsDark) }
                )
            }


            TopControls(
                uiState = uiState,
                onMenuClick = { scope.launch { drawerState.open() } },
                modifier = Modifier.zIndex(2f)
            )
            ZoomControls(
                uiState = uiState,
                onEvent = viewModel::onEvent,
                modifier = Modifier
                    .align(Alignment.CenterEnd)
                    .fillMaxHeight(0.4f)
                    .padding(end = 8.dp)
                    .zIndex(5f)
            )

            Column(
                modifier = Modifier
                    .align(Alignment.BottomCenter)
                    .fillMaxWidth()
                    .padding(bottom = 16.dp)
                    .navigationBarsPadding()
                    .zIndex(2f),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                TableRotationSlider(
                    uiState = uiState,
                    onEvent = viewModel::onEvent,
                    modifier = Modifier
                        .fillMaxWidth(0.8f)
                        .padding(bottom = if (uiState.isBankingMode) 8.dp else 0.dp)
                )

                LockFab(
                    uiState = uiState,
                    onEvent = viewModel::onEvent
                )
            }

            Row(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 16.dp, vertical = 16.dp)
                    .navigationBarsPadding()
                    .zIndex(2f),
                verticalAlignment = Alignment.Bottom
            ) {
                if (!uiState.isBankingMode) {
                    ToggleCueBallFab(
                        uiState = uiState,
                        onEvent = { viewModel.onEvent(MainScreenEvent.ToggleActualCueBall) }
                    )
                }
                Spacer(modifier = Modifier.weight(1f))
                ResetFab(
                    uiState = uiState,
                    onEvent = viewModel::onEvent
                )
            }

            KineticWarningOverlay(text = uiState.warningText, modifier = Modifier.zIndex(3f))
            LuminanceAdjustmentDialog(
                uiState = uiState,
                onEvent = viewModel::onEvent,
                onDismiss = { viewModel.onEvent(MainScreenEvent.ToggleLuminanceDialog) })

            val tutorialMessages = remember {
                listOf(
                    "Welcome to Cue D'état!\nTap 'Next' to learn the basics.",
                    "PROTRACTOR MODE:\nDrag the Target Ball (center circle) to aim for cut shots.",
                    "Rotate the Protractor: Single finger drag left/right (not on a ball).",
                    "Zoom View: Pinch to zoom in or out.",
                    "Optional Aiming Ball: Toggle with bottom-left FAB to visualize shots from a specific spot.",
                    "BANKING MODE:\nSelect 'Calculate Bank' from menu. Table appears.",
                    "Drag the Cue Ball on table. Drag elsewhere on screen to set your aim line for bank shots.",
                    "Table Rotation: Use bottom slider. Zoom: Use side slider.",
                    "LOCK BUTTON (Bottom Center):\nTap 'Lock' to fix elements in real space. Move your phone; they should stay put relative to the table. Tap 'Unlock' to adjust again.",
                    "Menu: Explore for theme options (for drawn lines), luminance, and this tutorial!"
                )
            }
            TutorialOverlay(
                uiState = uiState,
                tutorialMessages = tutorialMessages,
                onEvent = viewModel::onEvent
            )
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/MainScreenEvent.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/ui/MainScreenEvent.kt
package com.hereliesaz.cuedetat.ui

import android.graphics.PointF
import androidx.compose.material3.ColorScheme
import com.hereliesaz.cuedetat.data.FullOrientation
import com.hereliesaz.cuedetat.view.state.ToastMessage

sealed class MainScreenEvent {
    data class SizeChanged(val width: Int, val height: Int) : MainScreenEvent()
    data class ZoomSliderChanged(val position: Float) : MainScreenEvent()
    data class ZoomScaleChanged(val scaleFactor: Float) : MainScreenEvent()

    // Protractor System Events
    data class RotationChanged(val newRotation: Float) : MainScreenEvent()
    data class UnitMoved(val position: PointF) : MainScreenEvent() // This is screen point

    // ActualCueBall / BankingBall Events
    data class ActualCueBallMoved(val position: PointF) : MainScreenEvent() // This is screen point

    // Banking System Events
    data class TableRotationChanged(val degrees: Float) : MainScreenEvent()
    data class BankingAimTargetDragged(val screenPoint: PointF) : MainScreenEvent() // This is screen point, ViewModel will convert to logical

    internal data class UpdateLogicalActualCueBallPosition(val logicalPoint: PointF) : MainScreenEvent()
    internal data class UpdateLogicalUnitPosition(val logicalPoint: PointF) : MainScreenEvent()
    internal data class UpdateLogicalBankingAimTarget(val logicalPoint: PointF) : MainScreenEvent()

    data class FullOrientationChanged(val orientation: FullOrientation) : MainScreenEvent()

    data class ThemeChanged(val scheme: ColorScheme) : MainScreenEvent()

    object ToggleForceTheme : MainScreenEvent()
    object ToggleLuminanceDialog : MainScreenEvent()
    data class AdjustLuminance(val adjustment: Float) : MainScreenEvent()

    data class ShowToast(val message: ToastMessage) : MainScreenEvent()

    object StartTutorial : MainScreenEvent()
    object NextTutorialStep : MainScreenEvent()
    object EndTutorial : MainScreenEvent()

    object Reset : MainScreenEvent()
    object ToggleHelp : MainScreenEvent()
    object ToggleActualCueBall : MainScreenEvent()
    object ToggleBankingMode : MainScreenEvent()

    data class ToggleSpatialLock(val isLocked: Boolean) : MainScreenEvent()

    object CheckForUpdate : MainScreenEvent()
    object ViewArt : MainScreenEvent()
    object FeatureComingSoon : MainScreenEvent()
    object ShowDonationOptions : MainScreenEvent()
    object SingleEventConsumed : MainScreenEvent()
    object ToastShown : MainScreenEvent()
    object GestureStarted : MainScreenEvent()
    object GestureEnded : MainScreenEvent()
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/MainViewModel.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/ui/MainViewModel.kt
package com.hereliesaz.cuedetat.ui

import android.content.Context
import android.graphics.Camera
import android.graphics.PointF
import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.ar.core.Session
import com.hereliesaz.cuedetat.data.FullOrientation
import com.hereliesaz.cuedetat.data.SensorRepository
import com.hereliesaz.cuedetat.domain.UpdateStateUseCase
import com.hereliesaz.cuedetat.domain.WarningManager
import com.hereliesaz.cuedetat.view.model.ActualCueBall
import com.hereliesaz.cuedetat.view.model.ProtractorUnit
import com.hereliesaz.cuedetat.view.model.Perspective
import com.hereliesaz.cuedetat.view.state.OverlayState
import com.hereliesaz.cuedetat.view.state.ToastMessage
import dagger.hilt.android.lifecycle.HiltViewModel
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class MainViewModel @Inject constructor(
    private val sensorRepository: SensorRepository,
    private val updateStateUseCase: UpdateStateUseCase,
    private val warningManager: WarningManager,
    @ApplicationContext private val applicationContext: Context
) : ViewModel() {

    private val _uiState = MutableStateFlow(OverlayState())
    val uiState: StateFlow<OverlayState> = _uiState.asStateFlow()

    private val _toastMessage = MutableStateFlow<ToastMessage?>(null)
    val toastMessage: StateFlow<ToastMessage?> = _toastMessage.asStateFlow()

    private val graphicsCamera = Camera()

    init {
        viewModelScope.launch {
            sensorRepository.fullOrientationFlow.collect { fullOrientation ->
                if (!uiState.value.isSpatiallyLocked) {
                    _uiState.update { currentState ->
                        currentState.copy(
                            pitchAngle = fullOrientation.pitch,
                            yawAngle = fullOrientation.yaw,
                            rollAngle = fullOrientation.roll,
                            currentOrientation = fullOrientation
                        )
                    }
                    _uiState.update { currentState ->
                        updateStateUseCase.invoke(currentState, graphicsCamera)
                    }
                }
            }
        }
    }

    fun onEvent(event: MainScreenEvent) {
        _uiState.update { currentState ->
            val newState = when (event) {
                is MainScreenEvent.SizeChanged -> currentState.copy(viewWidth = event.width, viewHeight = event.height)
                is MainScreenEvent.ZoomSliderChanged -> currentState.copy(zoomSliderPosition = event.position)
                is MainScreenEvent.ZoomScaleChanged -> currentState
                is MainScreenEvent.RotationChanged -> currentState.copy(protractorUnit = currentState.protractorUnit.copy(rotationDegrees = event.newRotation))
                is MainScreenEvent.UnitMoved -> currentState.copy(protractorUnit = currentState.protractorUnit.copy(screenCenter = event.position))
                is MainScreenEvent.ActualCueBallMoved -> currentState.copy(actualCueBall = currentState.actualCueBall?.copy(screenCenter = event.position) ?: ActualCueBall(screenCenter = event.position, radius = currentState.protractorUnit.radius / 2f, logicalPosition = PointF(0f,0f)))
                is MainScreenEvent.TableRotationChanged -> currentState.copy(tableRotationDegrees = event.degrees)
                is MainScreenEvent.BankingAimTargetDragged -> {
                    val logicalAimPoint = Perspective.screenToLogical(event.screenPoint, currentState.inversePitchMatrix)
                    currentState.copy(bankingAimTarget = logicalAimPoint)
                }
                is MainScreenEvent.UpdateLogicalActualCueBallPosition -> currentState.copy(actualCueBall = currentState.actualCueBall?.copy(logicalPosition = event.logicalPoint) ?: ActualCueBall(logicalPosition = event.logicalPoint, radius = currentState.protractorUnit.radius / 2f, screenCenter = PointF(0f,0f)))
                is MainScreenEvent.UpdateLogicalUnitPosition -> currentState.copy(protractorUnit = currentState.protractorUnit.copy(logicalPosition = event.logicalPoint))
                is MainScreenEvent.UpdateLogicalBankingAimTarget -> currentState.copy(bankingAimTarget = event.logicalPoint)
                is MainScreenEvent.FullOrientationChanged -> currentState.copy(
                    pitchAngle = event.orientation.pitch,
                    yawAngle = event.orientation.yaw,
                    rollAngle = event.orientation.roll,
                    currentOrientation = event.orientation
                )
                is MainScreenEvent.ThemeChanged -> currentState.copy(currentThemeColor = event.scheme.primary, appControlColorScheme = event.scheme)
                MainScreenEvent.ToggleForceTheme -> currentState.copy(isForceLightMode = when (currentState.isForceLightMode) { true -> false; false -> null; null -> true })
                MainScreenEvent.ToggleLuminanceDialog -> currentState.copy(showLuminanceDialog = !currentState.showLuminanceDialog)
                is MainScreenEvent.AdjustLuminance -> currentState.copy(luminanceAdjustment = event.adjustment)
                is MainScreenEvent.ShowToast -> { _toastMessage.value = event.message; currentState }
                MainScreenEvent.StartTutorial -> currentState.copy(
                    showTutorialOverlay = true, currentTutorialStep = 0,
                    areHelpersVisible = false, showLuminanceDialog = false, isMoreHelpVisible = false,
                    isSpatiallyLocked = false, anchorOrientation = null
                )
                MainScreenEvent.NextTutorialStep -> currentState.copy(currentTutorialStep = currentState.currentTutorialStep + 1)
                MainScreenEvent.EndTutorial -> currentState.copy(showTutorialOverlay = false)
                MainScreenEvent.Reset -> currentState.copy(
                    protractorUnit = ProtractorUnit(screenCenter = PointF(0f,0f), radius = 100f, rotationDegrees = 0f, logicalPosition = PointF(0f,0f)),
                    actualCueBall = null,
                    tableRotationDegrees = 0f,
                    bankingAimTarget = null,
                    isBankingMode = false,
                    isSpatiallyLocked = false,
                    zoomSliderPosition = 0.5f,
                    valuesChangedSinceReset = false,
                    currentOrientation = FullOrientation(0f, 0f, 0f),
                    anchorOrientation = null,
                    pitchMatrix = android.graphics.Matrix(),
                    railPitchMatrix = android.graphics.Matrix(),
                    isMoreHelpVisible = false,
                    appControlColorScheme = null
                )
                MainScreenEvent.ToggleHelp -> currentState.copy(areHelpersVisible = !currentState.areHelpersVisible)
                MainScreenEvent.ToggleActualCueBall -> currentState.copy(actualCueBall = if (currentState.actualCueBall == null) ActualCueBall(screenCenter = PointF(currentState.viewWidth / 2f + 100, currentState.viewHeight / 2f + 100), radius = currentState.protractorUnit.radius / 2f, logicalPosition = PointF(0f,0f)) else null)
                MainScreenEvent.ToggleBankingMode -> currentState.copy(isBankingMode = !currentState.isBankingMode, showProtractor = !currentState.isBankingMode, showTable = !currentState.isBankingMode)
                is MainScreenEvent.ToggleSpatialLock -> {
                    if (event.isLocked) {
                        currentState.copy(
                            isSpatiallyLocked = true,
                            anchorOrientation = currentState.currentOrientation
                        )
                    } else {
                        currentState.copy(
                            isSpatiallyLocked = false,
                            anchorOrientation = null
                        )
                    }
                }
                MainScreenEvent.CheckForUpdate -> currentState
                MainScreenEvent.ViewArt -> currentState
                MainScreenEvent.FeatureComingSoon -> currentState
                MainScreenEvent.ShowDonationOptions -> currentState
                MainScreenEvent.SingleEventConsumed -> currentState
                MainScreenEvent.ToastShown -> { _toastMessage.value = null; currentState }
                MainScreenEvent.GestureStarted -> currentState
                MainScreenEvent.GestureEnded -> currentState
            }
            if (!newState.isSpatiallyLocked) {
                updateStateUseCase.invoke(newState, graphicsCamera)
            } else {
                newState
            }
        }.also { newState ->
        }
        val currentWarning = warningManager.checkWarnings(uiState.value)
        if (currentWarning != uiState.value.warningText) {
            _uiState.update { it.copy(warningText = currentWarning) }
        }
    }

    fun onArSessionCreated(session: Session) {
        _uiState.update { it.copy(arSession = session) }
        Log.d("MainViewModel", "AR Session provided to ViewModel.")
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/MenuAction.kt ---

package com.hereliesaz.cuedetat.ui

/**
 * A sealed class to represent all possible user actions originating from UI menus or buttons.
 * This provides a clean, type-safe way to pass events from the UI to the ViewModel.
 */
sealed class MenuAction {
    object Reset : MenuAction()
    object ToggleHelp : MenuAction()
    object ToggleJumpingBall : MenuAction()
    object CheckForUpdate : MenuAction()
    object ToggleTheme : MenuAction()
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/theme/Color.kt ---

package com.hereliesaz.cuedetat.ui.theme

import androidx.compose.ui.graphics.Color

val AccentGold = Color(0xFFBDA559)
val DarkerAccentGold = Color(0xFF968141)
val MutedMaroon = Color(0xFF7E344D) // Adjusted for more brightness
val MutedGray = Color(0xFFA9A9A9)
val WarningRed = Color(0xFFC05D5D)


val AcidPatina = Color(0xFF8EA96E)       // Muted strange green
val RustedEmber = Color(0xFFA85632)      // Burnt rust, toned down
val OilSlick = Color(0xFF555E5C)         // Gritty gray-green
val OxidizedBrass = Color(0xFFB98E5A)    // Warm, muted highlight
val VioletResidue = Color(0xFF8374A9)    // Muted violet gray
val ScorchedUmber = Color(0xFF4A2E1C)    // Deep, rich, almost-black
val ColdAsh = Color(0xFFA6A6A6)          // High-vis light gray


val TargetAcid = Color(0xFFA4FF00)      // Neon toxic green
val TacticalRust = Color(0xFFC1440E)    // Aggressive orange-red
val ConcreteVein = Color(0xFF7D7D7D)    // Mid-gray, utility
val MoltenBrass = Color(0xFFD9821B)     // Warm, edgy accent
val GuerillaViolet = Color(0xFF6E44FF)  // Striking contrast color
val AshlineFog = Color(0xFFBFBFBF)      // High-vis neutral
val RebelYellow = Color(0xFFFFD000)  // Primary yellow
val BurntBrass = Color(0xFF8A5A00)   // Dirty metallic accent
val SmokeyGrunge = Color(0xFF3B3B3B) // Deep, gritty gray (but not black)


val TargetGold = Color(0xFFFFB700)   // Vibrant highlight gold
val MellowYellow = Color(0xFFD4AF37)    // Muted gold
val AgedAmber = Color(0xFFC69026)       // Secondary accent
val SmokedOchre = Color(0xFF9B6A17)     // Button-friendly highlight
val RogueUmber = Color(0xFF5C2E00)      // Dark background substitute
val SteelAsh = Color(0xFF4A4A4A)        // Surface gray
val GunmetalFog = Color(0xFF6A6A6A)     // Light neutral gray
val FaintGoldmist = Color(0xFFF0DFAF)   // Subtle text glow

val StaticClay = Color(0xFFCEBCA8)       // Neutral base
val DeadChannel = Color(0xFF817F8D)      // Digital noise purple-gray
val SmokeSignal = Color(0xFF5A5D63)      // Mid gray with cold nerve
val CharredOlive = Color(0xFF484C3E)     // Military murk green
val PyrrhicRust = Color(0xFF9C4E2C)      // Bloodied rust
val AshWasp = Color(0xFFADA44F)          // Acid ghost
val LowFidelityBlue = Color(0xFF5C6E83)  // Desaturated steel blue

val IcedOpal = Color(0xFFD5E4E2)         // Pale blue-gray
val SoftInterference = Color(0xFFB6A4D6) // Powdered lavender
val StaticMint = Color(0xFF9DDDC8)       // Desaturated mint
val CorrodedSky = Color(0xFF8A99B2)      // Faded blue
val HalogenDusk = Color(0xFFD3B18A)      // Pale copper light
val FeverSlate = Color(0xFF6B7079)       // Cool slate anchor
val TarnishedMauve = Color(0xFFA08C98)   // Soft mauve-gray


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/theme/Shape.kt ---

package com.hereliesaz.cuedetat.ui.theme

import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Shapes
import androidx.compose.ui.unit.dp

val Shapes = Shapes(
    // A subtle, almost imperceptible rounding. Like the edges of a well-worn tombstone.
    extraSmall = RoundedCornerShape(2.dp),
    small = RoundedCornerShape(4.dp),
    medium = RoundedCornerShape(8.dp),
    large = RoundedCornerShape(12.dp),
    extraLarge = RoundedCornerShape(16.dp)
)



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/theme/Theme.kt ---

package com.hereliesaz.cuedetat.ui.theme

import android.app.Activity
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalView
import androidx.core.graphics.ColorUtils // For HSL manipulation, ensure this dependency is in build.gradle
import androidx.core.view.WindowCompat

// Define your base light and dark color schemes for the APP UI (menus, sliders, etc.)
// These will NOT be affected by the luminance slider or the light/dark toggle for drawn elements.

// Helper function to adjust luminance of a color (used by PaintCache, but good to have accessible)
fun Color.adjustLuminanceHelper(factor: Float): Color {
    if (factor == 0f || this == Color.Transparent) return this
    val hsl = FloatArray(3)
    try {
        ColorUtils.colorToHSL(this.toArgb(), hsl)
        hsl[2] = (hsl[2] + factor).coerceIn(0f, 1f) // Adjust L component (luminance)
        return Color(ColorUtils.HSLToColor(hsl))
    } catch (e: IllegalArgumentException) {
        // Happens if color is transparent or can't be converted
        return this // Return original if conversion fails
    }
}


val AppControlDarkColorScheme = darkColorScheme(
    primary = AccentGold,
    secondary = AcidPatina,
    tertiary = MutedGray,
    background = Color(0xFF121212),
    surface = Color(0xFF1E1E1E), // For cards, dialogs
    surfaceVariant = Color(0xFF2C2C2E), // For drawer background, etc.
    onPrimary = Color.Black,
    onSecondary = Color.Black, // Assuming AcidPatina is light enough
    onTertiary = Color.White,  // MutedGray is mid, White text
    onBackground = Color(0xFFE0E0E0),
    onSurface = Color(0xFFE0E0E0),
    onSurfaceVariant = Color(0xFFCFCFCF),
    outline = MutedGray.copy(alpha = 0.5f),
    primaryContainer = DarkerAccentGold.copy(alpha = 0.8f),
    onPrimaryContainer = Color.White,
    secondaryContainer = AcidPatina.copy(alpha = 0.3f),
    onSecondaryContainer = Color.White, // Ensure good contrast
    tertiaryContainer = MutedGray.copy(alpha = 0.3f),
    onTertiaryContainer = Color.White, // Ensure good contrast
    error = WarningRed,
    onError = Color.White,
    errorContainer = WarningRed.copy(alpha = 0.2f),
    onErrorContainer = Color.White,
    scrim = Color.Black.copy(alpha = 0.7f) // Darker scrim for better dialog/drawer separation
)

val AppControlLightColorScheme = lightColorScheme(
    primary = DarkerAccentGold,
    secondary = RustedEmber,
    tertiary = OilSlick,
    background = Color(0xFFFDFCFD),
    surface = Color(0xFFFFFFFF),
    surfaceVariant = Color(0xFFECECEC), // Slightly darker light variant for drawer
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1A1A1A),
    onSurface = Color(0xFF1A1A1A),
    onSurfaceVariant = Color(0xFF3A3A3A), // Darker text on light surface variant
    outline = MutedGray.copy(alpha = 0.7f),
    primaryContainer = AccentGold.copy(alpha = 0.9f),
    onPrimaryContainer = Color.Black,
    secondaryContainer = RustedEmber.copy(alpha = 0.2f),
    onSecondaryContainer = Color.Black,
    tertiaryContainer = OilSlick.copy(alpha = 0.2f),
    onTertiaryContainer = Color.Black,
    error = WarningRed,
    onError = Color.White,
    errorContainer = WarningRed.copy(alpha = 0.15f),
    onErrorContainer = Color.Black,
    scrim = Color.Black.copy(alpha = 0.4f) // Lighter scrim for light theme
)

@Composable
fun CueDetatTheme(
    // App's UI controls will use system settings by default for dark/light mode
    useSystemSettings: Boolean = true,
    darkThemeUserOverride: Boolean? = null, // Allows direct override for testing or future app setting
    content: @Composable () -> Unit
) {
    val systemIsCurrentlyDark = isSystemInDarkTheme()

    val useDarkUIColorScheme =
        darkThemeUserOverride ?: (if (useSystemSettings) systemIsCurrentlyDark else true)
    // Default to dark if not using system and no override

    val colorSchemeForUIControls = if (useDarkUIColorScheme) {
        AppControlDarkColorScheme
    } else {
        AppControlLightColorScheme
    }

    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            window.statusBarColor = Color.Transparent.toArgb()
            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars =
                !useDarkUIColorScheme
        }
    }

    MaterialTheme(
        colorScheme = colorSchemeForUIControls,
        typography = Typography, // Assumes Typography is defined in Type.kt
        shapes = Shapes,       // Assumes Shapes is defined in Shape.kt
        content = content
    )
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/theme/Type.kt ---

package com.hereliesaz.cuedetat.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp
import com.hereliesaz.cuedetat.R

val Barbaro = FontFamily(
    Font(R.font.barbaro, FontWeight.Normal)
)

// Set of Material typography styles to start with
val Typography = Typography(
    displayLarge = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 64.sp,
    ),
    displayMedium = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 52.sp,
    ),
    displaySmall = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 44.sp,
    ),
    headlineLarge = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 36.sp,
    ),
    headlineMedium = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 32.sp,
    ),
    headlineSmall = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 28.sp,
    ),
    titleLarge = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 32.sp,
        lineHeight = 36.sp,
        letterSpacing = 0.sp
    ),
    titleMedium = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 26.sp,
    ),
    titleSmall = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp
    ),
    bodyLarge = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 24.sp,
        lineHeight = 30.sp,
        letterSpacing = 0.5.sp
    ),
    bodyMedium = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 20.sp,
    ),
    bodySmall = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 18.sp,
    ),
    labelLarge = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 20.sp,
    ),
    labelMedium = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 18.sp,
    ),
    labelSmall = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 22.sp,
        letterSpacing = 0.5.sp
    )
)



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/VerticalSlider.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/ui/VerticalSlider.kt
package com.hereliesaz.cuedetat.ui

import android.util.Log // Added for debugging
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.width
import androidx.compose.material3.SliderColors
import androidx.compose.material3.SliderDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.unit.dp

@Composable
fun VerticalSlider(
    value: Float,
    onValueChange: (Float) -> Unit,
    modifier: Modifier = Modifier,
    valueRange: ClosedFloatingPointRange<Float> = 0f..1f,
    colors: SliderColors = SliderDefaults.colors()
) {
    BoxWithConstraints(
        modifier = modifier
            .width(48.dp)
            .fillMaxHeight()
            .pointerInput(Unit) {
                detectDragGestures(
                    onDragStart = { offset -> Log.d("VerticalSlider", "onDragStart at $offset. Current value: $value") },
                    onDragEnd = { Log.d("VerticalSlider", "onDragEnd. Final value: $value") },
                    onDragCancel = { Log.d("VerticalSlider", "onDragCancel") }
                ) { change, dragAmount ->
                    val height = size.height.toFloat()
                    val range = valueRange.endInclusive - valueRange.start

                    Log.d("VerticalSlider", "Drag: change.pos.y=${change.position.y}, height=$height, dragAmount.y=${dragAmount.y}")

                    if (range <= 0 || height <= 0) {
                        Log.d("VerticalSlider", "Invalid range or height. Range: $range, Height: $height")
                        return@detectDragGestures
                    }

                    // Calculate rawValue based on the y-position of the touch within the slider's bounds
                    // Top of slider (y=0) should correspond to valueRange.endInclusive
                    // Bottom of slider (y=height) should correspond to valueRange.start
                    val rawValue = valueRange.start + ((height - change.position.y) / height) * range
                    val coercedValue = rawValue.coerceIn(valueRange)

                    Log.d("VerticalSlider", "Calculated: rawValue=$rawValue, coercedValue=$coercedValue")

                    if (value != coercedValue) { // Only call if value changed to prevent excess recompositions
                        onValueChange(coercedValue)
                    }
                    change.consume()
                }
            }
    ) {
        val trackWidthPx = with(LocalDensity.current) { 6.dp.toPx() }
        val thumbRadiusPx = with(LocalDensity.current) { 12.dp.toPx() }
        val currentHeight = constraints.maxHeight.toFloat() // Use constraints.maxHeight for drawing consistency

        val valueRangeTotal = valueRange.endInclusive - valueRange.start
        val normalizedValue = if (valueRangeTotal > 0) {
            (value - valueRange.start) / valueRangeTotal
        } else {
            0f // Default to start if range is invalid
        }
        // Thumb Y: 0 is top, currentHeight is bottom.
        // If value is max (normalizedValue = 1), thumbY should be 0.
        // If value is min (normalizedValue = 0), thumbY should be currentHeight.
        val thumbY = currentHeight * (1 - normalizedValue) // Simplified: (currentHeight - (normalizedValue * currentHeight))


        // Log drawing parameters
        // Avoid excessive logging in draw phase, but useful for one-time check if needed
        // Log.d("VerticalSliderDraw", "value=$value, normalizedValue=$normalizedValue, thumbY=$thumbY, currentHeight=$currentHeight")


        Canvas(modifier = Modifier.matchParentSize()) {
            val centerX = size.width / 2f

            // Ensure drawing respects the actual height obtained by the canvas
            val canvasActualHeight = size.height

            drawLine(
                color = colors.inactiveTrackColor.copy(alpha = 0.5f), // Ensure inactive is distinguishable
                start = Offset(centerX, 0f),
                end = Offset(centerX, canvasActualHeight),
                strokeWidth = trackWidthPx,
                cap = StrokeCap.Round
            )

            // Active track from bottom up to thumbY
            // thumbY calculation: if value = max, norm = 1, thumbY = 0 (top)
            // if value = min, norm = 0, thumbY = height (bottom)
            // So active track is from canvasActualHeight (bottom) to thumbY
            drawLine(
                color = colors.activeTrackColor,
                start = Offset(centerX, canvasActualHeight), // Start from bottom
                end = Offset(centerX, thumbY.coerceIn(0f, canvasActualHeight)), // End at thumb, clamped
                strokeWidth = trackWidthPx,
                cap = StrokeCap.Round
            )

            drawCircle(
                color = colors.thumbColor,
                radius = thumbRadiusPx,
                center = Offset(centerX, thumbY.coerceIn(0f, canvasActualHeight)) // Clamp thumb position
            )
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/ZoomMapping.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/ui/ZoomMapping.kt
package com.hereliesaz.cuedetat.ui

import kotlin.math.ln
import kotlin.math.pow

internal object ZoomMapping {
    // --- Master Zoom Controls ---
    const val MIN_ZOOM = 0.084f // Changed from 0.05f to limit max zoom-out
    const val DEFAULT_ZOOM = 0.4f
    const val MAX_ZOOM = 0.6f
    // ----------------------------

    // This constant determines the curve of the exponential zoom.
    // It is calculated to map the slider's 0-100 range precisely to the MIN_ZOOM-MAX_ZOOM range.
    // Formula: B = (MAX_ZOOM / MIN_ZOOM) ^ (1 / 100)
    private val B = (MAX_ZOOM / MIN_ZOOM).pow(0.01f)

    /**
     * Converts a slider position (0f-100f) to an exponential zoom factor.
     */
    fun sliderToZoom(sliderValue: Float): Float = MIN_ZOOM * B.pow(sliderValue)

    /**
     * Converts a zoom factor back to its corresponding slider position (0f-100f).
     */
    fun zoomToSlider(zoomFactor: Float): Float {
        if (zoomFactor <= MIN_ZOOM) return 0f
        if (zoomFactor >= MAX_ZOOM) return 100f
        // Formula: sliderValue = log(zoomFactor / MIN_ZOOM) / log(B)
        return (ln(zoomFactor / MIN_ZOOM) / ln(B))
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/model/ActualCueBall.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/view/model/ActualCueBall.kt
package com.hereliesaz.cuedetat.view.model

import android.graphics.PointF

/**
 * Represents the actual cue ball's state.
 * It holds both screen-space and logical (table-space) coordinates.
 */
data class ActualCueBall(
    val screenCenter: PointF, // Screen coordinates of the ball's center
    override val radius: Float, // Radius of the ball in logical units (pixels based on zoom)
    override val logicalPosition: PointF // Logical (table-space) coordinates of the ball's center
) : ILogicalBall


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/model/ILogicalBall.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/view/model/ILogicalBall.kt
package com.hereliesaz.cuedetat.view.model

import android.graphics.PointF

/**
 * Interface for objects that represent a ball in the logical (table) space.
 * 'logicalPosition' here refers to the center of the ball in the logical coordinate system.
 */
interface ILogicalBall {
    val logicalPosition: PointF // The logical (table-space) center of the ball
    val radius: Float // The radius of the ball in logical units
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/model/LogicalPlane.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/view/model/LogicalPlane.kt
package com.hereliesaz.cuedetat.view.model

import android.graphics.PointF

// This file is now empty or contains only non-redundant code.
// The ILogicalBall interface definition has been moved to its own file.


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/model/Perspective.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/view/model/Perspective.kt
package com.hereliesaz.cuedetat.view.model

import android.graphics.Camera
import android.graphics.Matrix
import android.graphics.PointF
import com.hereliesaz.cuedetat.data.FullOrientation
import android.util.Log

object Perspective {

    fun createPitchMatrix(
        currentOrientation: FullOrientation,
        anchorOrientation: FullOrientation?,
        isSpatiallyLocked: Boolean,
        viewWidth: Int,
        viewHeight: Int,
        camera: Camera,
        lift: Float = 0f
    ): Matrix {
        val classTag = "Perspective"
        Log.d(classTag, "CALLED - Locked=$isSpatiallyLocked, " +
                "Cur(P:${currentOrientation.pitch.f1()},R:${currentOrientation.roll.f1()},Y:${currentOrientation.yaw.f1()}), " +
                "Anc(P:${anchorOrientation?.pitch?.f1()},R:${anchorOrientation?.roll?.f1()},Y:${anchorOrientation?.yaw?.f1()})")

        val matrix = Matrix()
        camera.save()
        camera.setLocation(0f, 0f, -32f) // Reset position each time

        if (lift != 0f) {
            camera.translate(0f, lift, 0f)
        }

        val finalPitchForCamera: Float
        val finalRollForCamera: Float
        // For finalYawForCamera, we need to be careful. Android's yaw is often 0 at North.
        // If anchorYaw is -170 and currentYaw is +170 (crossed North), delta is 340, 2*anchor - current is very wrong.
        // We need to handle yaw wraparound.
        var finalYawForCamera: Float

        if (isSpatiallyLocked && anchorOrientation != null) {
            // LOCKED MODE: Stabilize the view based on anchor.
            // FinalCameraAngle = AnchorAngle - (CurrentAngle - AnchorAngle)
            // FinalCameraAngle = 2 * AnchorAngle - CurrentAngle

            finalPitchForCamera = 2 * anchorOrientation.pitch - currentOrientation.pitch
            finalRollForCamera = 2 * anchorOrientation.roll - currentOrientation.roll

            // Handle Yaw wraparound (e.g., from -179 to +179 is a small change, not 358 degrees)
            var deltaYaw = currentOrientation.yaw - anchorOrientation.yaw
            if (deltaYaw > 180) {
                deltaYaw -= 360
            } else if (deltaYaw < -180) {
                deltaYaw += 360
            }
            finalYawForCamera = anchorOrientation.yaw - deltaYaw // Equivalent to 2*anchor - current after wraparound adjustment

            Log.d(classTag, "LOCKED: Anchor(P:${anchorOrientation.pitch.f1()},R:${anchorOrientation.roll.f1()},Y:${anchorOrientation.yaw.f1()})")
            Log.d(classTag, "LOCKED: Current(P:${currentOrientation.pitch.f1()},R:${currentOrientation.roll.f1()},Y:${currentOrientation.yaw.f1()})")
            Log.d(classTag, "LOCKED: DeltaYaw(raw):${(currentOrientation.yaw - anchorOrientation.yaw).f1()}, DeltaYaw(wrapped):${deltaYaw.f1()}")
            Log.d(classTag, "LOCKED: FinalCamAngles(P:${finalPitchForCamera.f1()},R:${finalRollForCamera.f1()},Y:${finalYawForCamera.f1()})")

        } else {
            // UNLOCKED MODE: View is primarily affected by pitch. Roll and Yaw are ignored for the main plane.
            finalPitchForCamera = currentOrientation.pitch
            finalRollForCamera = 0f
            finalYawForCamera = 0f // No yaw effect from phone in unlocked mode on the plane
        }

        // Apply rotations to the camera.
        // Order Z, X, Y (Roll, Pitch, Yaw applied to camera's local axes)
        camera.rotateZ(finalRollForCamera)
        camera.rotateX(finalPitchForCamera)
        camera.rotateY(-finalYawForCamera) // Sign of Yaw application is critical.
        // If finalYawForCamera is world-space yaw scene should have,
        // -finalYawForCamera for camera.rotateY might be correct.

        camera.getMatrix(matrix)
        camera.restore()

        val pivotX = viewWidth / 2f
        val pivotY = viewHeight / 2f
        matrix.preTranslate(-pivotX, -pivotY)
        matrix.postTranslate(pivotX, pivotY)

        return matrix
    }

    fun screenToLogical(screenPoint: PointF, inverseMatrix: Matrix): PointF {
        val logicalCoords = floatArrayOf(screenPoint.x, screenPoint.y)
        inverseMatrix.mapPoints(logicalCoords)
        return PointF(logicalCoords[0], logicalCoords[1])
    }
}

// Helper for logging
private fun Float?.f1(): String = this?.let { "%.1f".format(it) } ?: "n"
private fun Float.f1(): String = "%.1f".format(this)


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/model/ProtractorUnit.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/view/model/ProtractorUnit.kt
package com.hereliesaz.cuedetat.view.model

import android.graphics.PointF

/**
 * Represents the protractor unit, including its center (target ball), radius, and rotation.
 * It holds both screen-space and logical (table-space) coordinates for its center.
 * It also defines the position of the ghost cue ball relative to its logical center.
 */
data class ProtractorUnit(
    val screenCenter: PointF = PointF(0f, 0f), // Screen coordinates of the protractor's center (Target Ball)
    override val radius: Float = 100f, // Radius of the protractor (Target Ball) in logical units
    val rotationDegrees: Float = 0f, // Rotation of the protractor
    override val logicalPosition: PointF = PointF(0f, 0f) // Logical (table-space) coordinates of the protractor's center
) : ILogicalBall {
    // The ghost cue ball's logical position is always a fixed distance along the logical Y-axis
    // from the protractor's logical center in its unrotated local space.
    val protractorCueBallLogicalCenter: PointF
        get() = PointF(logicalPosition.x, logicalPosition.y + 2 * radius)
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/PaintCache.kt ---

package com.hereliesaz.cuedetat.view

import android.graphics.Color as AndroidColor
import android.graphics.DashPathEffect
import android.graphics.Paint
import android.graphics.Typeface
import androidx.compose.material3.ColorScheme // For M3 ColorScheme instances
import androidx.compose.material3.darkColorScheme // For creating M3 darkColorScheme
import androidx.compose.material3.lightColorScheme // For creating M3 lightColorScheme
import androidx.compose.ui.graphics.Color // For Compose color manipulation
import androidx.compose.ui.graphics.toArgb
import androidx.core.graphics.ColorUtils
import com.hereliesaz.cuedetat.ui.theme.* // Import all your theme colors
import com.hereliesaz.cuedetat.view.state.OverlayState

class PaintCache {
    private val GLOW_RADIUS_DEFAULT = 12f
    private val GLOW_ALPHA = 0.5f

    private val baseStrokeWidthMultiplier = 1.2f
    private val ballOutlineStrokeWidth = 6f * baseStrokeWidthMultiplier
    private val lineStrokeWidth = 5f * baseStrokeWidthMultiplier
    private val thickLineStrokeWidth = 6f * baseStrokeWidthMultiplier
    private val thinLineStrokeWidth = 3f * baseStrokeWidthMultiplier

    // Define base M3 ColorSchemes for drawing elements.
    // These will be used as the source for colors, then luminance adjusted.
    private val DrawingDarkColorScheme: ColorScheme = darkColorScheme(
        primary = AccentGold,
        secondary = AcidPatina,
        tertiary = MutedGray,
        outline = MutedGray.copy(alpha = 0.5f),
        surface = Color(0xFF1E1E1E), // Used for text shadow base
        onSurface = Color(0xFFE0E0E0), // Used for general text, lines
        primaryContainer = DarkerAccentGold, // Used for default shot line
        // Add other M3 slots if directly referenced below and not via primary/secondary/etc.
        background = Color(0xFF121212) // For text shadow base too
    )
    private val DrawingLightColorScheme: ColorScheme = lightColorScheme(
        primary = DarkerAccentGold,
        secondary = RustedEmber,
        tertiary = OilSlick,
        outline = MutedGray.copy(alpha = 0.7f),
        surface = Color(0xFFFFFFFF),
        onSurface = Color(0xFF1A1A1A),
        primaryContainer = AccentGold,
        background = Color(0xFFFDFCFD)
    )

    private fun Color.adjustLuminance(factor: Float): Color {
        if (factor == 0f || this == Color.Transparent) return this
        val hsl = FloatArray(3)
        try {
            ColorUtils.colorToHSL(this.toArgb(), hsl)
            hsl[2] = (hsl[2] + factor).coerceIn(0f, 1f)
            return Color(ColorUtils.HSLToColor(hsl))
        } catch (e: IllegalArgumentException) {
            return this
        }
    }

    // Paint objects
    val tableOutlinePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = thickLineStrokeWidth
    }
    val targetCirclePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = ballOutlineStrokeWidth
    }
    val cueCirclePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = ballOutlineStrokeWidth
    }
    val targetCenterMarkPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { style = Paint.Style.FILL }
    val cueCenterMarkPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { style = Paint.Style.FILL }
    val protractorLinePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { strokeWidth = lineStrokeWidth }
    val aimingLinePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { strokeWidth = thickLineStrokeWidth }
    val ghostCueOutlinePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = ballOutlineStrokeWidth
    }
    val targetGhostBallOutlinePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = ballOutlineStrokeWidth
    }
    val actualCueBallGhostPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = ballOutlineStrokeWidth
    }
    val actualCueBallBasePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = thinLineStrokeWidth
    }
    val actualCueBallCenterMarkPaint =
        Paint(Paint.ANTI_ALIAS_FLAG).apply { style = Paint.Style.FILL }
    val shotLinePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = thickLineStrokeWidth
    }
    val aimingSightPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        strokeWidth = lineStrokeWidth; style = Paint.Style.STROKE
    }
    val tangentLineDottedPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = thinLineStrokeWidth; pathEffect =
        DashPathEffect(floatArrayOf(15f, 10f), 0f)
    }
    val tangentLineSolidPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = lineStrokeWidth
    }

    val bankShotLinePaint1 = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = thickLineStrokeWidth
    }
    val bankShotLinePaint2 = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = thickLineStrokeWidth
    }
    val bankShotLinePaint3 = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = thickLineStrokeWidth
    }

    val cueBallTextPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { textAlign = Paint.Align.CENTER }
    val targetBallTextPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { textAlign = Paint.Align.CENTER }
    val actualCueBallTextPaint =
        Paint(Paint.ANTI_ALIAS_FLAG).apply { textAlign = Paint.Align.CENTER }
    val ghostBallTextPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { textAlign = Paint.Align.CENTER }
    val lineTextPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { textAlign = Paint.Align.CENTER }

    val warningPaintRed1 = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = thickLineStrokeWidth
    }
    val warningPaintRed2 = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = ballOutlineStrokeWidth
    }
    val warningPaintRed3 = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE; strokeWidth = thickLineStrokeWidth
    }

    fun setTypeface(typeface: Typeface?) {
        cueBallTextPaint.typeface = typeface
        targetBallTextPaint.typeface = typeface
        ghostBallTextPaint.typeface = typeface
        lineTextPaint.typeface = typeface
        actualCueBallTextPaint.typeface = typeface
    }

    private fun Paint.applyGlow(
        color: Color,
        alpha: Float = GLOW_ALPHA,
        radius: Float = GLOW_RADIUS_DEFAULT
    ) {
        if (this.style == Paint.Style.STROKE || this.style == Paint.Style.FILL_AND_STROKE) {
            this.setShadowLayer(radius, 0f, 0f, color.copy(alpha = alpha).toArgb())
        }
    }

    private fun Paint.applyGlow(colorArgb: Int, radius: Float = GLOW_RADIUS_DEFAULT) {
        if (this.style == Paint.Style.STROKE || this.style == Paint.Style.FILL_AND_STROKE) {
            this.setShadowLayer(radius, 0f, 0f, colorArgb)
        }
    }

    fun updateColors(uiState: OverlayState, systemIsDark: Boolean) {
        val LUMINANCE_ADJUST = uiState.luminanceAdjustment
        val baseDrawingScheme = when (uiState.isForceLightMode) {
            true -> DrawingLightColorScheme
            false -> DrawingDarkColorScheme
            null -> if (systemIsDark) DrawingDarkColorScheme else DrawingLightColorScheme
        }

        // Use properties from the M3 ColorScheme (baseDrawingScheme)
        val currentGlowColorCompose =
            baseDrawingScheme.primary.adjustLuminance(LUMINANCE_ADJUST * 0.5f)
        val currentGlowColorArgb = currentGlowColorCompose.copy(alpha = GLOW_ALPHA).toArgb()
        val currentTextShadowColorArgb =
            baseDrawingScheme.background.adjustLuminance(LUMINANCE_ADJUST).copy(alpha = 0.7f)
                .toArgb()


        tableOutlinePaint.apply {
            color = TargetAcid.adjustLuminance(LUMINANCE_ADJUST)
                .toArgb() // TargetAcid is a specific brand color
            applyGlow(TargetAcid.adjustLuminance(LUMINANCE_ADJUST))
        }

        targetCirclePaint.color =
            baseDrawingScheme.primary.adjustLuminance(LUMINANCE_ADJUST).toArgb()
        targetCirclePaint.applyGlow(baseDrawingScheme.primary.adjustLuminance(LUMINANCE_ADJUST))
        cueCirclePaint.color = baseDrawingScheme.tertiary.adjustLuminance(LUMINANCE_ADJUST).toArgb()
        cueCirclePaint.applyGlow(baseDrawingScheme.tertiary.adjustLuminance(LUMINANCE_ADJUST))

        targetCenterMarkPaint.color =
            baseDrawingScheme.onPrimaryContainer.adjustLuminance(LUMINANCE_ADJUST).toArgb()
        cueCenterMarkPaint.color =
            baseDrawingScheme.onTertiaryContainer // Assuming onTertiaryContainer exists or use onTertiary
                .let { it ?: baseDrawingScheme.onTertiary }.adjustLuminance(LUMINANCE_ADJUST)
                .toArgb()


        actualCueBallGhostPaint.color =
            baseDrawingScheme.secondary.adjustLuminance(LUMINANCE_ADJUST).toArgb()
        actualCueBallGhostPaint.applyGlow(
            baseDrawingScheme.secondary.adjustLuminance(
                LUMINANCE_ADJUST
            )
        )
        actualCueBallBasePaint.color =
            baseDrawingScheme.secondary.adjustLuminance(LUMINANCE_ADJUST).copy(alpha = 0.5f)
                .toArgb()
        actualCueBallBasePaint.applyGlow(
            baseDrawingScheme.secondary.adjustLuminance(
                LUMINANCE_ADJUST
            ), alpha = 0.3f
        )
        actualCueBallCenterMarkPaint.color =
            baseDrawingScheme.onSecondaryContainer // Assuming onSecondaryContainer exists
                .let { it ?: baseDrawingScheme.onSecondary }.adjustLuminance(LUMINANCE_ADJUST)
                .toArgb()


        ghostCueOutlinePaint.color =
            baseDrawingScheme.tertiary.adjustLuminance(LUMINANCE_ADJUST).copy(alpha = 0.7f).toArgb()
        ghostCueOutlinePaint.applyGlow(
            baseDrawingScheme.tertiary.adjustLuminance(LUMINANCE_ADJUST),
            alpha = 0.4f
        )
        targetGhostBallOutlinePaint.color =
            baseDrawingScheme.primary.adjustLuminance(LUMINANCE_ADJUST).copy(alpha = 0.7f).toArgb()
        targetGhostBallOutlinePaint.applyGlow(
            baseDrawingScheme.primary.adjustLuminance(
                LUMINANCE_ADJUST
            ), alpha = 0.4f
        )

        protractorLinePaint.color =
            baseDrawingScheme.onSurface.adjustLuminance(LUMINANCE_ADJUST).copy(alpha = 0.4f)
                .toArgb()
        protractorLinePaint.applyGlow(
            baseDrawingScheme.onSurface.adjustLuminance(LUMINANCE_ADJUST),
            alpha = 0.2f
        )

        aimingLinePaint.apply {
            color = baseDrawingScheme.primary.adjustLuminance(LUMINANCE_ADJUST).toArgb()
            applyGlow(currentGlowColorArgb) // Use the pre-calculated ARGB glow
        }

        val bankYellowBase = RebelYellow // Defined in your Color.kt
        bankShotLinePaint1.color = bankYellowBase.adjustLuminance(LUMINANCE_ADJUST + 0.1f).toArgb()
        bankShotLinePaint1.applyGlow(bankYellowBase.adjustLuminance(LUMINANCE_ADJUST + 0.1f))
        bankShotLinePaint2.color = bankYellowBase.adjustLuminance(LUMINANCE_ADJUST).toArgb()
        bankShotLinePaint2.applyGlow(bankYellowBase.adjustLuminance(LUMINANCE_ADJUST))
        bankShotLinePaint3.color = bankYellowBase.adjustLuminance(LUMINANCE_ADJUST - 0.1f).toArgb()
        bankShotLinePaint3.applyGlow(bankYellowBase.adjustLuminance(LUMINANCE_ADJUST - 0.1f))

        val defaultShotLineColorCompose =
            baseDrawingScheme.primaryContainer.adjustLuminance(LUMINANCE_ADJUST)
        shotLinePaint.apply {
            val warningColor1Argb = AndroidColor.parseColor("#C05D5D")
            val warningColor3BaseArgb = AndroidColor.parseColor("#80E57373")

            if (this.color != warningColor1Argb && this.color != warningColor3BaseArgb) {
                color = defaultShotLineColorCompose.toArgb()
            }
            if (this.color == defaultShotLineColorCompose.toArgb()) {
                applyGlow(
                    baseDrawingScheme.primary.adjustLuminance(LUMINANCE_ADJUST).copy(alpha = 0.5f)
                        .toArgb()
                )
            } else {
                if (this.color != warningColor3BaseArgb) clearShadowLayer()
            }
        }

        aimingSightPaint.apply {
            color = baseDrawingScheme.primary.adjustLuminance(LUMINANCE_ADJUST).toArgb()
            applyGlow(currentGlowColorArgb)
        }

        tangentLineDottedPaint.color =
            baseDrawingScheme.outline.adjustLuminance(LUMINANCE_ADJUST).copy(alpha = 0.7f).toArgb()
        tangentLineDottedPaint.applyGlow(
            baseDrawingScheme.outline.adjustLuminance(LUMINANCE_ADJUST),
            alpha = 0.3f
        )
        tangentLineSolidPaint.apply {
            color = baseDrawingScheme.secondary.adjustLuminance(LUMINANCE_ADJUST).toArgb()
            applyGlow(baseDrawingScheme.secondary.adjustLuminance(LUMINANCE_ADJUST))
        }

        val baseOnSurfaceForText = baseDrawingScheme.onSurface
        cueBallTextPaint.apply {
            color = baseOnSurfaceForText.adjustLuminance(LUMINANCE_ADJUST).toArgb(); setShadowLayer(
            2f,
            1f,
            1f,
            currentTextShadowColorArgb
        )
        }
        targetBallTextPaint.apply {
            color = baseOnSurfaceForText.adjustLuminance(LUMINANCE_ADJUST).toArgb(); setShadowLayer(
            2f,
            1f,
            1f,
            currentTextShadowColorArgb
        )
        }
        actualCueBallTextPaint.apply {
            color = baseOnSurfaceForText.adjustLuminance(LUMINANCE_ADJUST).toArgb(); setShadowLayer(
            2f,
            1f,
            1f,
            currentTextShadowColorArgb
        )
        }
        ghostBallTextPaint.apply {
            color = baseOnSurfaceForText.adjustLuminance(LUMINANCE_ADJUST).toArgb(); setShadowLayer(
            2f,
            1f,
            1f,
            currentTextShadowColorArgb
        )
        }
        lineTextPaint.apply {
            color = baseOnSurfaceForText.adjustLuminance(LUMINANCE_ADJUST).copy(alpha = 0.8f)
                .toArgb(); setShadowLayer(1f, 1f, 1f, currentTextShadowColorArgb)
        }

        warningPaintRed1.color = AndroidColor.parseColor("#C05D5D")
        warningPaintRed1.applyGlow(
            WarningRed.toArgb(),
            radius = 5f
        ) // WarningRed is a Compose Color
        warningPaintRed2.color = AndroidColor.parseColor("#A04C4C")
        warningPaintRed2.applyGlow(WarningRed.copy(alpha = 0.8f).toArgb(), radius = 5f)
        warningPaintRed3.color = AndroidColor.parseColor("#80E57373")
        warningPaintRed3.setShadowLayer(
            GLOW_RADIUS_DEFAULT,
            0f,
            0f,
            AndroidColor.parseColor("#FF5252")
        )
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt
package com.hereliesaz.cuedetat.view

import android.annotation.SuppressLint
import android.content.Context
import android.graphics.Canvas
import android.graphics.PointF
import android.graphics.Typeface
import android.util.Log
import android.view.MotionEvent
import android.view.ScaleGestureDetector
import android.view.View
import android.view.ViewConfiguration
import androidx.core.content.res.ResourcesCompat
import com.hereliesaz.cuedetat.R
import com.hereliesaz.cuedetat.view.renderer.OverlayRenderer
import com.hereliesaz.cuedetat.view.renderer.util.DrawingUtils
import com.hereliesaz.cuedetat.view.state.OverlayState
import kotlin.math.abs

@SuppressLint("ClickableViewAccessibility")
class ProtractorOverlayView(context: Context) : View(context) {

    private enum class InteractionMode {
        NONE, SCALING, ROTATING_PROTRACTOR, MOVING_PROTRACTOR_UNIT, MOVING_ACTUAL_CUE_BALL, AIMING_BANK_SHOT
    }

    private val paints = PaintCache()
    private val renderer = OverlayRenderer()
    private var canonicalState = OverlayState()
    private var barbaroTypeface: Typeface? = null

    var onSizeChanged: ((Int, Int) -> Unit)? = null
    var onProtractorRotationChange: ((Float) -> Unit)? = null
    var onProtractorUnitMoved: ((PointF) -> Unit)? = null
    var onActualCueBallScreenMoved: ((PointF) -> Unit)? = null
    var onScale: ((Float) -> Unit)? = null
    var onGestureStarted: (() -> Unit)? = null
    var onGestureEnded: (() -> Unit)? = null
    var onBankingAimTargetScreenDrag: ((PointF) -> Unit)? = null

    private val scaleGestureDetector: ScaleGestureDetector
    private var lastTouchX_single = 0f
    private var lastTouchY_single = 0f
    private val touchSlop = ViewConfiguration.get(context).scaledTouchSlop.toFloat()
    private val draggableElementSlop = touchSlop * 7.0f

    private var activePointerId = MotionEvent.INVALID_POINTER_ID
    private var interactionMode = InteractionMode.NONE
    private var gestureInProgress = false

    init {
        if (!isInEditMode) {
            barbaroTypeface = ResourcesCompat.getFont(context, R.font.barbaro)
            paints.setTypeface(barbaroTypeface)
        }
        val scaleListener = object : ScaleGestureDetector.SimpleOnScaleGestureListener() {
            override fun onScaleBegin(detector: ScaleGestureDetector): Boolean {
                // Spatial lock does NOT prevent scaling.
                interactionMode = InteractionMode.SCALING
                if (!gestureInProgress) {
                    onGestureStarted?.invoke()
                    gestureInProgress = true
                }
                Log.d("ProtractorOverlayView", "onScaleBegin: SCALING mode activated")
                return true // Always handle scale if detected
            }

            override fun onScale(detector: ScaleGestureDetector): Boolean {
                if (interactionMode == InteractionMode.SCALING) {
                    onScale?.invoke(detector.scaleFactor)
                    return true
                }
                return false
            }

            override fun onScaleEnd(detector: ScaleGestureDetector) {
                super.onScaleEnd(detector)
            }
        }
        scaleGestureDetector = ScaleGestureDetector(context, scaleListener)
    }

    override fun onDraw(canvas: Canvas) {
        super.onDraw(canvas)
        renderer.draw(canvas, canonicalState, paints, barbaroTypeface)
    }

    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {
        super.onSizeChanged(w, h, oldw, oldh)
        onSizeChanged?.invoke(w, h)
    }

    @SuppressLint("ClickableViewAccessibility")
    override fun onTouchEvent(event: MotionEvent): Boolean {
        // Pass to ScaleGestureDetector first. It will update its state.
        val scaleEventHandledByDetector = scaleGestureDetector.onTouchEvent(event)

        // If spatially locked and not a scaling gesture, consume most other touches.
        // Scaling IS allowed when locked.
        if (canonicalState.isSpatiallyLocked && !scaleGestureDetector.isInProgress) {
            val currentAction = event.actionMasked
            if (currentAction == MotionEvent.ACTION_DOWN) {
                if (!gestureInProgress) { onGestureStarted?.invoke(); gestureInProgress = true }
                // Set activePointerId for potential gesture end, even if locked
                activePointerId = event.getPointerId(0)
                lastTouchX_single = event.getX(0)
                lastTouchY_single = event.getY(0)
                interactionMode = InteractionMode.NONE // No specific interaction if locked
            } else if (currentAction == MotionEvent.ACTION_UP || currentAction == MotionEvent.ACTION_CANCEL) {
                if (gestureInProgress) { onGestureEnded?.invoke(); gestureInProgress = false }
                interactionMode = InteractionMode.NONE
                activePointerId = MotionEvent.INVALID_POINTER_ID
            }
            return true // Consume to prevent further processing for non-scaling touches when locked
        }

        val action = event.actionMasked
        val pointerIndex = event.actionIndex

        // If ScaleGestureDetector is in progress (scaling), it primarily handles the event.
        // However, we still need to manage ACTION_UP/CANCEL or POINTER_UP to reset our state.
        if (scaleGestureDetector.isInProgress || (interactionMode == InteractionMode.SCALING && action == MotionEvent.ACTION_MOVE)) {
            if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL ||
                (action == MotionEvent.ACTION_POINTER_UP && event.pointerCount <= 2)) {
                // Fall through to handle these specific end/transition events for scaling
            } else {
                return true // ScaleGestureDetector is actively scaling or was the primary handler
            }
        }

        when (action) {
            MotionEvent.ACTION_DOWN -> {
                if (!gestureInProgress) {
                    onGestureStarted?.invoke(); gestureInProgress = true
                }
                // Set primary pointer for potential single touch drag
                activePointerId = event.getPointerId(0)
                lastTouchX_single = event.getX(0)
                lastTouchY_single = event.getY(0)

                // Only determine single touch mode if not already in scaling
                // (which shouldn't happen here due to the gate above, but good for safety)
                if (interactionMode != InteractionMode.SCALING) {
                    determineSingleTouchMode(lastTouchX_single, lastTouchY_single)
                }
                Log.d("ProtractorOverlayView", "ACTION_DOWN: Mode=$interactionMode, activePointerId=$activePointerId, spatiallyLocked=${canonicalState.isSpatiallyLocked}")
            }
            MotionEvent.ACTION_MOVE -> {
                // This handles single pointer moves if not locked and not scaling.
                if (event.pointerCount == 1 && activePointerId != MotionEvent.INVALID_POINTER_ID) {
                    val currentEventPointerIndex = event.findPointerIndex(activePointerId)
                    if (currentEventPointerIndex == -1) return true // Stale active pointer ID

                    val currentX = event.getX(currentEventPointerIndex)
                    val currentY = event.getY(currentEventPointerIndex)
                    val dx = currentX - lastTouchX_single

                    // If mode is NONE, attempt to determine mode based on movement surpassing slop
                    if (interactionMode == InteractionMode.NONE && (abs(dx) > touchSlop || abs(currentY - lastTouchY_single) > touchSlop)) {
                        determineSingleTouchMode(lastTouchX_single, lastTouchY_single)
                        Log.d("ProtractorOverlayView", "ACTION_MOVE: Re-determined Mode=$interactionMode due to slop")
                    }

                    when (interactionMode) {
                        InteractionMode.ROTATING_PROTRACTOR -> {
                            if (abs(dx) > touchSlop/2) {
                                onProtractorRotationChange?.invoke(canonicalState.protractorUnit.rotationDegrees - (dx * 0.3f))
                                lastTouchX_single = currentX
                            }
                        }
                        InteractionMode.MOVING_PROTRACTOR_UNIT -> {
                            onProtractorUnitMoved?.invoke(PointF(currentX, currentY))
                            lastTouchX_single = currentX; lastTouchY_single = currentY
                        }
                        InteractionMode.MOVING_ACTUAL_CUE_BALL -> {
                            onActualCueBallScreenMoved?.invoke(PointF(currentX, currentY))
                            lastTouchX_single = currentX; lastTouchY_single = currentY
                        }
                        InteractionMode.AIMING_BANK_SHOT -> {
                            onBankingAimTargetScreenDrag?.invoke(PointF(currentX, currentY))
                            lastTouchX_single = currentX; lastTouchY_single = currentY
                        }
                        InteractionMode.SCALING, InteractionMode.NONE -> { /* No specific single touch action */ }
                    }
                }
            }
            MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -> {
                if (gestureInProgress) {
                    onGestureEnded?.invoke(); gestureInProgress = false
                }
                Log.d("ProtractorOverlayView", "ACTION_UP/CANCEL: Resetting mode. Old mode=$interactionMode")
                interactionMode = InteractionMode.NONE
                activePointerId = MotionEvent.INVALID_POINTER_ID
            }
            MotionEvent.ACTION_POINTER_DOWN -> {
                // A new pointer has come down. ScaleGestureDetector's onScaleBegin
                // (called by scaleGestureDetector.onTouchEvent(event) at the top)
                // should handle setting interactionMode = SCALING if it's a scale.
            }
            MotionEvent.ACTION_POINTER_UP -> {
                val upPointerId = event.getPointerId(pointerIndex)
                Log.d("ProtractorOverlayView", "ACTION_POINTER_UP: upPointerId=$upPointerId, activePointerId=$activePointerId, event.pointerCount=${event.pointerCount}, oldMode=$interactionMode")

                if (interactionMode == InteractionMode.SCALING) {
                    // If scaling was active and this UP event means only one pointer remains,
                    // transition to single touch state.
                    if (event.pointerCount == 2) { // pointerCount includes the one going up, so 2 means 1 will remain
                        interactionMode = InteractionMode.NONE // Scaling ends
                        // Find the remaining pointer and set it as active for single touch
                        for (i in 0 until event.pointerCount) {
                            val id = event.getPointerId(i)
                            if (id != upPointerId) {
                                activePointerId = id
                                lastTouchX_single = event.getX(i)
                                lastTouchY_single = event.getY(i)
                                Log.d("ProtractorOverlayView", "Transition from SCALING to single: new activePointerId=$activePointerId, x=$lastTouchX_single, y=$lastTouchY_single")
                                // If not spatially locked, redetermine mode for the remaining finger.
                                if (!canonicalState.isSpatiallyLocked) {
                                    determineSingleTouchMode(lastTouchX_single, lastTouchY_single)
                                }
                                break
                            }
                        }
                    } else if (event.pointerCount < 2) { // All pointers lifted or error
                        interactionMode = InteractionMode.NONE
                        activePointerId = MotionEvent.INVALID_POINTER_ID
                        if (gestureInProgress) { onGestureEnded?.invoke(); gestureInProgress = false }
                    }
                } else if (upPointerId == activePointerId) {
                    // The primary single-touch pointer was lifted, but it's not ACTION_UP (more pointers remain)
                    // This can happen if user briefly adds a second finger without initiating a scale, then lifts the first.
                    // Switch to the next available pointer for single touch.
                    val newPointerActionIndex = if (pointerIndex == 0) 1 else 0
                    if (newPointerActionIndex < event.pointerCount) { // Check if another pointer exists
                        activePointerId = event.getPointerId(newPointerActionIndex)
                        lastTouchX_single = event.getX(newPointerActionIndex)
                        lastTouchY_single = event.getY(newPointerActionIndex)
                        interactionMode = InteractionMode.NONE // Safest to reset
                        // If not spatially locked, redetermine mode for the new active finger.
                        if (!canonicalState.isSpatiallyLocked) {
                            determineSingleTouchMode(lastTouchX_single, lastTouchY_single)
                        }
                        Log.d("ProtractorOverlayView", "Primary single touch lifted, switched to other pointer: new activePointerId=$activePointerId. New Mode: $interactionMode")
                    } else { // Should ideally be caught by ACTION_UP
                        interactionMode = InteractionMode.NONE
                        activePointerId = MotionEvent.INVALID_POINTER_ID
                    }
                }
            }
        }
        return true
    }

    private fun determineSingleTouchMode(touchX: Float, touchY: Float) {
        val touchPoint = PointF(touchX, touchY)
        var determinedMode = InteractionMode.NONE

        if (canonicalState.isBankingMode) {
            canonicalState.actualCueBall?.let {
                // Use screenCenter for screen-based interaction check
                val ballScreenPos = DrawingUtils.mapPoint(it.screenCenter, canonicalState.pitchMatrix)
                val bankingBallSlop = draggableElementSlop * 0.75f
                if (DrawingUtils.distance(touchPoint, ballScreenPos) < bankingBallSlop) {
                    determinedMode = InteractionMode.MOVING_ACTUAL_CUE_BALL
                }
            }
            if (determinedMode == InteractionMode.NONE) {
                determinedMode = InteractionMode.AIMING_BANK_SHOT
            }
        } else { // Protractor Mode
            canonicalState.actualCueBall?.let {
                // Use screenCenter for screen-based interaction check
                val ballScreenPos = DrawingUtils.mapPoint(it.screenCenter, canonicalState.pitchMatrix)
                val radiusInfo = DrawingUtils.getPerspectiveRadiusAndLift(it, canonicalState)
                if (DrawingUtils.distance(touchPoint, ballScreenPos) < radiusInfo.radius + draggableElementSlop) {
                    determinedMode = InteractionMode.MOVING_ACTUAL_CUE_BALL
                }
            }
            if (determinedMode == InteractionMode.NONE) {
                // Use screenCenter for screen-based interaction check
                val unitScreenPos = DrawingUtils.mapPoint(canonicalState.protractorUnit.screenCenter, canonicalState.pitchMatrix)
                val unitRadiusInfo = DrawingUtils.getPerspectiveRadiusAndLift(canonicalState.protractorUnit, canonicalState)
                if (DrawingUtils.distance(touchPoint, unitScreenPos) < unitRadiusInfo.radius + draggableElementSlop) {
                    determinedMode = InteractionMode.MOVING_PROTRACTOR_UNIT
                }
            }
            if (determinedMode == InteractionMode.NONE) {
                determinedMode = InteractionMode.ROTATING_PROTRACTOR
            }
        }
        interactionMode = determinedMode
        Log.d("ProtractorOverlayView", "determineSingleTouchMode: x=$touchX, y=$touchY -> Mode=$interactionMode")
    }

    fun updateState(newState: OverlayState, systemIsDark: Boolean) {
        this.canonicalState = newState
        this.paints.updateColors(newState, systemIsDark)
        invalidate()
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/BallRenderer.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/view/renderer/BallRenderer.kt
package com.hereliesaz.cuedetat.view.renderer

import android.graphics.Canvas
import android.graphics.Matrix
import android.graphics.PointF
import android.graphics.Typeface
import android.util.Log
import com.hereliesaz.cuedetat.ui.ZoomMapping
import com.hereliesaz.cuedetat.view.PaintCache
import com.hereliesaz.cuedetat.view.model.ILogicalBall
import com.hereliesaz.cuedetat.view.renderer.text.BallTextRenderer
import com.hereliesaz.cuedetat.view.renderer.util.DrawingUtils
import com.hereliesaz.cuedetat.view.state.OverlayState
import kotlin.math.min

class BallRenderer {

    private val textRenderer = BallTextRenderer()
    private var lastLoggedPitchBanking = -9999f

    fun drawLogicalBalls(canvas: Canvas, state: OverlayState, paints: PaintCache) {
        state.actualCueBall?.let {
            // Drawing logical balls, so use logicalPosition
            canvas.drawCircle(it.logicalPosition.x, it.logicalPosition.y, it.radius, paints.actualCueBallBasePaint)
            canvas.drawCircle(it.logicalPosition.x, it.logicalPosition.y, it.radius / 5f, paints.actualCueBallCenterMarkPaint)
        }

        if (state.isBankingMode) return

        canvas.save()
        // Logical drawing, so translate by logicalPosition of protractorUnit
        canvas.translate(state.protractorUnit.logicalPosition.x, state.protractorUnit.logicalPosition.y)
        canvas.rotate(state.protractorUnit.rotationDegrees)

        canvas.drawCircle(0f, 0f, state.protractorUnit.radius, paints.targetCirclePaint)
        canvas.drawCircle(0f, 0f, state.protractorUnit.radius / 5f, paints.targetCenterMarkPaint)

        val distanceBetweenProtractorCenters = 2 * state.protractorUnit.radius
        val unrotatedGhostCueLocalPos = PointF(0f, distanceBetweenProtractorCenters) // This is relative to protractor logical center

        val cuePaint = if (state.isImpossibleShot && !state.isBankingMode) paints.warningPaintRed1 else paints.cueCirclePaint
        canvas.drawCircle(unrotatedGhostCueLocalPos.x, unrotatedGhostCueLocalPos.y, state.protractorUnit.radius, cuePaint)
        canvas.drawCircle(unrotatedGhostCueLocalPos.x, unrotatedGhostCueLocalPos.y, state.protractorUnit.radius / 5f, paints.cueCenterMarkPaint)

        canvas.restore()
    }

    fun drawScreenSpaceBalls(
        canvas: Canvas,
        state: OverlayState,
        paints: PaintCache,
        typeface: Typeface?
    ) {
        paints.actualCueBallTextPaint.typeface = typeface

        state.actualCueBall?.let { currentActualCueBall ->
            // Drawing screen space, so project the logicalPosition through the matrix
            val screenProjectedCenter = DrawingUtils.mapPoint(currentActualCueBall.logicalPosition, state.pitchMatrix)
            val visualRadiusOnScreen: Float
            val effectiveCenterY: Float
            val labelText: String

            if (state.isBankingMode) {
                effectiveCenterY = screenProjectedCenter.y
                labelText = "Ball to Bank"

                val unitZoomScreenRadius = (min(state.viewWidth, state.viewHeight) * 0.30f / 2f)
                val currentZoomLevel = ZoomMapping.sliderToZoom(state.zoomSliderPosition)
                visualRadiusOnScreen = unitZoomScreenRadius * currentZoomLevel

                if (kotlin.math.abs(state.pitchAngle - lastLoggedPitchBanking) > 0.5f || kotlin.math.abs(state.tableRotationDegrees % 360 - 0f) > 1f) {
                    Log.i("BallRenderer_Banking", "PITCH: ${"%.1f".format(state.pitchAngle)}, " +
                            "TableRot: ${"%.1f".format(state.tableRotationDegrees)}, " +
                            "LogRadius (from state): ${"%.2f".format(currentActualCueBall.radius)}, " +
                            "VISUAL ScreenRadius: ${"%.2f".format(visualRadiusOnScreen)}, " +
                            "CurrentZoomLevel: ${"%.3f".format(currentZoomLevel)}")
                    lastLoggedPitchBanking = state.pitchAngle
                }

            } else {
                labelText = "Actual Cue Ball"
                val radiusInfo = DrawingUtils.getPerspectiveRadiusAndLift(currentActualCueBall, state)
                visualRadiusOnScreen = radiusInfo.radius
                effectiveCenterY = screenProjectedCenter.y - radiusInfo.lift
            }

            canvas.drawCircle(screenProjectedCenter.x, effectiveCenterY, visualRadiusOnScreen, paints.actualCueBallGhostPaint)
            canvas.drawCircle(screenProjectedCenter.x, effectiveCenterY, visualRadiusOnScreen / 5f, paints.actualCueBallCenterMarkPaint)

            if (state.areHelpersVisible) {
                textRenderer.draw(canvas, paints.actualCueBallTextPaint, state.zoomSliderPosition,
                    screenProjectedCenter.x, effectiveCenterY, visualRadiusOnScreen, labelText)
            }
        }

        if (!state.isBankingMode) {
            paints.targetBallTextPaint.typeface = typeface
            paints.cueBallTextPaint.typeface = typeface

            val targetBallLogical = state.protractorUnit // This is an ILogicalBall
            val targetRadiusInfo = DrawingUtils.getPerspectiveRadiusAndLift(targetBallLogical, state)
            val screenProjectedTargetCenter = DrawingUtils.mapPoint(targetBallLogical.logicalPosition, state.pitchMatrix) // Use logicalPosition
            val targetGhostVisualY = screenProjectedTargetCenter.y - targetRadiusInfo.lift
            canvas.drawCircle(screenProjectedTargetCenter.x, targetGhostVisualY, targetRadiusInfo.radius, paints.targetGhostBallOutlinePaint)
            if (state.areHelpersVisible) {
                textRenderer.draw(canvas, paints.targetBallTextPaint, state.zoomSliderPosition,
                    screenProjectedTargetCenter.x, targetGhostVisualY, targetRadiusInfo.radius, "Target Ball")
            }

            // Corrected: Provide logicalPosition for anonymous ILogicalBall implementation
            val protractorGhostCueLogical = object : ILogicalBall {
                override val logicalPosition = state.protractorUnit.protractorCueBallLogicalCenter // Use the new logical center for ghost cue
                override val radius = state.protractorUnit.radius
            }
            val cueRadiusInfo = DrawingUtils.getPerspectiveRadiusAndLift(protractorGhostCueLogical, state)
            val screenProjectedGhostCueCenter = DrawingUtils.mapPoint(protractorGhostCueLogical.logicalPosition, state.pitchMatrix) // Use logicalPosition
            val cueGhostVisualY = screenProjectedGhostCueCenter.y - cueRadiusInfo.lift
            val cueGhostPaint = if (state.isImpossibleShot) paints.warningPaintRed2 else paints.ghostCueOutlinePaint
            canvas.drawCircle(screenProjectedGhostCueCenter.x, cueGhostVisualY, cueRadiusInfo.radius, cueGhostPaint)
            if (state.areHelpersVisible) {
                textRenderer.draw(canvas, paints.cueBallTextPaint, state.zoomSliderPosition,
                    screenProjectedGhostCueCenter.x, cueGhostVisualY, cueRadiusInfo.radius, "Ghost Cue Ball")
            }
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/LineRenderer.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/view/renderer/LineRenderer.kt
package com.hereliesaz.cuedetat.view.renderer

import android.graphics.Canvas
import android.graphics.Paint
import android.graphics.PointF
import android.graphics.RectF
import android.graphics.Typeface
import android.util.Log
import com.hereliesaz.cuedetat.view.PaintCache
import com.hereliesaz.cuedetat.view.model.ActualCueBall
import com.hereliesaz.cuedetat.view.renderer.text.LineTextRenderer
import com.hereliesaz.cuedetat.view.state.OverlayState
import kotlin.math.atan2
import kotlin.math.cos
import kotlin.math.sin
import kotlin.math.sqrt

class LineRenderer {
    private val SHOT_LINE_LABEL_DISTANCE_FACTOR = 15f
    private val RIGHT_TANGENT_LABEL_DISTANCE_FACTOR = 7f
    private val LEFT_TANGENT_LABEL_DISTANCE_FACTOR = 7f
    private val AIMING_LINE_LABEL_DISTANCE_FACTOR = 10f
    private val PROTRACTOR_LABEL_DISTANCE_FACTOR = 20f
    private val BANKING_SHOT_LINE_LABEL_DISTANCE_FACTOR = 8f

    private val SHOT_LINE_LABEL_ANGLE_OFFSET = -2f
    private val RIGHT_TANGENT_LABEL_ANGLE_OFFSET = -5f
    private val LEFT_TANGENT_LABEL_ANGLE_OFFSET = 5f
    private val AIMING_LINE_LABEL_ANGLE_OFFSET = -2f
    private val PROTRACTOR_LABEL_ANGLE_OFFSET = 0f
    private val BANKING_SHOT_LINE_LABEL_ANGLE_OFFSET = -2f

    private val SHOT_LINE_LABEL_ROTATION = 0f
    private val RIGHT_TANGENT_LABEL_ROTATION = 0f
    private val LEFT_TANGENT_LABEL_ROTATION = 180f
    private val AIMING_LINE_LABEL_ROTATION = 0f
    private val PROTRACTOR_LABEL_ROTATION = 90f
    private val BANKING_SHOT_LINE_LABEL_ROTATION = 0f

    private val SHOT_LINE_LABEL_FONT_SIZE = 38f
    private val RIGHT_TANGENT_LABEL_FONT_SIZE = 38f
    private val LEFT_TANGENT_LABEL_FONT_SIZE = 38f
    private val AIMING_LINE_LABEL_FONT_SIZE = 38f
    private val PROTRACTOR_LABEL_FONT_SIZE = 42f
    private val BANKING_SHOT_LINE_LABEL_FONT_SIZE = 34f

    private val PROTRACTOR_ANGLES = floatArrayOf(0f, 14f, 30f, 36f, 43f, 48f)
    private val textRenderer = LineTextRenderer()

    private val tableToBallRatioLong = 88f
    private val tableToBallRatioShort = 44f

    private enum class Rail { TOP, BOTTOM, LEFT, RIGHT, NONE }
    private data class IntersectionResult(val point: PointF?, val railHit: Rail, val distanceSq: Float)

    private var lastProtractorShotLineLog = ""
    private var lastProtractorAimingLineLog = ""


    fun drawLogicalLines(
        canvas: Canvas,
        state: OverlayState,
        paints: PaintCache,
        typeface: Typeface?
    ) {
        paints.lineTextPaint.typeface = typeface

        if (state.isBankingMode) {
            state.actualCueBall?.let { bankingBall ->
                state.bankingAimTarget?.let { aimTarget ->
                    drawBankingShotLinesWithReflection(canvas, bankingBall, aimTarget, state, paints)
                }
            }
            return
        }

        val protractorShotLineDrawn = drawProtractorShotLine(canvas, state, paints)

        var unrotatedGhostCueLogicalPosForLog: PointF? = null

        canvas.save()
        canvas.translate(state.protractorUnit.logicalPosition.x, state.protractorUnit.logicalPosition.y) // Use logicalPosition
        canvas.rotate(state.protractorUnit.rotationDegrees)

        val distanceBetweenProtractorCenters = 2 * state.protractorUnit.radius
        val unrotatedProtractorGhostCueLogicalPos = PointF(0f, distanceBetweenProtractorCenters)
        unrotatedGhostCueLogicalPosForLog = unrotatedProtractorGhostCueLogicalPos

        drawTangentLines(canvas, unrotatedProtractorGhostCueLogicalPos, paints, state)
        val protractorAimingLineDrawn = drawProtractorAimingAndAngleLines(canvas, unrotatedProtractorGhostCueLogicalPos, paints, state)

        canvas.restore()

        val pShotLog = "ProtShotLine: drawn=$protractorShotLineDrawn, actualCue=${state.actualCueBall != null}, hasInverse=${state.hasInverseMatrix}, radius=${state.protractorUnit.radius}"
        if (pShotLog != lastProtractorShotLineLog) {
            Log.d("LineRenderer", pShotLog); lastProtractorShotLineLog = pShotLog
        }
        val logicalPosString = unrotatedGhostCueLogicalPosForLog?.let { "(${it.x},${it.y})" } ?: "(not set)"
        val pAimLog = "ProtAimLine: drawn=$protractorAimingLineDrawn, radius=${state.protractorUnit.radius}, ghostLogicalPos=$logicalPosString"
        if (pAimLog != lastProtractorAimingLineLog) {
            Log.d("LineRenderer", pAimLog); lastProtractorAimingLineLog = pAimLog
        }
    }

    private fun getAngle(from: PointF, to: PointF): Float {
        return Math.toDegrees(atan2(to.y - from.y, to.x - from.x).toDouble()).toFloat()
    }

    private fun drawBankingShotLinesWithReflection(
        canvas: Canvas, bankingBall: ActualCueBall, initialAimTarget: PointF,
        state: OverlayState, paints: PaintCache
    ) {
        if (bankingBall.radius <= 0) return
        var startPoint = bankingBall.logicalPosition // Use logicalPosition
        var currentAimVector = PointF(initialAimTarget.x - startPoint.x, initialAimTarget.y - startPoint.y)
        val ballRadiusForTableScale = bankingBall.radius
        val tableHeight = tableToBallRatioShort * ballRadiusForTableScale
        val tableWidth = tableToBallRatioLong * ballRadiusForTableScale
        val tableCenterX = state.viewWidth / 2f
        val tableCenterY = state.viewHeight / 2f
        val tableBounds = RectF(
            tableCenterX - tableWidth / 2, tableCenterY - tableHeight / 2,
            tableCenterX + tableWidth / 2, tableCenterY + tableHeight / 2
        )
        var lastHitRail = Rail.NONE
        val bankLinePaints = listOf(paints.bankShotLinePaint1, paints.bankShotLinePaint2, paints.bankShotLinePaint3)

        for (i in 0..2) {
            val farOffTarget = PointF(startPoint.x + currentAimVector.x * 1000, startPoint.y + currentAimVector.y * 1000)
            val hitResult = findClosestRailIntersection(startPoint, farOffTarget, tableBounds, lastHitRail)
            val currentSegmentPaint = bankLinePaints.getOrElse(i) { bankLinePaints.last() }

            if (hitResult.point != null) {
                canvas.drawLine(startPoint.x, startPoint.y, hitResult.point.x, hitResult.point.y, currentSegmentPaint)
                if (state.areHelpersVisible) {
                    val midSegment = PointF((startPoint.x + hitResult.point.x) / 2, (startPoint.y + hitResult.point.y) / 2)
                    val labelTextPaint = Paint(paints.lineTextPaint).apply { color = currentSegmentPaint.color }
                    textRenderer.draw(canvas, "Bank ${i + 1}", midSegment, getAngle(startPoint, hitResult.point),
                        0f, BANKING_SHOT_LINE_LABEL_ANGLE_OFFSET, BANKING_SHOT_LINE_LABEL_ROTATION,
                        labelTextPaint, BANKING_SHOT_LINE_LABEL_FONT_SIZE, state.zoomSliderPosition)
                }
                startPoint = hitResult.point
                currentAimVector = reflectVector(currentAimVector, hitResult.railHit)
                lastHitRail = hitResult.railHit
                if (i == 2) {
                    val finalFarOffTarget = PointF(startPoint.x + currentAimVector.x * 1000, startPoint.y + currentAimVector.y * 1000)
                    canvas.drawLine(startPoint.x, startPoint.y, finalFarOffTarget.x, finalFarOffTarget.y, currentSegmentPaint)
                }
            } else {
                val finalFarOffTarget = PointF(startPoint.x + currentAimVector.x * 1000, startPoint.y + currentAimVector.y * 1000)
                canvas.drawLine(startPoint.x, startPoint.y, finalFarOffTarget.x, finalFarOffTarget.y, currentSegmentPaint)
                if (i == 0 && state.areHelpersVisible) {
                    val labelTextPaint = Paint(paints.lineTextPaint).apply { color = currentSegmentPaint.color }
                    textRenderer.draw(canvas, "Aim", PointF((startPoint.x + finalFarOffTarget.x)/2, (startPoint.y + finalFarOffTarget.y)/2),
                        getAngle(startPoint, finalFarOffTarget), 0f, BANKING_SHOT_LINE_LABEL_ANGLE_OFFSET, BANKING_SHOT_LINE_LABEL_ROTATION,
                        labelTextPaint, BANKING_SHOT_LINE_LABEL_FONT_SIZE, state.zoomSliderPosition)
                }
                break
            }
        }
    }

    private fun findClosestRailIntersection(start: PointF, endRayTarget: PointF, bounds: RectF, ignoreRail: Rail): IntersectionResult {
        var closestIntersection: PointF? = null; var railHit = Rail.NONE; var minDistanceSq = Float.MAX_VALUE
        val candidates = mutableListOf<IntersectionResult>()
        if (ignoreRail != Rail.TOP) getLineSegmentRayIntersection(start, endRayTarget, PointF(bounds.left, bounds.top), PointF(bounds.right, bounds.top))?.let { candidates.add(IntersectionResult(it, Rail.TOP, distanceSq(start, it))) }
        if (ignoreRail != Rail.BOTTOM) getLineSegmentRayIntersection(start, endRayTarget, PointF(bounds.left, bounds.bottom), PointF(bounds.right, bounds.bottom))?.let { candidates.add(IntersectionResult(it, Rail.BOTTOM, distanceSq(start, it))) }
        if (ignoreRail != Rail.LEFT) getLineSegmentRayIntersection(start, endRayTarget, PointF(bounds.left, bounds.top), PointF(bounds.left, bounds.bottom))?.let { candidates.add(IntersectionResult(it, Rail.LEFT, distanceSq(start, it))) }
        if (ignoreRail != Rail.RIGHT) getLineSegmentRayIntersection(start, endRayTarget, PointF(bounds.right, bounds.top), PointF(bounds.right, bounds.bottom))?.let { candidates.add(IntersectionResult(it, Rail.RIGHT, distanceSq(start, it))) }
        for (candidate in candidates) {
            if (candidate.point != null) {
                val dotProduct = (candidate.point.x - start.x) * (endRayTarget.x - start.x) + (candidate.point.y - start.y) * (endRayTarget.y - start.y)
                if (dotProduct >= -0.001f && candidate.distanceSq < minDistanceSq) { minDistanceSq = candidate.distanceSq; closestIntersection = candidate.point; railHit = candidate.railHit }
            }
        }
        return IntersectionResult(closestIntersection, railHit, minDistanceSq)
    }
    private fun getLineSegmentRayIntersection(rayOrigin: PointF, rayTarget: PointF, segP1: PointF, segP2: PointF): PointF? {
        val rDx = rayTarget.x - rayOrigin.x; val rDy = rayTarget.y - rayOrigin.y; val sDx = segP2.x - segP1.x; val sDy = segP2.y - segP1.y
        val rMagSq = rDx * rDx + rDy * rDy; val sMagSq = sDx * sDx + sDy * sDy
        if (rMagSq < 0.0001f || sMagSq < 0.0001f) return null
        val denominator = rDx * sDy - rDy * sDx
        if (kotlin.math.abs(denominator) < 0.0001f) return null
        val t = ((segP1.x - rayOrigin.x) * sDy - (segP1.y - rayOrigin.y) * sDx) / denominator
        val u = ((segP1.x - rayOrigin.x) * rDy - (segP1.y - rayOrigin.y) * rDx) / denominator
        if (t >= 0 && u >= 0 && u <= 1) return PointF(rayOrigin.x + t * rDx, rayOrigin.y + t * rDy)
        return null
    }
    private fun distanceSq(p1: PointF, p2: PointF): Float {
        val dx = p1.x - p2.x; val dy = p1.y - p2.y; return dx * dx + dy * dy
    }
    private fun reflectVector(incident: PointF, rail: Rail): PointF {
        return when (rail) { Rail.TOP, Rail.BOTTOM -> PointF(incident.x, -incident.y); Rail.LEFT, Rail.RIGHT -> PointF(-incident.x, incident.y); Rail.NONE -> incident }
    }

    private fun drawProtractorShotLine(canvas: Canvas, state: OverlayState, paints: PaintCache): Boolean {
        val startPoint: PointF = state.actualCueBall?.logicalPosition ?: run { // Use logicalPosition
            if (!state.hasInverseMatrix) return false
            val screenAnchor = floatArrayOf(state.viewWidth / 2f, state.viewHeight.toFloat())
            val logicalAnchorArray = FloatArray(2)
            state.inversePitchMatrix.mapPoints(logicalAnchorArray, screenAnchor)
            PointF(logicalAnchorArray[0], logicalAnchorArray[1])
        }
        val throughPoint = state.protractorUnit.protractorCueBallLogicalCenter // Use logical center
        val paintToUse = if (state.isImpossibleShot && !state.isBankingMode) paints.warningPaintRed3 else paints.shotLinePaint
        val label = if (state.areHelpersVisible) "Shot Line" else null
        val textPaint = Paint(paints.lineTextPaint).apply { color = paintToUse.color }
        val lineAngle = getAngle(startPoint, throughPoint)
        val labelDistance = state.protractorUnit.radius * SHOT_LINE_LABEL_DISTANCE_FACTOR

        drawExtendedLineAndLabel(canvas, startPoint, throughPoint, paintToUse, label, textPaint,
            lineAngle, labelDistance, SHOT_LINE_LABEL_ANGLE_OFFSET, SHOT_LINE_LABEL_ROTATION,
            SHOT_LINE_LABEL_FONT_SIZE, state.zoomSliderPosition)
        return true
    }

    private fun drawExtendedLineAndLabel(
        canvas: Canvas, start: PointF, through: PointF, linePaint: Paint,
        labelText: String?, textPaint: Paint,
        lineAngleForLabel: Float, labelDistanceFromThroughPoint: Float,
        labelAngleOffset: Float, labelRotation: Float,
        labelBaseFontSize: Float, zoomSliderPosition: Float
    ) {
        val dirX = through.x - start.x; val dirY = through.y - start.y
        val mag = sqrt(dirX * dirX + dirY * dirY)
        if (mag > 0.001f) {
            val extendFactor = 5000f; val ndx = dirX / mag; val ndy = dirY / mag
            canvas.drawLine(start.x, start.y, start.x + ndx * extendFactor, start.y + ndy * extendFactor, linePaint)
            if (labelText != null) {
                textRenderer.draw(canvas, labelText, through,
                    lineAngleForLabel, labelDistanceFromThroughPoint,
                    labelAngleOffset, labelRotation, textPaint, labelBaseFontSize, zoomSliderPosition)
            }
        }
    }

    private fun drawTangentLines(canvas: Canvas, ghostCuePosInUnitLogicalSpace: PointF, paints: PaintCache, state: OverlayState) {
        val dxToTarget = 0f - ghostCuePosInUnitLogicalSpace.x
        val dyToTarget = 0f - ghostCuePosInUnitLogicalSpace.y
        val magToTarget = sqrt(dxToTarget * dxToTarget + dyToTarget * dyToTarget)

        if (magToTarget > 0.001f) {
            val extend = state.viewWidth.coerceAtLeast(state.viewHeight) * 1.5f
            val tangentDx = -dyToTarget / magToTarget
            val tangentDy = dxToTarget / magToTarget

            val rightPaint = if (state.isImpossibleShot || state.protractorUnit.rotationDegrees <= 180f) paints.tangentLineDottedPaint else paints.tangentLineSolidPaint
            val leftPaint = if (state.isImpossibleShot || state.protractorUnit.rotationDegrees > 180f) paints.tangentLineDottedPaint else paints.tangentLineSolidPaint

            val rightEndPoint = PointF(ghostCuePosInUnitLogicalSpace.x + tangentDx * extend, ghostCuePosInUnitLogicalSpace.y + tangentDy * extend)
            val leftEndPoint = PointF(ghostCuePosInUnitLogicalSpace.x - tangentDx * extend, ghostCuePosInUnitLogicalSpace.y - tangentDy * extend)

            canvas.drawLine(ghostCuePosInUnitLogicalSpace.x, ghostCuePosInUnitLogicalSpace.y, rightEndPoint.x, rightEndPoint.y, rightPaint)
            canvas.drawLine(ghostCuePosInUnitLogicalSpace.x, ghostCuePosInUnitLogicalSpace.y, leftEndPoint.x, leftEndPoint.y, leftPaint)

            if (state.areHelpersVisible) {
                val textPaintRight = Paint(paints.lineTextPaint).apply { color = rightPaint.color }
                val textPaintLeft = Paint(paints.lineTextPaint).apply { color = leftPaint.color }
                val labelDistance = state.protractorUnit.radius * RIGHT_TANGENT_LABEL_DISTANCE_FACTOR

                textRenderer.draw(canvas, "Tangent Line", ghostCuePosInUnitLogicalSpace, getAngle(ghostCuePosInUnitLogicalSpace, rightEndPoint),
                    labelDistance, RIGHT_TANGENT_LABEL_ANGLE_OFFSET, RIGHT_TANGENT_LABEL_ROTATION,
                    textPaintRight, RIGHT_TANGENT_LABEL_FONT_SIZE, state.zoomSliderPosition)
                textRenderer.draw(canvas, "Tangent Line", ghostCuePosInUnitLogicalSpace, getAngle(ghostCuePosInUnitLogicalSpace, leftEndPoint),
                    labelDistance, LEFT_TANGENT_LABEL_ANGLE_OFFSET, LEFT_TANGENT_LABEL_ROTATION,
                    textPaintLeft, LEFT_TANGENT_LABEL_FONT_SIZE, state.zoomSliderPosition)
            }
        }
    }

    private fun drawProtractorAimingAndAngleLines(canvas: Canvas, ghostCuePosInUnitLogicalSpace: PointF, paints: PaintCache, state: OverlayState): Boolean {
        val lineLength = 2000f
        val originOfAllLines = ghostCuePosInUnitLogicalSpace
        val targetBallLogicalOrigin = PointF(0f, 0f)
        var lineDrawn = false

        val aimDirX = targetBallLogicalOrigin.x - originOfAllLines.x
        val aimDirY = targetBallLogicalOrigin.y - originOfAllLines.y
        val mag = sqrt(aimDirX * aimDirX + aimDirY * aimDirY)

        if (mag > state.protractorUnit.radius * 0.1f) {
            val nX = aimDirX / mag; val nY = aimDirY / mag
            val endPointThroughTarget = PointF(originOfAllLines.x + nX * lineLength, originOfAllLines.y + nY * lineLength)
            canvas.drawLine(originOfAllLines.x, originOfAllLines.y, endPointThroughTarget.x, endPointThroughTarget.y, paints.aimingLinePaint)
            lineDrawn = true
            if (state.areHelpersVisible) {
                val textPaint = Paint(paints.lineTextPaint).apply { color = paints.aimingLinePaint.color }
                val labelDistance = state.protractorUnit.radius * AIMING_LINE_LABEL_DISTANCE_FACTOR
                textRenderer.draw(canvas, "Aiming Line", originOfAllLines, getAngle(originOfAllLines, targetBallLogicalOrigin),
                    labelDistance, AIMING_LINE_LABEL_ANGLE_OFFSET, AIMING_LINE_LABEL_ROTATION,
                    textPaint, AIMING_LINE_LABEL_FONT_SIZE, state.zoomSliderPosition)
            }
        }

        PROTRACTOR_ANGLES.forEach { angle ->
            if (angle == 0f) return@forEach
            val r = Math.toRadians(angle.toDouble())
            val eX = (lineLength * sin(r)).toFloat(); val eY = (lineLength * cos(r)).toFloat()

            canvas.drawLine(originOfAllLines.x, originOfAllLines.y, originOfAllLines.x + eX, originOfAllLines.y + eY, paints.protractorLinePaint)
            canvas.drawLine(originOfAllLines.x, originOfAllLines.y, originOfAllLines.x - eX, originOfAllLines.y - eY, paints.protractorLinePaint)
            canvas.drawLine(originOfAllLines.x, originOfAllLines.y, originOfAllLines.x - eX, originOfAllLines.y + eY, paints.protractorLinePaint)
            canvas.drawLine(originOfAllLines.x, originOfAllLines.y, originOfAllLines.x + eX, originOfAllLines.y - eY, paints.protractorLinePaint)

            lineDrawn = true
            if (state.areHelpersVisible) {
                val textPaint = Paint(paints.lineTextPaint).apply { color = paints.protractorLinePaint.color }
                val labelDistance = state.protractorUnit.radius * PROTRACTOR_LABEL_DISTANCE_FACTOR

                textRenderer.draw(canvas, "${angle.toInt()}°", originOfAllLines, getAngle(originOfAllLines, PointF(originOfAllLines.x + eX, originOfAllLines.y + eY)),
                    labelDistance, PROTRACTOR_LABEL_ANGLE_OFFSET, PROTRACTOR_LABEL_ROTATION,
                    textPaint, PROTRACTOR_LABEL_FONT_SIZE, state.zoomSliderPosition)
                textRenderer.draw(canvas, "${angle.toInt()}°", originOfAllLines, getAngle(originOfAllLines, PointF(originOfAllLines.x - eX, originOfAllLines.y - eY)),
                    labelDistance, PROTRACTOR_LABEL_ANGLE_OFFSET, PROTRACTOR_LABEL_ROTATION,
                    textPaint, PROTRACTOR_LABEL_FONT_SIZE, state.zoomSliderPosition)
                textRenderer.draw(canvas, "${angle.toInt()}°", originOfAllLines, getAngle(originOfAllLines, PointF(originOfAllLines.x - eX, originOfAllLines.y + eY)),
                    labelDistance, PROTRACTOR_LABEL_ANGLE_OFFSET, PROTRACTOR_LABEL_ROTATION,
                    textPaint, PROTRACTOR_LABEL_FONT_SIZE, state.zoomSliderPosition)
                textRenderer.draw(canvas, "${angle.toInt()}°", originOfAllLines, getAngle(originOfAllLines, PointF(originOfAllLines.x + eX, originOfAllLines.y - eY)),
                    labelDistance, PROTRACTOR_LABEL_ANGLE_OFFSET, PROTRACTOR_LABEL_ROTATION,
                    textPaint, PROTRACTOR_LABEL_FONT_SIZE, state.zoomSliderPosition)
            }
        }
        return lineDrawn
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/OverlayRenderer.kt ---

package com.hereliesaz.cuedetat.view.renderer

import android.graphics.Canvas
import android.graphics.Typeface
import com.hereliesaz.cuedetat.view.PaintCache
import com.hereliesaz.cuedetat.view.state.OverlayState

class OverlayRenderer {

    private val ballRenderer = BallRenderer()
    private val lineRenderer = LineRenderer()
    private val tableRenderer = TableRenderer()
    private val railRenderer = RailRenderer()

    fun draw(canvas: Canvas, state: OverlayState, paints: PaintCache, typeface: Typeface?) {
        if (state.viewWidth == 0 || state.viewHeight == 0) return

        // --- Draw Banking Mode elements if active ---
        if (state.isBankingMode) {
            // Draw base table with the standard matrix
            canvas.save()
            // Corrected: use pitchMatrix from state
            canvas.concat(state.pitchMatrix)
            tableRenderer.draw(canvas, state, paints)
            canvas.restore()

            // Draw rails with the special, lifted matrix
            canvas.save()
            // Corrected: use railPitchMatrix from state
            canvas.concat(state.railPitchMatrix)
            railRenderer.draw(canvas, state, paints)
            canvas.restore()
        }

        // --- Draw all elements on the 3D logical plane ---
        canvas.save()
        // Corrected: use pitchMatrix from state
        canvas.concat(state.pitchMatrix)

        lineRenderer.drawLogicalLines(canvas, state, paints, typeface)
        ballRenderer.drawLogicalBalls(canvas, state, paints)

        canvas.restore()

        // --- Draw screen-space elements (ghosts) on top ---
        ballRenderer.drawScreenSpaceBalls(canvas, state, paints, typeface)
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/RailRenderer.kt ---

package com.hereliesaz.cuedetat.view.renderer

import android.graphics.Canvas
import android.graphics.Paint
import com.hereliesaz.cuedetat.view.PaintCache
import com.hereliesaz.cuedetat.view.state.OverlayState

class RailRenderer {

    private val tableToBallRatioLong = 88f
    private val tableToBallRatioShort = 44f
    private val railVisualOffsetFromEdgeFactor =
        0.75f // How far "out" rail center is from playing surface edge, times ball radius
    private val railVisualThicknessFactor =
        0.5f    // How thick the rail line itself appears, times ball radius (strokeWidth)
    private val diamondSizeFactor = 0.25f

    fun draw(canvas: Canvas, state: OverlayState, paints: PaintCache) {
        val referenceRadius = state.actualCueBall?.radius ?: state.protractorUnit.radius
        if (referenceRadius <= 0) return

        val tablePlayingSurfaceHeight = tableToBallRatioShort * referenceRadius
        val tablePlayingSurfaceWidth = tableToBallRatioLong * referenceRadius
        val tableCenterX = state.viewWidth / 2f
        val tableCenterY = state.viewHeight / 2f

        val innerLeft = tableCenterX - tablePlayingSurfaceWidth / 2
        val innerTop = tableCenterY - tablePlayingSurfaceHeight / 2
        val innerRight = tableCenterX + tablePlayingSurfaceWidth / 2
        val innerBottom = tableCenterY + tablePlayingSurfaceHeight / 2

        val railLinePaint = Paint(paints.tableOutlinePaint).apply {
            // Rails might be thicker than the table playing surface outline
            strokeWidth = referenceRadius * railVisualThicknessFactor
        }
        val diamondPaint = Paint(paints.tableOutlinePaint).apply {
            // Diamonds are small, use a thinner stroke or fill
            strokeWidth =
                (referenceRadius * diamondSizeFactor) / 2f // Make stroke relative to diamond size
            // style = Paint.Style.FILL_AND_STROKE // If you want filled diamonds
        }


        // Calculate Y positions for horizontal rails & X for vertical, offset from playing surface
        val railOffsetAmount = referenceRadius * railVisualOffsetFromEdgeFactor

        val railTopCenterY = innerTop - railOffsetAmount
        val railBottomCenterY = innerBottom + railOffsetAmount
        val railLeftCenterX = innerLeft - railOffsetAmount
        val railRightCenterX = innerRight + railOffsetAmount

        // Extend rail lines slightly past table corners for a mitered look (optional)
        val railEndExtension = railOffsetAmount * 1.5f

        // Draw rail lines (these are drawn on the canvas with railPitchMatrix for lift)
        // Top Rail
        canvas.drawLine(
            innerLeft - railEndExtension,
            railTopCenterY,
            innerRight + railEndExtension,
            railTopCenterY,
            railLinePaint
        )
        // Bottom Rail
        canvas.drawLine(
            innerLeft - railEndExtension,
            railBottomCenterY,
            innerRight + railEndExtension,
            railBottomCenterY,
            railLinePaint
        )
        // Left Rail
        canvas.drawLine(
            railLeftCenterX,
            innerTop - railEndExtension,
            railLeftCenterX,
            innerBottom + railEndExtension,
            railLinePaint
        )
        // Right Rail
        canvas.drawLine(
            railRightCenterX,
            innerTop - railEndExtension,
            railRightCenterX,
            innerBottom + railEndExtension,
            railLinePaint
        )

        // --- Draw Diamonds ---
        val diamondRadius = referenceRadius * diamondSizeFactor

        // Diamonds on the long rails (top and bottom)
        for (i in 1..3) {
            val xPos = innerLeft + (tablePlayingSurfaceWidth * (i / 4.0f)) // 1/4, 1/2, 3/4 points
            canvas.drawCircle(xPos, railTopCenterY, diamondRadius, diamondPaint)
            canvas.drawCircle(xPos, railBottomCenterY, diamondRadius, diamondPaint)
        }

        // Diamonds on the short rails (left and right) - typically one in the middle
        canvas.drawCircle(railLeftCenterX, tableCenterY, diamondRadius, diamondPaint)
        canvas.drawCircle(railRightCenterX, tableCenterY, diamondRadius, diamondPaint)
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/TableRenderer.kt ---

package com.hereliesaz.cuedetat.view.renderer

import android.graphics.Canvas
import android.graphics.Paint
import com.hereliesaz.cuedetat.view.PaintCache
import com.hereliesaz.cuedetat.view.state.OverlayState

class TableRenderer {

    private val tableToBallRatioLong = 88f
    private val tableToBallRatioShort = 44f

    fun draw(canvas: Canvas, state: OverlayState, paints: PaintCache) {
        // In banking mode, the table's scale is relative to the ActualCueBall's radius (which is the BankingBall)
        // This radius already incorporates the overall zoom level.
        val referenceRadius = state.actualCueBall?.radius
            ?: state.protractorUnit.radius // Fallback, but should always have actualCueBall in banking

        if (referenceRadius <= 0) return

        // Logical dimensions of the playing surface
        val tablePlayingSurfaceHeight = tableToBallRatioShort * referenceRadius
        val tablePlayingSurfaceWidth = tableToBallRatioLong * referenceRadius

        // Table is always logically centered on the view's logical center
        val tableCenterX = state.viewWidth / 2f
        val tableCenterY = state.viewHeight / 2f

        val left = tableCenterX - tablePlayingSurfaceWidth / 2
        val top = tableCenterY - tablePlayingSurfaceHeight / 2
        val right = tableCenterX + tablePlayingSurfaceWidth / 2
        val bottom = tableCenterY + tablePlayingSurfaceHeight / 2

        // Draw playing surface outline
        canvas.drawRect(left, top, right, bottom, paints.tableOutlinePaint)

        // Draw pockets as stroked circles
        val pocketRadius = referenceRadius * 1.8f // Pockets are roughly 1.8x ball radius
        val pocketPaint = paints.tableOutlinePaint // Use same stroke style as table outline

        // Corner Pockets (centers are at the corners of the playing surface)
        canvas.drawCircle(left, top, pocketRadius, pocketPaint)
        canvas.drawCircle(right, top, pocketRadius, pocketPaint)
        canvas.drawCircle(left, bottom, pocketRadius, pocketPaint)
        canvas.drawCircle(right, bottom, pocketRadius, pocketPaint)

        // Side Pockets (centers are at the midpoint of the long sides)
        canvas.drawCircle(tableCenterX, top, pocketRadius, pocketPaint)
        canvas.drawCircle(tableCenterX, bottom, pocketRadius, pocketPaint)
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/text/BallTextRenderer.kt ---

package com.hereliesaz.cuedetat.view.renderer.text

import android.graphics.Canvas
import android.graphics.Paint
import com.hereliesaz.cuedetat.ui.ZoomMapping

class BallTextRenderer {

    private val baseGhostBallTextSize = 42f
    private val minGhostBallTextSize = 20f
    private val maxGhostBallTextSize = 80f

    fun draw(
        canvas: Canvas,
        paint: Paint,
        zoomSliderPosition: Float,
        x: Float,
        y: Float,
        radius: Float,
        text: String
    ) {
        val zoomFactor = ZoomMapping.sliderToZoom(zoomSliderPosition) / ZoomMapping.DEFAULT_ZOOM
        val currentTextSize = (baseGhostBallTextSize * zoomFactor).coerceIn(
            minGhostBallTextSize,
            maxGhostBallTextSize
        )
        paint.textSize = currentTextSize
        val textMetrics = paint.fontMetrics
        val textPadding = 5f * zoomFactor.coerceAtLeast(0.5f)
        val visualTop = y - radius
        val baseline = visualTop - textPadding - textMetrics.descent
        canvas.drawText(text, x, baseline, paint)
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/text/LineTextRenderer.kt ---

package com.hereliesaz.cuedetat.view.renderer.text

import android.graphics.Canvas
import android.graphics.Paint
import android.graphics.PointF
import com.hereliesaz.cuedetat.ui.ZoomMapping
import kotlin.math.cos
import kotlin.math.sin

class LineTextRenderer {

    private val minLineTextSize = 18f
    private val maxLineTextSize = 70f

    fun draw(
        canvas: Canvas,
        text: String,
        origin: PointF,
        lineAngleDegrees: Float,
        distanceFromOrigin: Float,
        angleOffsetDegrees: Float,
        rotationOffsetDegrees: Float,
        paint: Paint,
        baseFontSize: Float,
        zoomSliderPosition: Float
    ) {
        val zoomFactor = ZoomMapping.sliderToZoom(zoomSliderPosition) / ZoomMapping.DEFAULT_ZOOM
        val currentTextSize = (baseFontSize * zoomFactor).coerceIn(minLineTextSize, maxLineTextSize)
        paint.textSize = currentTextSize

        val textAngleRadians = Math.toRadians((lineAngleDegrees + angleOffsetDegrees).toDouble())

        val textX = origin.x + (distanceFromOrigin * cos(textAngleRadians)).toFloat()
        val textY = origin.y + (distanceFromOrigin * sin(textAngleRadians)).toFloat()

        canvas.save()
        canvas.rotate(lineAngleDegrees + rotationOffsetDegrees, textX, textY)
        canvas.drawText(text, textX, textY, paint)
        canvas.restore()
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/util/DrawingUtils.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/view/renderer/util/DrawingUtils.kt
package com.hereliesaz.cuedetat.view.renderer.util

import android.graphics.Matrix
import android.graphics.PointF
import com.hereliesaz.cuedetat.view.model.ILogicalBall
import com.hereliesaz.cuedetat.view.state.OverlayState
import kotlin.math.abs
import kotlin.math.pow
import kotlin.math.sin
import kotlin.math.sqrt

object DrawingUtils {

    data class PerspectiveRadiusInfo(val radius: Float, val lift: Float)

    fun getPerspectiveRadiusAndLift(
        ball: ILogicalBall,
        state: OverlayState
    ): PerspectiveRadiusInfo {
        if (!state.hasInverseMatrix) return PerspectiveRadiusInfo(ball.radius, 0f)

        // Map the logicalPosition to screen coordinates
        val screenCenter = mapPoint(ball.logicalPosition, state.pitchMatrix)
        val logicalHorizontalEdge = PointF(ball.logicalPosition.x + ball.radius, ball.logicalPosition.y)
        val screenHorizontalEdge = mapPoint(logicalHorizontalEdge, state.pitchMatrix)
        val radiusOnScreen = distance(screenCenter, screenHorizontalEdge)
        val lift = radiusOnScreen * abs(sin(Math.toRadians(state.pitchAngle.toDouble()))).toFloat()
        return PerspectiveRadiusInfo(radiusOnScreen, lift)
    }

    fun mapPoint(p: PointF, m: Matrix): PointF {
        val arr = floatArrayOf(p.x, p.y)
        m.mapPoints(arr)
        return PointF(arr[0], arr[1]) // Corrected: Return arr[1] for Y coordinate
    }

    fun distance(p1: PointF, p2: PointF): Float =
        sqrt((p1.x - p2.x).pow(2) + (p1.y - p2.y).pow(2))
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/state/OverlayState.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/view/state/OverlayState.kt
package com.hereliesaz.cuedetat.view.state

import android.graphics.Matrix
import android.graphics.PointF
import androidx.compose.material3.ColorScheme
import androidx.compose.ui.graphics.Color
import com.google.ar.core.Session
import com.hereliesaz.cuedetat.data.FullOrientation
import com.hereliesaz.cuedetat.view.model.ActualCueBall
import com.hereliesaz.cuedetat.view.model.ProtractorUnit

data class OverlayState(
    val viewWidth: Int = 0,
    val viewHeight: Int = 0,
    val pitchAngle: Float = 0f,
    val yawAngle: Float = 0f,
    val rollAngle: Float = 0f,

    val currentOrientation: FullOrientation = FullOrientation(0f, 0f, 0f),
    val anchorOrientation: FullOrientation? = null,
    val pitchMatrix: Matrix = Matrix(),
    val railPitchMatrix: Matrix = Matrix(),
    val valuesChangedSinceReset: Boolean = false,
    val isMoreHelpVisible: Boolean = false,
    val appControlColorScheme: ColorScheme? = null,

    val isSpatiallyLocked: Boolean = false,
    val isImpossibleShot: Boolean = false,
    val hasInverseMatrix: Boolean = false,
    val inversePitchMatrix: Matrix = Matrix(),
    // Updated ProtractorUnit constructor to match new definition
    val protractorUnit: ProtractorUnit = ProtractorUnit(screenCenter = PointF(0f, 0f), radius = 100f, rotationDegrees = 0f, logicalPosition = PointF(0f, 0f)),
    // Updated ActualCueBall constructor to match new definition
    val actualCueBall: ActualCueBall? = null,
    val showProtractor: Boolean = true,
    val showTable: Boolean = false,
    val bankingAimTarget: PointF? = null, // This is a logical point now
    val isBankingMode: Boolean = false,
    val tableRotationDegrees: Float = 0f,
    val areHelpersVisible: Boolean = true,
    val showLuminanceDialog: Boolean = false,
    val luminanceAdjustment: Float = 0f,
    val currentThemeColor: Color = Color.Unspecified,
    val isForceLightMode: Boolean? = null,
    val showTutorialOverlay: Boolean = false,
    val currentTutorialStep: Int = 0,
    val warningText: String? = null,
    val zoomSliderPosition: Float = 0.5f,
    val arSession: Session? = null
)


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/state/ScreenState.kt ---

package com.hereliesaz.cuedetat.view.state

sealed class ToastMessage {
    data class StringResource(val id: Int, val formatArgs: List<Any> = emptyList()) : ToastMessage()
    data class PlainText(val text: String) : ToastMessage()
}

sealed class SingleEvent {
    data class OpenUrl(val url: String) : SingleEvent()
    object ShowDonationDialog : SingleEvent()
}



--- FILE: app/src/main/res/drawable/blank_tansparent.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="684dp"
    android:height="684dp"
    android:viewportWidth="684"
    android:viewportHeight="684">

</vector>


--- FILE: app/src/main/res/drawable/ic_dark_mode_24.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M20,15.31L23.31,12 20,8.69V4h-4.69L12,0.69 8.69,4H4v4.69L0.69,12 4,15.31V20h4.69L12,23.31 15.31,20H20v-4.69zM12,18V6c3.31,0 6,2.69 6,6s-2.69,6 -6,6z"/>
    
</vector>



--- FILE: app/src/main/res/drawable/ic_help_outline_24.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M11,18h2v-2h-2v2zM12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM12,20c-4.41,0 -8,-3.59 -8,-8s3.59,-8 8,-8 8,3.59 8,8 -3.59,8 -8,8zM12,6c-2.21,0 -4,1.79 -4,4h2c0,-1.1 0.9,-2 2,-2s2,0.9 2,2c0,2 -3,1.75 -3,5h2c0,-2.25 3,-2.5 3,-5 0,-2.21 -1.79,-4 -4,-4z"/>
    
</vector>



--- FILE: app/src/main/res/drawable/ic_jump_shot.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:tint="?attr/colorControlNormal"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M12,8l-6,6 1.41,1.41L12,10.83l4.59,4.58L18,14l-6,-6z" />
    <path
        android:fillColor="@android:color/white"
        android:pathData="M12,2a10,10 0 1,0 0,20 10,10 0 1,0 0,-20zm0,18a8,8 0 1,1 0,-16 8,8 0 1,1 0,16z" />
</vector>


--- FILE: app/src/main/res/drawable/ic_launcher_background.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="684"
    android:viewportHeight="684">
    <group
        android:scaleX="0.0056481482"
        android:scaleY="0.0056481482"
        android:translateX="133.38"
        android:translateY="133.38">

    </group>
</vector>


--- FILE: app/src/main/res/drawable/ic_light_mode_24.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M20,15.31L23.31,12 20,8.69V4h-4.69L12,0.69 8.69,4H4v4.69L0.69,12 4,15.31V20h4.69L12,23.31 15.31,20H20v-4.69zM12,18V6c3.31,0 6,2.69 6,6s-2.69,6 -6,6z"/>
    
</vector>



--- FILE: app/src/main/res/drawable/ic_undo_24.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M12.5,8c-2.65,0 -5.05,0.99 -6.9,2.6L2,7v9h9l-3.62,-3.62c1.39,-1.16 3.16,-1.88 5.12,-1.88 3.54,0 6.55,2.31 7.6,5.5l2.37,-0.78C21.08,11.96 17.15,8 12.5,8z"/>
</vector>


--- FILE: app/src/main/res/drawable/ic_zoom_in_24.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M15.5,14h-0.79l-0.28,-0.27C15.41,12.59 16,11.11 16,9.5 16,5.91 13.09,3 9.5,3S3,5.91 3,9.5 5.91,16 9.5,16c1.61,0 3.09,-0.59 4.23,-1.57l0.27,0.28v0.79l5,4.99L20.49,19l-4.99,-5zM9.5,14C7.01,14 5,11.99 5,9.5S7.01,5 9.5,5 14,7.01 14,9.5 11.99,14 9.5,14zM10,7H9v2H7v1h2v2h1v-2h2V9h-2z"/>
</vector>


--- FILE: app/src/main/res/drawable/pool_table.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="612dp"
    android:height="459dp"
    android:viewportWidth="612"
    android:viewportHeight="459">
    <path
        android:fillColor="#00000000"
        android:pathData="M291.15,94.12c2.18,1.96 5.45,3.07 9.53,3.07s7.44,-1.11 9.69,-3.07h237.82c1.03,6.8 6.23,12.28 12.98,13.84l0.02,231.18c-6.34,1.07 -11.49,5.56 -13.39,11.46l-239.9,-0c-2.04,-0.98 -4.5,-1.51 -7.22,-1.52 -2.74,-0 -5.19,0.53 -7.2,1.52l-238.04,-0c-1.77,-5.48 -6.33,-9.74 -12.05,-11.18v-232.83c5.77,-1.83 10.21,-6.58 11.47,-12.47h236.29Z"
        android:strokeWidth="5"
        android:strokeColor="#047a0c" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29.51,81.2c9.31,-8.8 20.78,7.46 29.95,14.18l228.02,-1.34c1.45,-1.45 0.66,-21.59 13.2,-21.53s10.49,21.4 12.84,21.87l231.29,0.66c2.84,-0.66 22.75,-24.98 31.33,-14.16s-7.13,19.79 -14.84,30.31l-0.34,226c6.35,5.81 23.8,19.67 15.28,28.02s-24.88,-9.2 -31.75,-13.86c-15.98,-0.08 -130.12,-0.74 -231.29,-1.32 -1.14,8.51 -2.62,21.07 -12.52,21.43s-10.2,-7.25 -12.84,-21.09L58.11,352.6C47.2,361.22 36.18,374.48 28.47,365.21s8.66,-20.65 14.79,-28.16l0.4,-225.51c-7.6,-9.99 -23.46,-21.54 -14.16,-30.33Z"
        android:strokeWidth="5"
        android:strokeColor="#19f604" />
</vector>



--- FILE: app/src/main/res/drawable/seekbar_custom_track.xml ---

<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- Background track -->
    <item android:id="@android:id/background">
        <shape android:shape="rectangle">
            <corners android:radius="4dp" /> <!-- Adjust for desired roundness -->
            <solid android:color="?attr/colorSurfaceVariant" />
            <size android:height="8dp" /> <!-- This is the THICKNESS of the track drawable -->
        </shape>
    </item>

    <!-- Progress track -->
    <item android:id="@android:id/progress">
        <scale android:scaleWidth="100%">
            <shape android:shape="rectangle">
                <corners android:radius="4dp" />
                <solid android:color="?attr/colorPrimary" />
                <size android:height="8dp" /> <!-- Must match background thickness -->
            </shape>
        </scale>
    </item>

    <!-- Secondary progress (optional, remove if not needed) -->
    <item android:id="@android:id/secondaryProgress">
        <scale android:scaleWidth="100%">
            <shape android:shape="rectangle">
                <corners android:radius="4dp"/>
                <solid android:color="@android:color/transparent"/> <!-- Or a muted color -->
                <size android:height="8dp"/>
            </shape>
        </scale>
    </item>
</layer-list>


--- FILE: app/src/main/res/font/barbaro_family.xml ---

<?xml version="1.0" encoding="utf-8"?>
<font-family xmlns:android="http://schemas.android.com/apk/res/android">
    <font
        android:font="@font/barbaro"
        android:fontStyle="normal"
        android:fontWeight="400" />
</font-family>



--- FILE: app/src/main/res/layout/activity_main.xml ---

<?xml version="1.0" encoding="utf-8"?>
<FrameLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/activity_main_root"
    android:layout_width="match_parent"
    android:layout_height="match_parent"

    >

    <androidx.camera.view.PreviewView
        android:id="@+id/cameraPreviewView"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <com.hereliesaz.poolprotractor.ProtractorOverlayView
        android:id="@+id/protractorOverlayView"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/controls_relative_layout"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:id="@+id/zoomControlsLayout"
            android:layout_width="55dp"
            android:layout_height="486dp"
            android:layout_marginEnd="8dp"
            android:gravity="center_vertical"
            android:layoutMode="opticalBounds"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.974"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintVertical_bias="0.497">

            <ImageView
                android:id="@+id/zoomIcon"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginBottom="46dp"
                android:contentDescription="@string/zoom_icon"
                android:padding="8dp"
                android:src="@drawable/ic_zoom_in_24"
                android:visibility="visible"
                app:layout_constraintBottom_toTopOf="@+id/zoomSlider"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintHorizontal_bias="0.5"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent"
                app:tint="?attr/colorControlNormal"
                tools:ignore="TouchTargetSizeCheck"
                tools:visibility="visible" />

            <SeekBar
                android:id="@+id/zoomSlider"
                android:layout_width="24dp"
                android:layout_height="400dp"
                android:max="100"
                android:progress="50"
                android:progressDrawable="@drawable/seekbar_custom_track"
                android:thumbTint="?attr/colorPrimary"
                android:rotation="90"
                android:visibility="visible"
                app:layout_constraintBottom_toBottomOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintHorizontal_bias="0.5"
                app:layout_constraintStart_toStartOf="parent" />

        </androidx.constraintlayout.widget.ConstraintLayout>

        <com.google.android.material.floatingactionbutton.FloatingActionButton
            android:id="@+id/resetButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginEnd="24dp"
            android:layout_marginBottom="24dp"
            android:contentDescription="@string/reset_view"
            android:src="@drawable/ic_undo_24"
            app:backgroundTint="?attr/colorPrimaryContainer"
            app:fabSize="mini"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:tint="?attr/colorOnPrimaryContainer" />

        <com.google.android.material.floatingactionbutton.FloatingActionButton
            android:id="@+id/helpButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="24dp"
            android:layout_marginBottom="24dp"
            android:contentDescription="@string/toggle_help_lines"
            android:src="@drawable/ic_help_outline_24"
            app:backgroundTint="?attr/colorSecondaryContainer"
            app:fabSize="mini"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:tint="?attr/colorOnSecondaryContainer" />

    </androidx.constraintlayout.widget.ConstraintLayout>

    <androidx.compose.ui.platform.ComposeView
        android:id="@+id/composeThemeView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:visibility="gone" />

</FrameLayout>


--- FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml ---

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/logo_cue_detat" />
    <foreground android:drawable="@drawable/logo_cue_detat" />
</adaptive-icon>


--- FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml ---

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/logo_cue_detat" />
    <foreground android:drawable="@drawable/logo_cue_detat" />
</adaptive-icon>


--- FILE: app/src/main/res/values/colors.xml ---

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>

    <color name="accent_gold">#FFBDA559</color>
    <color name="darker_accent_gold">#FF968141</color>
    <color name="muted_maroon">#FF7E344D</color>
    <color name="muted_gray">#FFA9A9A9</color>
    <color name="warning_red">#FFC05D5D</color>
    <color name="acid_patina">#FF8EA96E</color>
    <color name="rusted_ember">#FFA85632</color>
    <color name="oil_slick">#FF555E5C</color>
    <color name="oxidized_brass">#FFB98E5A</color>
    <color name="violet_residue">#FF8374A9</color>
    <color name="scorched_umber">#FF4A2E1C</color>
    <color name="cold_ash">#FFA6A6A6</color>
    <color name="target_acid">#FFA4FF00</color>
    <color name="tactical_rust">#FFC1440E</color>
    <color name="concrete_vein">#FF7D7D7D</color>
    <color name="molten_brass">#FFD9821B</color>
    <color name="guerilla_violet">#FF6E44FF</color>
    <color name="ashline_fog">#FFBFBFBF</color>
    <color name="rebel_yellow">#FFFFD000</color>
    <color name="burnt_brass">#FF8A5A00</color>
    <color name="smokey_grunge">#FF3B3B3B</color>
    <color name="target_gold">#FFFFB700</color>
    <color name="mellow_yellow">#FFD4AF37</color>
    <color name="aged_amber">#FFC69026</color>
    <color name="smoked_ochre">#FF9B6A17</color>
    <color name="rogue_umber">#FF5C2E00</color>
    <color name="steel_ash">#FF4A4A4A</color>
    <color name="gunmetal_fog">#FF6A6A6A</color>
    <color name="faint_goldmist">#FFF0DFAF</color>
    <color name="static_clay">#FFCEBCA8</color>
    <color name="dead_channel">#FF817F8D</color>
    <color name="smoke_signal">#FF5A5D63</color>
    <color name="charred_olive">#FF484C3E</color>
    <color name="pyrrhic_rust">#FF9C4E2C</color>
    <color name="ash_wasp">#FFADA44F</color>
    <color name="low_fidelity_blue">#FF5C6E83</color>
    <color name="iced_opal">#FFD5E4E2</color>
    <color name="soft_interference">#FFB6A4D6</color>
    <color name="static_mint">#FF9DDDC8</color>
    <color name="corroded_sky">#FF8A99B2</color>
    <color name="halogen_dusk">#FFD3B18A</color>
    <color name="fever_slate">#FF6B7079</color>
    <color name="tarnished_mauve">#FFA08C98</color>
</resources>


--- FILE: app/src/main/res/values/strings.xml ---

<resources>
    <string name="app_name"> Cue D\’état</string>
    <string name="zoom_icon">Zoom Icon</string>
    <string name="reset_view">Reset View</string>
    <string name="show_helpers">WTF is all this?</string>
    <string name="hide_helpers">Okay, I get it</string>
    <string name="permission_denied">Camera permission is required to use this app.</string>
    <string name="toggle_help_lines">Help</string>

    <!-- Update Checker -->
    <string name="update_check_failed">Update check failed.</string>
    <string name="update_no_new_release">You are on the latest version.</string>
    <string name="update_available">Version %1$s is available!</string>


    <!-- Insulting Warnings -->
    <string name="warning_message_area">Sarcastic Warning Message Area</string>
    <string name="tagline">May your shot be better than your excuses.</string>

    <string-array name="insulting_warnings">
        <item>Physics called. It wants your law degree back.</item>
        <item>A fine example of geometric optimism.</item>
        <item>Aiming is not a suggestion.</item>
        <item>Even the chalk finds your methods dusty.</item>
        <item>Let\'s list other things you could be doing instead. There\'s knitting, and… </item>
        <item>Talent not detected.</item>
        <item>Can\'t even scratch common sense.</item>
        <item>There are no shots over there. I checked.</item>
        <item>Do you need a bigger phone or a smaller table?</item>
        <item>Your Mrs. called, she wants her title back.</item>
        <item>\'A do not, this is,\' says Yoda.</item>
        <item>Nope.</item>
        <item>Not happening.</item>
        <item>Won\'t work.</item>
        <item>Try harder.</item>
        <item>PLEASE try harder.</item>
        <item>Try gooder?</item>
        <item>Try... better. That\'s the one I was looking for. No, not your shot. The word I was looking for.</item>
        <item>No.</item>
        <item>Physics says no.</item>
        <item>God says no.</item>
        <item>Your mom says she\'s proud no matter what.</item>
        <item>Your father says nothing.</item>
        <item>Hey batter, batter…</item>
        <item>In the beginning, God created a better shot.</item>
        <item>Am I crying from laughing, or is this just sad?</item>
        <item>Am I pretty, yet?</item>
        <item>Do you even know how to pool, bro?</item>
        <item>That\'s… an angle. Not a good one.</item>
        <item>I can\'t be more disappointed than your dad.</item>
        <item>Consult a physicist. Or a therapist.</item>
        <item>Maybe if you put your phone down once in a while....</item>
    </string-array>
</resources>



--- FILE: app/src/main/res/values/themes.xml ---

<resources>
    <!-- Base application theme. -->
    <!-- For Material 3 components like FloatingActionButton, prefer a Material3 theme -->
    <style name="Theme.CueDetat" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Primary brand color. -->
        <item name="colorPrimary">@color/purple_500</item>
        <!-- <item name="colorPrimaryVariant">@color/purple_700</item> --> <!-- M3 uses colorPrimaryContainer, etc. -->
        <item name="colorOnPrimary">@color/white</item>
        <!-- Secondary brand color. -->
        <item name="colorSecondary">@color/teal_200</item>
        <!-- <item name="colorSecondaryVariant">@color/teal_700</item> --> <!-- M3 uses colorSecondaryContainer, etc. -->
        <item name="colorOnSecondary">@color/black</item>
        <!-- Status bar color. -->
        <item name="android:statusBarColor">?attr/colorPrimary</item> <!-- Or a specific color -->
        <!-- Customize your theme here. -->
        <item name="android:windowLightStatusBar">true
        </item> <!-- true for light themes, false for dark -->
        <item name="android:navigationBarColor">@android:color/transparent</item>
    </style>
</resources>


--- FILE: app/src/main/res/xml/backup_rules.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
<!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>


--- FILE: app/src/main/res/xml/data_extraction_rules.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>


--- FILE: Developers_Guide.md ---

Project Development Guide: Cue D'état
This document outlines the core architecture, concepts, and future direction of the Cue D'état
application. It serves as a single source of truth to prevent regressions and ensure consistent
development. Consider it a note-to-self for the AI working on this project, and keep it updated
accordingly with ANYTHING that will be useful to the next AI in the next chat.

NEVER change what is written here, only add to it. Always include anything that you note to yourself as a matter of clarification.

## 1. Core Concepts & Official Terminology
A precise vocabulary is critical. The following terms are to be used exclusively.

* **Logical Plane:** An abstract, infinite 2D coordinate system (like graph paper) where all aiming
  geometry is defined and calculated. This is the "world" of the simulation. The origin (0,0) of
  this plane is conceptually at the top-left, but pivot points for transformations are usually
  the center of the view (`viewWidth/2, viewHeight/2` in logical units).
* **Screen Plane:** The physical 2D plane of the device's screen. This is the "window" through
  which the user views the Logical Plane.
* **Perspective Transformation:** The process, primarily handled by a `pitchMatrix` (and
  `railPitchMatrix` for lifted elements), of projecting the Logical Plane onto the Screen Plane
  to create the 3D illusion. Crucially, this transformation must always pivot around the absolute
  center of the view (logical coordinates `viewWidth/2, viewHeight/2` map to screen coordinates
  `viewWidth/2, viewHeight/2` as the pivot).
* **Global Zoom:** A single zoom factor, controlled by `zoomSliderPosition` and `ZoomMapping.kt`,
  that determines the base logical radius for primary interactive elements like the
  `ProtractorUnit.radius` and `ActualCueBall.radius`.
* **Full Orientation:** Represents the phone's orientation in 3D space, comprising yaw, pitch, and
  roll angles, typically obtained from `Sensor.TYPE_ROTATION_VECTOR`. In `OverlayState`,
  `currentOrientation.pitch` is stored as `-sensorPitch` for consistency with earlier implementations.
* **Spatial Lock (`isSpatiallyLocked`):** A mode where:
    * User touch input for moving or rotating logical elements (`ProtractorUnit`, `ActualCueBall`,
      `tableRotationDegrees`, `bankingAimTarget`) is disabled.
    * The visual rendering of the Logical Plane attempts to keep elements appearing fixed in
      real-world space relative to their orientation at the moment "Lock" was engaged.
    * **Unlocked View:** Primarily responds to `currentOrientation.pitch` (forward/backward phone
      tilt). Phone roll and yaw have minimal/no direct impact on the rendered plane's orientation.
    * **Lock Engagement:** When "Lock" is pressed, the phone's `currentOrientation` is stored as
      `anchorOrientation`. The visual perspective *does not change at this instant*.
    * **Locked View (Phone Moving):** The `pitchMatrix` is calculated such that the camera
      counter-rotates against the phone's movement (`currentOrientation - anchorOrientation`) in
      all three axes (pitch, roll, yaw). This is achieved by:
        1. Setting the camera's base rotation to match the `anchorOrientation.pitch` (to align
           with the unlocked view's primary axis at the moment of lock).
        2. Calculating deltas: `deltaRoll = currentOrientation.roll - anchorOrientation.roll`,
           `deltaYaw = currentOrientation.yaw - anchorOrientation.yaw`, and
           `deltaPitch_additional = currentOrientation.pitch - anchorOrientation.pitch`.
        3. Applying counter-rotations to the camera for these deltas (e.g., `camera.rotateZ(-deltaRoll)`).
* **On-Screen Elements:**

    * **Protractor Unit (Protractor Mode Only):** The primary aiming apparatus for cut shots.
        * **Target Ball (Protractor):** The logical and visual center of the `ProtractorUnit`. Its
          logical position can be user-moved (if not spatially locked). Its logical radius is set by
          Global Zoom (`state.protractorUnit.radius`).
        * **Ghost Cue Ball (Protractor):** The second ball in the `ProtractorUnit`. Its *absolute
          logical position* (`state.protractorUnit.protractorCueBallCenter`) is calculated by the
          `ProtractorUnit` class based on the Target Ball's center, the unit's radius, and
          `state.protractorUnit.rotationDegrees`. Its logical radius is the same as the Target
          Ball's.
          Both Target and Ghost Cue Ball have a 2D logical representation (drawn by
          `BallRenderer.drawLogicalBalls`) and a 3D screen-space "ghost" effect (drawn by
          `BallRenderer.drawScreenSpaceBalls` with lift).
    * **ActualCueBall:** A user-draggable logical ball (if not spatially locked).
        * **In Protractor Mode (Optional):** Can be toggled by the user. Used for visualizing shots
          originating from a specific point. Rendered with a "lifted" 3D ghost effect.
          Its logical radius (`state.actualCueBall.radius`) is set by Global Zoom.
        * **In Banking Mode (Mandatory, becomes the "Banking Ball"):** Always visible and represents
          the
          cue ball on the table. Its logical radius is set by Global Zoom. Rendered *on* the table
          plane.
    * **Table Visuals (Banking Mode Only):** Wireframe representation of the pool table surface,
      rails,
      pockets, and diamonds.
        * Logically anchored at the view's center (`viewWidth/2, viewHeight/2`).
        * Its logical scale is determined by `tableToBallRatio * ActualCueBall.radius`.
        * The table surface is rendered on the `pitchMatrix`. Rails are rendered on the
          `railPitchMatrix`.
        * Can be rotated by the user via `tableRotationDegrees` (if not spatially locked).
    * **Lines:** (Behavior when spatially locked needs to ensure they respect the fixed logical
      elements)
        * **Protractor Shot Line (Protractor Mode):** From `ActualCueBall.center` (if visible, else
          a default
          screen anchor's logical projection) through the `ProtractorUnit.GhostCueBall`'s absolute
          logical center. Drawn in absolute logical coordinates.
        * **Aiming Line (Protractor Mode):** From `ProtractorUnit.GhostCueBall`'s local position
          through `ProtractorUnit.TargetBall`'s local position. Drawn relative to the transformed
          ProtractorUnit canvas.
        * **Tangent Lines & Angle Lines (Protractor Mode):** Relative to the transformed
          ProtractorUnit canvas.
        * **Banking Shot Line (Banking Mode):** From `ActualCueBall.center` towards
          `bankingAimTarget`, with reflections off logical table boundaries. Drawn in absolute
          logical coordinates.

## 2. Architectural Model & File Structure

The architecture strictly separates data, logic, and presentation.
com/hereliesaz/cuedetat/
├── data/
│ ├── SensorRepository.kt // Provides FullOrientation (yaw, pitch, roll).
│ └── ... (GithubRepository, UpdateChecker)
├── view/
│ ├── model/
│ │ ├── LogicalPlane.kt // Defines ProtractorUnit, ActualCueBall.
│ │ └── Perspective.kt // Manages 3D transformation. Crucial for Spatial Lock.
│ ├── renderer/
│ │ ├── util/
│ │ │ └── DrawingUtils.kt
│ │ ├── BallRenderer.kt
│ │ ├── LineRenderer.kt
│ │ ├── TableRenderer.kt
│ │ ├── RailRenderer.kt
│ │ └── OverlayRenderer.kt
│ ├── state/
│ │ ├── OverlayState.kt // Holds `currentOrientation`, `anchorOrientation`, `isSpatiallyLocked`.
│ │ └── ScreenState.kt
│ └── ProtractorOverlayView.kt // Handles touch input; respects `isSpatiallyLocked`.
├── domain/
│ ├── StateReducer.kt // Manages `isSpatiallyLocked`, sets `anchorOrientation`. Ignores placement
// events when locked.
│ └── UpdateStateUseCase.kt // Passes orientations and lock state to `Perspective.kt`.
└── ui/
├── composables/
├── MainViewModel.kt // Receives `FullOrientationChanged`, orchestrates state.
├── MainScreen.kt // Contains "Lock" button, passes state to `ProtractorOverlayView`.
└── MainScreenEvent.kt // Includes `ToggleSpatialLock`, `FullOrientationChanged`.

**The Golden Rule**: ViewModel orchestrates. StateReducer computes state. UpdateStateUseCase
computes derived state. Renderers display.

## 3. Rendering Pipeline (Conceptual) & Spatial Lock Integration

1.  **Sensor Input (`SensorRepository`)**: Provides continuous `FullOrientation` (yaw, pitch, roll)
    data.
2.  **ViewModel (`MainViewModel`)**: Receives `FullOrientationChanged` events and passes them to the
    `StateReducer` via `updateContinuousState`.
3.  **StateReducer (`StateReducer`)**:
    *   Updates `OverlayState.currentOrientation` with the latest sensor data.
    *   Handles `ToggleSpatialLock`:
        *   If locking: sets `isSpatiallyLocked = true` and
            `anchorOrientation = currentState.currentOrientation`.
        *   If unlocking: sets `isSpatiallyLocked = false` and `anchorOrientation = null`.
    *   If `isSpatiallyLocked == true`, it ignores most `MainScreenEvent` types that attempt to
        change the logical position or rotation of elements (e.g., `RotationChanged`,
        `UpdateLogicalUnitPosition`, etc.). Events like zoom, mode changes, and sensor updates are
        still processed.
4.  **UpdateStateUseCase (`UpdateStateUseCase`)**:
    *   Receives the `OverlayState` (containing `currentOrientation`, `anchorOrientation`,
        `isSpatiallyLocked`).
    *   Calls `Perspective.createPitchMatrix`, passing all three: `currentOrientation`,
        `anchorOrientation`, and `isSpatiallyLocked`.
5.  **Perspective Transformation (`Perspective.createPitchMatrix`)**:
    *   **If Unlocked (`isSpatiallyLocked == false` or `anchorOrientation == null`):**
        *   The camera is rotated *only* based on `currentOrientation.pitch` (forward/backward
            tilt). Roll and yaw from the phone do not directly influence the main plane's rendering
            matrix.
    *   **If Locked (`isSpatiallyLocked == true` and `anchorOrientation != null`):**
        1.  The camera's base orientation is set using `camera.rotateX(anchorOrientation.pitch)`.
            This ensures the initial locked view matches the primary tilt of the unlocked view,
            preventing a visual jump in pitch when the lock is engaged.
        2.  Deltas are calculated: `deltaRoll = currentOrientation.roll - anchorOrientation.roll`,
            `deltaYaw = currentOrientation.yaw - anchorOrientation.yaw`, and
            `deltaPitch_additional = currentOrientation.pitch - anchorOrientation.pitch`.
        3.  These deltas are then applied as *counter-rotations* to the camera (which is already
            pitched by `anchorOrientation.pitch`). For example, `camera.rotateZ(-deltaRoll)`
            counteracts phone roll. The goal is to make the logical elements appear fixed in world
            space relative to their configuration at the moment of lock. The exact signs and order
            of applying delta rotations (e.g., `Z, X, Y` or `Z, Y, X` for the deltas) are critical
            and may require empirical tuning for intuitive feel, especially yaw.
6.  **ViewModel (Continued)**: Emits the fully processed `OverlayState` (with matrices) to the UI.
7.  **Renderer (`ProtractorOverlayView` via `OverlayRenderer`):**
    *   Uses the `pitchMatrix` (and `railPitchMatrix`) from `OverlayState` to draw all logical
        elements. Since their logical coordinates are fixed (when locked) and the matrix now reflects
        the counter-rotated camera view, the elements should appear spatially anchored.
    *   Touch input for moving/rotating elements is disabled by `ProtractorOverlayView` if
        `canonicalState.isSpatiallyLocked` is true (except for scaling).

## 4. Core Operational Modes & Entity Behavior

(Protractor Mode, Banking Mode, Global Zoom and Radii sections remain largely the same but should be understood in the context that user manipulation of element positions/rotations is disabled when `isSpatiallyLocked` is true.)

## 5. Key Implementation Learnings & Mandates (Chronological where possible)

(Existing points A-N remain relevant.)

* **O. Spatial Lock Implementation Details:**
    *   `SensorRepository` now provides `FullOrientation` (yaw, pitch, roll).
    *   `OverlayState` stores `currentOrientation` and `anchorOrientation` (when locked).
    *   `StateReducer`:
        *   On `ToggleSpatialLock` to true: `isSpatiallyLocked = true`,
            `anchorOrientation = currentOrientation`.
        *   On `ToggleSpatialLock` to false: `isSpatiallyLocked = false`, `anchorOrientation = null`.
        *   When locked, ignores events that would change logical positions/rotations of elements.
    *   `ProtractorOverlayView`: Disables touch manipulations (except zoom) when locked.
    *   `Perspective.createPitchMatrix`:
        *   Unlocked: Uses `currentOrientation.pitch` only.
        *   Locked: Establishes view with `anchorOrientation.pitch`. Then applies counter-rotations
            based on `currentOrientation - anchorOrientation` for pitch, roll, and yaw to achieve
            world-space stability. Fine-tuning of rotation order and signs (especially for yaw) is
            critical for intuitive feel.
* **P. Avoiding Visual "Jump" on Lock:** The strategy for "Lock" mode in `Perspective.kt` aims to
  prevent a jarring visual change when the lock is engaged by ensuring the initial locked camera
  perspective (based on `anchorOrientation.pitch`) aligns with the unlocked view's primary
  rotational axis. Full 3D stabilization (roll, yaw) then activates relative to this initial
  locked view.

## 6. Future Development Plan

* **Bank/Kick Shot Calculator (Refinement):**
    * Improve reflection logic in `LineRenderer` for more than 2 banks.
    * Consider pocket geometry for line termination/success.
* **Object/Table Detection (Computer Vision):**
    * Use OpenCV or ML Kit to detect table boundaries and ball positions.
    * Project screen coordinates to Logical Plane to auto-place `ActualCueBall`.
* **"English" / Spin Visualization:** Add UI controls to simulate sidespin, altering tangent lines
  or shot paths.
* **Tutorial Enhancements:** Make the tutorial more interactive, highlighting UI elements
  corresponding to the current step.
* **Spatial Lock Refinement:**
    *   Empirically tune the signs and order of applying delta rotations (pitch, roll, yaw) in
        `Perspective.kt` for the most intuitive "world lock" feel.
    *   Consider using Quaternions instead of Euler angles in `Perspective.kt` for more robust
        3D rotations, avoiding gimbal lock and simplifying combined rotations. This is a significant
        refactor.
    *   Investigate if ARCore or similar AR SDKs could provide more stable world tracking if sensor-only
        data proves too drifty for reliable spatial anchoring over time.






--- FILE: gradle.properties ---

# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true

# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official

# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true
org.gradle.configuration-cache=true
kapt.incremental.apt=false
kotlin.daemon.useFallbackStrategy=false


--- FILE: gradlew ---

#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"



--- FILE: gradlew.bat ---

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



--- FILE: README.md ---

# Cue D’état - An IRL Billiards Aiming Assistant for Android

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
![GitHub Release](https://img.shields.io/github/v/release/hereliesaz/CueDetat?include_prereleases&display_name=release)


**_May your aim be truer than your excuses._**


**Cue D’état** is an Android app to ostensibly help billiards players line up and aim, determine shot angles, make cut shots, understand the cue ball tangent, improve their geometric understanding of the game. Maybe get called a cheater, even though using this app is entirely legal. At the very least, get yourself a high-tech understanding of how bad you are at pool.

It uses your phone's camera and orientation sensors to overlay a dynamic protractor and aiming guide onto the real-world view of a pool table.

**(Warning: May induce an inflated sense of skill, followed by the crushing reality of physics. Use with a healthy dose of self-deprecating humor.)**



## Features

*   **Live Camera Augmented Reality Overlay:**
    *   See the guides directly on your pool game.
    *   Designed for easy one or two-handed use. 
*   **Dynamic Protractor:**
    *   See where the balls will go before you hit them.  
    *   Rotates and zooms with on-screen gestures, tilts using the gyroscope. 
*   **Cue Ball & Target Ball Representation:**
    *   Simulated "ghost balls" on a projected plane.
    *   Visual feedback for aiming path and potential collisions.
*   **Pitch-Adjusted Perspective:** The protractor plane tilts based on your phone's orientation for a three-dimensional augmented reality.
*   **Where will the Cue ball go?** Visualizes the tangent line and the resulting cue ball path if English (sidespin) were applied.
*   **Guided Shots** Guide lines extend from the target ball to line up with your table's pockets.
*   **VERY Helpful Help:**
    *   Labels for key lines and what to do with them.
    *   Instructions better than Ikea's.
    *   Toggleable Help visibility for a cleaner view.
    *   Uplifting messages of slightly disdainful encouragement.



## Screenshots Placeholder

*   Pretend this is a screenshot.
*   This, too.
*   Imagine looking at a photo of the app in use.
*   Note the craft.
*   The flippant attitude towards detail.
*   I'm a genieaouxess.
*   And this is a photo from a vacation two years ago that I accidentally pretend included.



## How It Works: The Gore. The Details.

1.  **Camera Preview:** Uses CameraX to display a live feed from the device camera.
2.  **Sensor Input:** Leverages the `TYPE_ROTATION_VECTOR` sensor to determine the phone's pitch, roll, and yaw. The pitch is primarily used to tilt the 2D protractor plane. An offset is applied to account for natural phone holding angles.
3.  **Custom View (`ProtractorOverlayView`):** All guides and visual elements are drawn on a custom `View` that overlays the camera preview.
4.  **Drawing Logic:**
    *   **Protractor Plane:** A logical 2D plane is defined. Circles representing the cue and target ball positions, protractor angle lines, and deflection lines are drawn on this plane.
    *   **3D Projection (Simplified):** An `android.graphics.Camera` object is used to apply an X-axis rotation (based on phone pitch) to this logical plane, creating a 3D perspective effect. This transformed matrix is then applied to the canvas.
    *   **Ghost Balls:** Screen-space circles are drawn to represent the "3D" position of the cue and target balls. Their Y-offset from the projected plane centers is scaled by the sine of the pitch angle (raised to a power for a more pronounced effect) to simulate them floating above the plane.
    *   **Helper Text:** Text labels are drawn either on the (lifted) protractor plane or directly in screen space, with basic collision avoidance and dynamic sizing.
5.  **Gesture Handling:**
    *   `ScaleGestureDetector` for pinch-to-zoom.
    *   `MotionEvent` tracking for single-finger pan-to-rotate.
6.  **Theming:** Uses Jetpack Compose for Material 3 theming, with color values then passed to the custom view's `Paint` objects.



## Known Quirks & Future Delusions

*   **Text Collision Avoidance:** Current implementation is basic (first-drawn wins space).
*   **A Virtual Table for Virtually Useful Bank Shot Projection:** Using more sophisticated dynamic layout involving a line drawing of a billiards table will come someday.
*   **True 3D Rendering:** This app fakes 3D with 2D canvas tricks. Moving to OpenGL ES or a 3D engine like Filament would allow for actual 3D models and lighting, but would also drastically increase complexity. And probably anxiety. But probably not usefulness.
*   **Ball, Table and Pocket Detection:** The ultimate fantasy. Using CV to detect the table, balls, and pockets automatically. For now, you are the CV.
*   **Insulting Warnings:** The pool of sarcastic remarks is finite. Contributions welcome if they tickle me the required level of pink.
*   **Performance:** Drawing many complex paths and text elements on every frame can be demanding. Optimizations are an ongoing battle. And yet, somehow, it feels more like a you-problem.



## License

Distributed under the MIT License. Basically, completely free to use however you'd like, just gimme a shoutout. I make money making art. So, like this:
Cue D’état by HereLiesAz (https://instagram.com/hereliesaz)


## Acknowledgments (of Who to Blame)

*   The ghosts of billiards past whose missed shots inspired this.
*   The people I've tried to teach all these things.
*   Physics. And geometry. Where my hoes at?!

---




--- NON-TEXT ASSET FILE LIST (Content not included) ---

The following files were found but their content was not included to save space.

This list helps the AI understand available resources.


- app/src/main/ic_launcher-playstore.png

- app/src/main/res/drawable/ic_launcher.webp

- app/src/main/res/drawable/logo_cue_detat.webp

- app/src/main/res/font/barbaro.ttf

- app/src/main/res/mipmap-hdpi/ic_launcher.webp

- app/src/main/res/mipmap-hdpi/ic_launcher_background.webp

- app/src/main/res/mipmap-hdpi/ic_launcher_foreground.webp

- app/src/main/res/mipmap-hdpi/ic_launcher_round.webp

- app/src/main/res/mipmap-mdpi/ic_launcher.webp

- app/src/main/res/mipmap-mdpi/ic_launcher_background.webp

- app/src/main/res/mipmap-mdpi/ic_launcher_foreground.webp

- app/src/main/res/mipmap-mdpi/ic_launcher_round.webp

- app/src/main/res/mipmap-xhdpi/ic_launcher.webp

- app/src/main/res/mipmap-xhdpi/ic_launcher_background.webp

- app/src/main/res/mipmap-xhdpi/ic_launcher_foreground.webp

- app/src/main/res/mipmap-xhdpi/ic_launcher_round.webp

- app/src/main/res/mipmap-xxhdpi/ic_launcher.webp

- app/src/main/res/mipmap-xxhdpi/ic_launcher_background.webp

- app/src/main/res/mipmap-xxhdpi/ic_launcher_foreground.webp

- app/src/main/res/mipmap-xxhdpi/ic_launcher_round.webp

- app/src/main/res/mipmap-xxxhdpi/ic_launcher.webp

- app/src/main/res/mipmap-xxxhdpi/ic_launcher_background.webp

- app/src/main/res/mipmap-xxxhdpi/ic_launcher_foreground.webp

- app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.webp




--- END OF BACKUP ---

