Android Project Backup for AI Analysis

Generated on: 2025-06-21 17:31:15

Project root: C:\Users\azrie\AndroidStudioProjects\CueD8at

Platform: Windows_NT / PowerShell 5.1.27881.1000

---

This document contains a concatenation of relevant source and configuration files.

Each file begins with a '--- FILE: [relative_path] ---' header.

A list of non-text assets (e.g., images, fonts) is included at the end.



--- FILE: .github/workflows/blank.yml ---

# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.



--- FILE: .gitignore ---

*.iml
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
.DS_Store
/build
/captures
.externalNativeBuild
.cxx
local.properties



--- FILE: .idea/.gitignore ---

# Default ignored files
/shelf/
/workspace.xml



--- FILE: .idea/AndroidProjectSystem.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AndroidProjectSystem">
    <option name="providerId" value="com.android.tools.idea.GradleProjectSystem" />
  </component>
</project>


--- FILE: .idea/appInsightsSettings.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AppInsightsSettings">
    <option name="selectedTabId" value="Firebase Crashlytics" />
    <option name="tabSettings">
      <map>
        <entry key="Firebase Crashlytics">
          <value>
            <InsightsFilterSettings>
              <option name="connection">
                <ConnectionSetting>
                  <option name="appId" value="PLACEHOLDER" />
                  <option name="mobileSdkAppId" value="" />
                  <option name="projectId" value="" />
                  <option name="projectNumber" value="" />
                </ConnectionSetting>
              </option>
              <option name="signal" value="SIGNAL_UNSPECIFIED" />
              <option name="timeIntervalDays" value="THIRTY_DAYS" />
              <option name="visibilityType" value="ALL" />
            </InsightsFilterSettings>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>


--- FILE: .idea/assetWizardSettings.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="WizardSettings">
    <option name="children">
      <map>
        <entry key="imageWizard">
          <value>
            <PersistentState>
              <option name="children">
                <map>
                  <entry key="imageAssetPanel">
                    <value>
                      <PersistentState>
                        <option name="children">
                          <map>
                            <entry key="actionbar">
                              <value>
                                <PersistentState>
                                  <option name="children">
                                    <map>
                                      <entry key="clipArt">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="imagePath" value="C:\Users\azrie\AppData\Local\Temp\ic_android_black_24dp.xml" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="text">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="textAsset">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                    </map>
                                  </option>
                                </PersistentState>
                              </value>
                            </entry>
                            <entry key="launcher">
                              <value>
                                <PersistentState>
                                  <option name="children">
                                    <map>
                                      <entry key="backgroundImage">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="imagePath" value="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\drawable\logo_cue_detat.webp" />
                                                <entry key="scalingPercent" value="61" />
                                                <entry key="trimmed" value="true" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundClipArt">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="imagePath" value="C:\Users\azrie\AppData\Local\Temp\ic_android_black_24dp.xml" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundImage">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="imagePath" value="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\drawable\logo_cue_detat.webp" />
                                                <entry key="trimmed" value="true" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundText">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="fontFamily" value="Barbaro" />
                                                <entry key="trimmed" value="true" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundTextAsset">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="fontFamily" value="Barbaro" />
                                                <entry key="trimmed" value="true" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                    </map>
                                  </option>
                                  <option name="values">
                                    <map>
                                      <entry key="backgroundColor" value="000000" />
                                      <entry key="generateWebpIcons" value="false" />
                                      <entry key="legacyIconShape" value="NONE" />
                                      <entry key="previewDensity" value="xxxhdpi" />
                                    </map>
                                  </option>
                                </PersistentState>
                              </value>
                            </entry>
                            <entry key="launcherLegacy">
                              <value>
                                <PersistentState>
                                  <option name="children">
                                    <map>
                                      <entry key="clipArt">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="imagePath" value="C:\Users\azrie\AppData\Local\Temp\ic_android_black_24dp.xml" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="text">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="textAsset">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                    </map>
                                  </option>
                                </PersistentState>
                              </value>
                            </entry>
                            <entry key="notification">
                              <value>
                                <PersistentState>
                                  <option name="children">
                                    <map>
                                      <entry key="clipArt">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                                <entry key="imagePath" value="C:\Users\azrie\AppData\Local\Temp\ic_android_black_24dp.xml" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="text">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="textAsset">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                    </map>
                                  </option>
                                </PersistentState>
                              </value>
                            </entry>
                            <entry key="tvBanner">
                              <value>
                                <PersistentState>
                                  <option name="children">
                                    <map>
                                      <entry key="foregroundText">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                    </map>
                                  </option>
                                </PersistentState>
                              </value>
                            </entry>
                            <entry key="tvChannel">
                              <value>
                                <PersistentState>
                                  <option name="children">
                                    <map>
                                      <entry key="foregroundClipArt">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="imagePath" value="C:\Users\azrie\AppData\Local\Temp\ic_android_black_24dp.xml" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundImage">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundText">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                      <entry key="foregroundTextAsset">
                                        <value>
                                          <PersistentState>
                                            <option name="values">
                                              <map>
                                                <entry key="color" value="000000" />
                                              </map>
                                            </option>
                                          </PersistentState>
                                        </value>
                                      </entry>
                                    </map>
                                  </option>
                                  <option name="values">
                                    <map>
                                      <entry key="previewDensity" value="xxxhdpi" />
                                    </map>
                                  </option>
                                </PersistentState>
                              </value>
                            </entry>
                          </map>
                        </option>
                      </PersistentState>
                    </value>
                  </entry>
                </map>
              </option>
            </PersistentState>
          </value>
        </entry>
        <entry key="vectorWizard">
          <value>
            <PersistentState>
              <option name="children">
                <map>
                  <entry key="vectorAssetStep">
                    <value>
                      <PersistentState>
                        <option name="values">
                          <map>
                            <entry key="assetSourceType" value="FILE" />
                            <entry key="outputName" value="cuedetat_simplest" />
                            <entry key="sourceFile" value="G:\My Drive\cuedetat_simplest.svg" />
                          </map>
                        </option>
                      </PersistentState>
                    </value>
                  </entry>
                </map>
              </option>
            </PersistentState>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>


--- FILE: .idea/checkstyle-idea.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CheckStyle-IDEA" serialisationVersion="2">
    <checkstyleVersion>10.22.0</checkstyleVersion>
    <scanScope>JavaOnly</scanScope>
    <copyLibs>true</copyLibs>
    <option name="thirdPartyClasspath" />
    <option name="activeLocationIds" />
    <option name="locations">
      <list>
        <ConfigurationLocation id="bundled-sun-checks" type="BUNDLED" scope="All" description="Sun Checks">(bundled)</ConfigurationLocation>
        <ConfigurationLocation id="bundled-google-checks" type="BUNDLED" scope="All" description="Google Checks">(bundled)</ConfigurationLocation>
      </list>
    </option>
  </component>
</project>


--- FILE: .idea/compiler.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <bytecodeTargetLevel target="24" />
  </component>
</project>


--- FILE: .idea/dbnavigator.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DBNavigator.Project.DDLFileAttachmentManager">
    <mappings />
    <preferences />
  </component>
  <component name="DBNavigator.Project.DatabaseAssistantManager">
    <assistants />
  </component>
  <component name="DBNavigator.Project.DatabaseBrowserManager">
    <autoscroll-to-editor value="false" />
    <autoscroll-from-editor value="true" />
    <show-object-properties value="true" />
    <loaded-nodes />
  </component>
  <component name="DBNavigator.Project.DatabaseFileManager">
    <open-files />
  </component>
  <component name="DBNavigator.Project.ExecutionManager">
    <retain-sticky-names value="false" />
  </component>
  <component name="DBNavigator.Project.ParserDiagnosticsManager">
    <diagnostics-history />
  </component>
  <component name="DBNavigator.Project.Settings">
    <connections />
    <browser-settings>
      <general>
        <display-mode value="TABBED" />
        <navigation-history-size value="100" />
        <show-object-details value="false" />
        <enable-sticky-paths value="true" />
      </general>
      <filters>
        <object-type-filter>
          <object-type name="SCHEMA" enabled="true" />
          <object-type name="USER" enabled="true" />
          <object-type name="ROLE" enabled="true" />
          <object-type name="PRIVILEGE" enabled="true" />
          <object-type name="CHARSET" enabled="true" />
          <object-type name="TABLE" enabled="true" />
          <object-type name="VIEW" enabled="true" />
          <object-type name="MATERIALIZED_VIEW" enabled="true" />
          <object-type name="NESTED_TABLE" enabled="true" />
          <object-type name="COLUMN" enabled="true" />
          <object-type name="INDEX" enabled="true" />
          <object-type name="CONSTRAINT" enabled="true" />
          <object-type name="DATASET_TRIGGER" enabled="true" />
          <object-type name="DATABASE_TRIGGER" enabled="true" />
          <object-type name="SYNONYM" enabled="true" />
          <object-type name="SEQUENCE" enabled="true" />
          <object-type name="PROCEDURE" enabled="true" />
          <object-type name="FUNCTION" enabled="true" />
          <object-type name="PACKAGE" enabled="true" />
          <object-type name="TYPE" enabled="true" />
          <object-type name="TYPE_ATTRIBUTE" enabled="true" />
          <object-type name="ARGUMENT" enabled="true" />
          <object-type name="JAVA_CLASS" enabled="true" />
          <object-type name="JAVA_INNER_CLASS" enabled="true" />
          <object-type name="JAVA_FIELD" enabled="true" />
          <object-type name="JAVA_METHOD" enabled="true" />
          <object-type name="DIMENSION" enabled="true" />
          <object-type name="CLUSTER" enabled="true" />
          <object-type name="DBLINK" enabled="true" />
          <object-type name="CREDENTIAL" enabled="true" />
          <object-type name="AI_PROFILE" enabled="true" />
        </object-type-filter>
      </filters>
      <sorting>
        <object-type name="COLUMN" sorting-type="NAME" />
        <object-type name="FUNCTION" sorting-type="NAME" />
        <object-type name="PROCEDURE" sorting-type="NAME" />
        <object-type name="ARGUMENT" sorting-type="POSITION" />
        <object-type name="TYPE ATTRIBUTE" sorting-type="POSITION" />
      </sorting>
      <default-editors>
        <object-type name="VIEW" editor-type="SELECTION" />
        <object-type name="PACKAGE" editor-type="SELECTION" />
        <object-type name="TYPE" editor-type="SELECTION" />
      </default-editors>
    </browser-settings>
    <navigation-settings>
      <lookup-filters>
        <lookup-objects>
          <object-type name="SCHEMA" enabled="true" />
          <object-type name="USER" enabled="false" />
          <object-type name="ROLE" enabled="false" />
          <object-type name="PRIVILEGE" enabled="false" />
          <object-type name="CHARSET" enabled="false" />
          <object-type name="TABLE" enabled="true" />
          <object-type name="VIEW" enabled="true" />
          <object-type name="MATERIALIZED VIEW" enabled="true" />
          <object-type name="INDEX" enabled="true" />
          <object-type name="CONSTRAINT" enabled="true" />
          <object-type name="DATASET TRIGGER" enabled="true" />
          <object-type name="DATABASE TRIGGER" enabled="true" />
          <object-type name="SYNONYM" enabled="false" />
          <object-type name="SEQUENCE" enabled="true" />
          <object-type name="PROCEDURE" enabled="true" />
          <object-type name="FUNCTION" enabled="true" />
          <object-type name="PACKAGE" enabled="true" />
          <object-type name="TYPE" enabled="true" />
          <object-type name="JAVA CLASS" enabled="true" />
          <object-type name="INNER CLASS" enabled="true" />
          <object-type name="JAVA FIELD" enabled="true" />
          <object-type name="JAVA METHOD" enabled="true" />
          <object-type name="JAVA PARAMETER" enabled="true" />
          <object-type name="DIMENSION" enabled="false" />
          <object-type name="CLUSTER" enabled="false" />
          <object-type name="DBLINK" enabled="false" />
          <object-type name="CREDENTIAL" enabled="false" />
        </lookup-objects>
        <force-database-load value="false" />
        <prompt-connection-selection value="true" />
        <prompt-schema-selection value="true" />
      </lookup-filters>
    </navigation-settings>
    <dataset-grid-settings>
      <general>
        <enable-zooming value="true" />
        <enable-column-tooltip value="true" />
      </general>
      <sorting>
        <nulls-first value="true" />
        <max-sorting-columns value="4" />
      </sorting>
      <audit-columns>
        <column-names value="" />
        <visible value="true" />
        <editable value="false" />
      </audit-columns>
    </dataset-grid-settings>
    <dataset-editor-settings>
      <text-editor-popup>
        <active value="false" />
        <active-if-empty value="false" />
        <data-length-threshold value="100" />
        <popup-delay value="1000" />
      </text-editor-popup>
      <values-actions-popup>
        <show-popup-button value="true" />
        <element-count-threshold value="1000" />
        <data-length-threshold value="250" />
      </values-actions-popup>
      <general>
        <fetch-block-size value="100" />
        <fetch-timeout value="30" />
        <trim-whitespaces value="true" />
        <convert-empty-strings-to-null value="true" />
        <select-content-on-cell-edit value="true" />
        <large-value-preview-active value="true" />
      </general>
      <filters>
        <prompt-filter-dialog value="true" />
        <default-filter-type value="BASIC" />
      </filters>
      <qualified-text-editor text-length-threshold="300">
        <content-types>
          <content-type name="Text" enabled="true" />
          <content-type name="Properties" enabled="true" />
          <content-type name="XML" enabled="true" />
          <content-type name="DTD" enabled="true" />
          <content-type name="HTML" enabled="true" />
          <content-type name="XHTML" enabled="true" />
          <content-type name="Java" enabled="true" />
          <content-type name="SQL" enabled="true" />
          <content-type name="PL/SQL" enabled="true" />
          <content-type name="JSON" enabled="true" />
          <content-type name="JSON5" enabled="true" />
          <content-type name="Groovy" enabled="true" />
          <content-type name="AIDL" enabled="true" />
          <content-type name="YAML" enabled="true" />
          <content-type name="Manifest" enabled="true" />
        </content-types>
      </qualified-text-editor>
      <record-navigation>
        <navigation-target value="VIEWER" />
      </record-navigation>
    </dataset-editor-settings>
    <code-editor-settings>
      <general>
        <show-object-navigation-gutter value="false" />
        <show-spec-declaration-navigation-gutter value="true" />
        <enable-spellchecking value="true" />
        <enable-reference-spellchecking value="false" />
      </general>
      <confirmations>
        <save-changes value="false" />
        <revert-changes value="true" />
        <exit-on-changes value="ASK" />
      </confirmations>
    </code-editor-settings>
    <code-completion-settings>
      <filters>
        <basic-filter>
          <filter-element type="RESERVED_WORD" id="keyword" selected="true" />
          <filter-element type="RESERVED_WORD" id="function" selected="true" />
          <filter-element type="RESERVED_WORD" id="parameter" selected="true" />
          <filter-element type="RESERVED_WORD" id="datatype" selected="true" />
          <filter-element type="RESERVED_WORD" id="exception" selected="true" />
          <filter-element type="OBJECT" id="schema" selected="true" />
          <filter-element type="OBJECT" id="role" selected="true" />
          <filter-element type="OBJECT" id="user" selected="true" />
          <filter-element type="OBJECT" id="privilege" selected="true" />
          <user-schema>
            <filter-element type="OBJECT" id="table" selected="true" />
            <filter-element type="OBJECT" id="view" selected="true" />
            <filter-element type="OBJECT" id="materialized view" selected="true" />
            <filter-element type="OBJECT" id="index" selected="true" />
            <filter-element type="OBJECT" id="constraint" selected="true" />
            <filter-element type="OBJECT" id="trigger" selected="true" />
            <filter-element type="OBJECT" id="synonym" selected="false" />
            <filter-element type="OBJECT" id="sequence" selected="true" />
            <filter-element type="OBJECT" id="procedure" selected="true" />
            <filter-element type="OBJECT" id="function" selected="true" />
            <filter-element type="OBJECT" id="package" selected="true" />
            <filter-element type="OBJECT" id="type" selected="true" />
            <filter-element type="OBJECT" id="dimension" selected="true" />
            <filter-element type="OBJECT" id="cluster" selected="true" />
            <filter-element type="OBJECT" id="dblink" selected="true" />
          </user-schema>
          <public-schema>
            <filter-element type="OBJECT" id="table" selected="false" />
            <filter-element type="OBJECT" id="view" selected="false" />
            <filter-element type="OBJECT" id="materialized view" selected="false" />
            <filter-element type="OBJECT" id="index" selected="false" />
            <filter-element type="OBJECT" id="constraint" selected="false" />
            <filter-element type="OBJECT" id="trigger" selected="false" />
            <filter-element type="OBJECT" id="synonym" selected="false" />
            <filter-element type="OBJECT" id="sequence" selected="false" />
            <filter-element type="OBJECT" id="procedure" selected="false" />
            <filter-element type="OBJECT" id="function" selected="false" />
            <filter-element type="OBJECT" id="package" selected="false" />
            <filter-element type="OBJECT" id="type" selected="false" />
            <filter-element type="OBJECT" id="dimension" selected="false" />
            <filter-element type="OBJECT" id="cluster" selected="false" />
            <filter-element type="OBJECT" id="dblink" selected="false" />
          </public-schema>
          <any-schema>
            <filter-element type="OBJECT" id="table" selected="true" />
            <filter-element type="OBJECT" id="view" selected="true" />
            <filter-element type="OBJECT" id="materialized view" selected="true" />
            <filter-element type="OBJECT" id="index" selected="true" />
            <filter-element type="OBJECT" id="constraint" selected="true" />
            <filter-element type="OBJECT" id="trigger" selected="true" />
            <filter-element type="OBJECT" id="synonym" selected="true" />
            <filter-element type="OBJECT" id="sequence" selected="true" />
            <filter-element type="OBJECT" id="procedure" selected="true" />
            <filter-element type="OBJECT" id="function" selected="true" />
            <filter-element type="OBJECT" id="package" selected="true" />
            <filter-element type="OBJECT" id="type" selected="true" />
            <filter-element type="OBJECT" id="dimension" selected="true" />
            <filter-element type="OBJECT" id="cluster" selected="true" />
            <filter-element type="OBJECT" id="dblink" selected="true" />
          </any-schema>
        </basic-filter>
        <extended-filter>
          <filter-element type="RESERVED_WORD" id="keyword" selected="true" />
          <filter-element type="RESERVED_WORD" id="function" selected="true" />
          <filter-element type="RESERVED_WORD" id="parameter" selected="true" />
          <filter-element type="RESERVED_WORD" id="datatype" selected="true" />
          <filter-element type="RESERVED_WORD" id="exception" selected="true" />
          <filter-element type="OBJECT" id="schema" selected="true" />
          <filter-element type="OBJECT" id="user" selected="true" />
          <filter-element type="OBJECT" id="role" selected="true" />
          <filter-element type="OBJECT" id="privilege" selected="true" />
          <user-schema>
            <filter-element type="OBJECT" id="table" selected="true" />
            <filter-element type="OBJECT" id="view" selected="true" />
            <filter-element type="OBJECT" id="materialized view" selected="true" />
            <filter-element type="OBJECT" id="index" selected="true" />
            <filter-element type="OBJECT" id="constraint" selected="true" />
            <filter-element type="OBJECT" id="trigger" selected="true" />
            <filter-element type="OBJECT" id="synonym" selected="true" />
            <filter-element type="OBJECT" id="sequence" selected="true" />
            <filter-element type="OBJECT" id="procedure" selected="true" />
            <filter-element type="OBJECT" id="function" selected="true" />
            <filter-element type="OBJECT" id="package" selected="true" />
            <filter-element type="OBJECT" id="type" selected="true" />
            <filter-element type="OBJECT" id="dimension" selected="true" />
            <filter-element type="OBJECT" id="cluster" selected="true" />
            <filter-element type="OBJECT" id="dblink" selected="true" />
          </user-schema>
          <public-schema>
            <filter-element type="OBJECT" id="table" selected="true" />
            <filter-element type="OBJECT" id="view" selected="true" />
            <filter-element type="OBJECT" id="materialized view" selected="true" />
            <filter-element type="OBJECT" id="index" selected="true" />
            <filter-element type="OBJECT" id="constraint" selected="true" />
            <filter-element type="OBJECT" id="trigger" selected="true" />
            <filter-element type="OBJECT" id="synonym" selected="true" />
            <filter-element type="OBJECT" id="sequence" selected="true" />
            <filter-element type="OBJECT" id="procedure" selected="true" />
            <filter-element type="OBJECT" id="function" selected="true" />
            <filter-element type="OBJECT" id="package" selected="true" />
            <filter-element type="OBJECT" id="type" selected="true" />
            <filter-element type="OBJECT" id="dimension" selected="true" />
            <filter-element type="OBJECT" id="cluster" selected="true" />
            <filter-element type="OBJECT" id="dblink" selected="true" />
          </public-schema>
          <any-schema>
            <filter-element type="OBJECT" id="table" selected="true" />
            <filter-element type="OBJECT" id="view" selected="true" />
            <filter-element type="OBJECT" id="materialized view" selected="true" />
            <filter-element type="OBJECT" id="index" selected="true" />
            <filter-element type="OBJECT" id="constraint" selected="true" />
            <filter-element type="OBJECT" id="trigger" selected="true" />
            <filter-element type="OBJECT" id="synonym" selected="true" />
            <filter-element type="OBJECT" id="sequence" selected="true" />
            <filter-element type="OBJECT" id="procedure" selected="true" />
            <filter-element type="OBJECT" id="function" selected="true" />
            <filter-element type="OBJECT" id="package" selected="true" />
            <filter-element type="OBJECT" id="type" selected="true" />
            <filter-element type="OBJECT" id="dimension" selected="true" />
            <filter-element type="OBJECT" id="cluster" selected="true" />
            <filter-element type="OBJECT" id="dblink" selected="true" />
          </any-schema>
        </extended-filter>
      </filters>
      <sorting enabled="true">
        <sorting-element type="RESERVED_WORD" id="keyword" />
        <sorting-element type="RESERVED_WORD" id="datatype" />
        <sorting-element type="OBJECT" id="column" />
        <sorting-element type="OBJECT" id="table" />
        <sorting-element type="OBJECT" id="view" />
        <sorting-element type="OBJECT" id="materialized view" />
        <sorting-element type="OBJECT" id="index" />
        <sorting-element type="OBJECT" id="constraint" />
        <sorting-element type="OBJECT" id="trigger" />
        <sorting-element type="OBJECT" id="synonym" />
        <sorting-element type="OBJECT" id="sequence" />
        <sorting-element type="OBJECT" id="procedure" />
        <sorting-element type="OBJECT" id="function" />
        <sorting-element type="OBJECT" id="package" />
        <sorting-element type="OBJECT" id="type" />
        <sorting-element type="OBJECT" id="dimension" />
        <sorting-element type="OBJECT" id="cluster" />
        <sorting-element type="OBJECT" id="dblink" />
        <sorting-element type="OBJECT" id="schema" />
        <sorting-element type="OBJECT" id="role" />
        <sorting-element type="OBJECT" id="user" />
        <sorting-element type="RESERVED_WORD" id="function" />
        <sorting-element type="RESERVED_WORD" id="parameter" />
      </sorting>
      <format>
        <enforce-code-style-case value="true" />
      </format>
    </code-completion-settings>
    <execution-engine-settings>
      <statement-execution>
        <fetch-block-size value="100" />
        <execution-timeout value="20" />
        <debug-execution-timeout value="600" />
        <focus-result value="false" />
        <prompt-execution value="false" />
      </statement-execution>
      <script-execution>
        <command-line-interfaces />
        <execution-timeout value="300" />
      </script-execution>
      <method-execution>
        <execution-timeout value="30" />
        <debug-execution-timeout value="600" />
        <parameter-history-size value="10" />
      </method-execution>
    </execution-engine-settings>
    <operation-settings>
      <transactions>
        <uncommitted-changes>
          <on-project-close value="ASK" />
          <on-disconnect value="ASK" />
          <on-autocommit-toggle value="ASK" />
        </uncommitted-changes>
        <multiple-uncommitted-changes>
          <on-commit value="ASK" />
          <on-rollback value="ASK" />
        </multiple-uncommitted-changes>
      </transactions>
      <session-browser>
        <disconnect-session value="ASK" />
        <kill-session value="ASK" />
        <reload-on-filter-change value="false" />
      </session-browser>
      <compiler>
        <compile-type value="KEEP" />
        <compile-dependencies value="ASK" />
        <always-show-controls value="false" />
      </compiler>
    </operation-settings>
    <ddl-file-settings>
      <extensions>
        <mapping file-type-id="VIEW" extensions="vw" />
        <mapping file-type-id="TRIGGER" extensions="trg" />
        <mapping file-type-id="PROCEDURE" extensions="prc" />
        <mapping file-type-id="FUNCTION" extensions="fnc" />
        <mapping file-type-id="PACKAGE" extensions="pkg" />
        <mapping file-type-id="PACKAGE_SPEC" extensions="pks" />
        <mapping file-type-id="PACKAGE_BODY" extensions="pkb" />
        <mapping file-type-id="TYPE" extensions="tpe" />
        <mapping file-type-id="TYPE_SPEC" extensions="tps" />
        <mapping file-type-id="TYPE_BODY" extensions="tpb" />
        <mapping file-type-id="JAVA_SOURCE" extensions="sql" />
      </extensions>
      <general>
        <lookup-ddl-files value="true" />
        <create-ddl-files value="false" />
        <synchronize-ddl-files value="true" />
        <use-qualified-names value="false" />
        <make-scripts-rerunnable value="true" />
      </general>
    </ddl-file-settings>
    <assistant-settings>
      <credential-settings>
        <credentials />
      </credential-settings>
    </assistant-settings>
    <general-settings>
      <regional-settings>
        <date-format value="MEDIUM" />
        <number-format value="UNGROUPED" />
        <locale value="SYSTEM_DEFAULT" />
        <use-custom-formats value="false" />
      </regional-settings>
      <environment>
        <environment-types>
          <environment-type id="development" name="Development" description="Development environment" color="-2430209/-12296320" readonly-code="false" readonly-data="false" />
          <environment-type id="integration" name="Integration" description="Integration environment" color="-2621494/-12163514" readonly-code="true" readonly-data="false" />
          <environment-type id="production" name="Production" description="Productive environment" color="-11574/-10271420" readonly-code="true" readonly-data="true" />
          <environment-type id="other" name="Other" description="" color="-1576/-10724543" readonly-code="false" readonly-data="false" />
        </environment-types>
        <visibility-settings>
          <connection-tabs value="true" />
          <dialog-headers value="true" />
          <object-editor-tabs value="true" />
          <script-editor-tabs value="false" />
          <execution-result-tabs value="true" />
        </visibility-settings>
      </environment>
    </general-settings>
  </component>
</project>


--- FILE: .idea/DDGenerateAssetsClassConfig.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DDGenerateAssetsClassConfig">
    <option name="path" value="$PROJECT_DIR$/../PoolProtractor\lib" />
  </component>
</project>


--- FILE: .idea/deploymentTargetSelector.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="deploymentTargetSelector">
    <selectionStates>
      <SelectionState runConfigName="app">
        <option name="selectionMode" value="DROPDOWN" />
      </SelectionState>
    </selectionStates>
  </component>
</project>


--- FILE: .idea/developer-tools.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DeveloperToolsToolWindowSettingsV1" lastSelectedContentNodeId="base64-encoder-decoder">
    <developerToolsConfigurations />
  </component>
</project>


--- FILE: .idea/deviceManager.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="DeviceTable">
    <option name="columnSorters">
      <list>
        <ColumnSorterState>
          <option name="column" value="Name" />
          <option name="order" value="ASCENDING" />
        </ColumnSorterState>
      </list>
    </option>
  </component>
</project>


--- FILE: .idea/FlutterxFullConfig.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="FlutterxFullConfig">
    <option name="assetDirectory" value="$PROJECT_DIR$" />
  </component>
</project>


--- FILE: .idea/google-java-format.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="GoogleJavaFormatSettings">
    <option name="enabled" value="true" />
  </component>
</project>


--- FILE: .idea/gradle.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="GradleMigrationSettings" migrationVersion="1" />
  <component name="GradleSettings">
    <option name="linkedExternalProjectsSettings">
      <GradleProjectSettings>
        <option name="testRunner" value="CHOOSE_PER_TEST" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="gradleJvm" value="#JAVA_HOME" />
        <option name="modules">
          <set>
            <option value="$PROJECT_DIR$" />
            <option value="$PROJECT_DIR$/app" />
          </set>
        </option>
      </GradleProjectSettings>
    </option>
  </component>
</project>


--- FILE: .idea/iFlutter.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="iFlutter">
    <option name="foldRegisterEnable" value="true" />
    <option name="registerResWithPackage" value="true" />
    <option name="isUnModifiableFromJson" value="true" />
  </component>
</project>


--- FILE: .idea/kotlinc.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="KotlinJpsPluginSettings">
    <option name="version" value="2.1.20" />
  </component>
</project>


--- FILE: .idea/LanguageServersSettings.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="LanguageServerSettingsState">
    <state>
      <map>
        <entry key="be11af61-2a5f-4a53-a3fb-b9cf079c73c1">
          <value>
            <LanguageServerDefinitionSettings>
              <option name="errorReportingKind" value="none" />
            </LanguageServerDefinitionSettings>
          </value>
        </entry>
      </map>
    </state>
  </component>
</project>


--- FILE: .idea/material_theme_project_new.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="MaterialThemeProjectNewConfig">
    <option name="metadata">
      <MTProjectMetadataState>
        <option name="migrated" value="true" />
        <option name="pristineConfig" value="false" />
        <option name="userId" value="670d4b3b:19093868817:-7ffe" />
      </MTProjectMetadataState>
    </option>
  </component>
</project>


--- FILE: .idea/migrations.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectMigrations">
    <option name="MigrateToGradleLocalJavaHome">
      <set>
        <option value="$PROJECT_DIR$" />
      </set>
    </option>
  </component>
</project>


--- FILE: .idea/misc.xml ---

<project version="4">
  <component name="EntryPointsManager">
    <entry_points version="2.0">
      <entry_point TYPE="field" FQNAME="file://$PROJECT_DIR$/app/src/main/java/com/hereliesaz/poolprotractor/ui/theme/Type.kt Typography" />
      <entry_point TYPE="field" FQNAME="file://$PROJECT_DIR$/app/src/main/java/com/hereliesaz/poolprotractor/ui/theme/Theme.kt DarkColorScheme" />
      <entry_point TYPE="field" FQNAME="file://$PROJECT_DIR$/app/src/main/java/com/hereliesaz/poolprotractor/ui/theme/Theme.kt LightColorScheme" />
      <entry_point TYPE="field" FQNAME="com.hereliesaz.poolprotractor.ProtractorOverlayView M3_COLOR_TERTIARY" />
      <entry_point TYPE="field" FQNAME="com.hereliesaz.poolprotractor.ProtractorOverlayView TAG" />
      <entry_point TYPE="field" FQNAME="com.hereliesaz.poolprotractor.MainActivity zoomIcon" />
    </entry_points>
    <pattern value="com.hereliesaz.poolprotractor.ProtractorOverlayView" method="getPitchAngle" />
  </component>
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="ProjectInspectionProfilesVisibleTreeState">
    <entry key="Project Default">
      <profile-state>
        <selected-state>
          <State>
            <id>User defined</id>
          </State>
        </selected-state>
      </profile-state>
    </entry>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_24" default="true" project-jdk-name="24" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/build/classes" />
  </component>
  <component name="ProjectType">
    <option name="id" value="Android" />
  </component>
  <component name="VisualizationToolProject">
    <option name="state">
      <ProjectState>
        <option name="scale" value="0.17140898183064793" />
      </ProjectState>
    </option>
  </component>
</project>


--- FILE: .idea/modules.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/modules/CueDetat.iml" filepath="$PROJECT_DIR$/.idea/modules/CueDetat.iml" />
    </modules>
  </component>
</project>


--- FILE: .idea/runConfigurations.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RunConfigurationProducerService">
    <option name="ignoredProducers">
      <set>
        <option value="com.intellij.execution.junit.AbstractAllInDirectoryConfigurationProducer" />
        <option value="com.intellij.execution.junit.AllInPackageConfigurationProducer" />
        <option value="com.intellij.execution.junit.PatternConfigurationProducer" />
        <option value="com.intellij.execution.junit.TestInClassConfigurationProducer" />
        <option value="com.intellij.execution.junit.UniqueIdConfigurationProducer" />
        <option value="com.intellij.execution.junit.testDiscovery.JUnitTestDiscoveryConfigurationProducer" />
        <option value="org.jetbrains.kotlin.idea.junit.KotlinJUnitRunConfigurationProducer" />
        <option value="org.jetbrains.kotlin.idea.junit.KotlinPatternConfigurationProducer" />
      </set>
    </option>
  </component>
</project>


--- FILE: .idea/studiobot.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudioBotProjectSettings">
    <option name="shareContext" value="OptedIn" />
  </component>
</project>


--- FILE: .idea/vcs.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CommitMessageInspectionProfile">
    <profile version="1.0">
      <inspection_tool class="CommitMessageSpellChecking" enabled="false" level="TYPO" enabled_by_default="false" />
    </profile>
  </component>
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>


--- FILE: .idea/workspace.xml ---

<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AndroidLayouts">
    <shared>
      <config />
    </shared>
    <layouts>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/drawable/cuedetat.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_help_outline_24.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_jump_shot.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_background.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_foreground.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/drawable/pool_table.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/drawable/seekbar_custom_track.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/font/barbaro_family.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
      <layout url="file://$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml">
        <config>
          <theme>@style/Theme.CueDetat</theme>
        </config>
      </layout>
    </layouts>
  </component>
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="NONE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="9fbbdfde-14dd-4720-a481-cde04fa54f58" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/.kotlin/errors/errors-1750078543900.log" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.kotlin/errors/errors-1750542967338.log" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.kotlin/errors/errors-1750543541955.log" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/blank_tansparent.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/app/src/main/res/drawable/pool_table.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/project_context_for_ai_20250621_163438.txt" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.archive-it.ps1" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/codeStyles/codeStyleConfig.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/codeStyles/codeStyleConfig.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.kotlin/sessions/kotlin-compiler-17132126756064456676.salive" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/Developers_Guide.patch" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/PoolProtractor_Full_Archive.txt" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/app/build.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/app/build.gradle.kts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/ic_launcher-playstore.png" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/ic_launcher-playstore.png" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/drawable/cuedetat.webp" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_background.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_background.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_monochrome.xml" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher_round.webp" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/drawable/pool_table.svg" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-hdpi/ic_launcher.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-hdpi/ic_launcher.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-hdpi/ic_launcher_background.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-hdpi/ic_launcher_background.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-hdpi/ic_launcher_foreground.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-hdpi/ic_launcher_foreground.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-hdpi/ic_launcher_round.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-hdpi/ic_launcher_round.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-mdpi/ic_launcher.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-mdpi/ic_launcher.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-mdpi/ic_launcher_background.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-mdpi/ic_launcher_background.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-mdpi/ic_launcher_foreground.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-mdpi/ic_launcher_foreground.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-mdpi/ic_launcher_round.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-mdpi/ic_launcher_round.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-xhdpi/ic_launcher.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-xhdpi/ic_launcher.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-xhdpi/ic_launcher_background.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-xhdpi/ic_launcher_background.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-xhdpi/ic_launcher_foreground.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-xhdpi/ic_launcher_foreground.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-xhdpi/ic_launcher_round.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-xhdpi/ic_launcher_round.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-xxhdpi/ic_launcher.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-xxhdpi/ic_launcher.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-xxhdpi/ic_launcher_background.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-xxhdpi/ic_launcher_background.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-xxhdpi/ic_launcher_foreground.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-xxhdpi/ic_launcher_foreground.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-xxxhdpi/ic_launcher.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-xxxhdpi/ic_launcher.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-xxxhdpi/ic_launcher_background.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-xxxhdpi/ic_launcher_background.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-xxxhdpi/ic_launcher_foreground.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-xxxhdpi/ic_launcher_foreground.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.webp" beforeDir="false" afterPath="$PROJECT_DIR$/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.webp" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/build.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/build.gradle.kts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/gradle.properties" beforeDir="false" afterPath="$PROJECT_DIR$/gradle.properties" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/gradle/libs.versions.toml" beforeDir="false" afterPath="$PROJECT_DIR$/gradle/libs.versions.toml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/settings.gradle.kts" beforeDir="false" afterPath="$PROJECT_DIR$/settings.gradle.kts" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ChangesViewManager" show_ignored="true">
    <option name="groupingKeys">
      <option value="directory" />
      <option value="module" />
      <option value="repository" />
    </option>
  </component>
  <component name="ClangdSettings">
    <option name="formatViaClangd" value="false" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="device_and_snapshot_combo_box_target[DeviceId(pluginId=PhysicalDevice, isTemplate=false, identifier=serial=0B061FDD400134)]" />
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="GRADLE">
      <state>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="CueDetat" type="f1a62948:ProjectNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="resourceFile" />
        <option value="Kotlin File" />
        <option value="Kotlin Class" />
        <option value="XML Properties File" />
      </list>
    </option>
  </component>
  <component name="GenerateSignedApkSettings">
    <option name="KEY_STORE_PATH" value="G:\My Drive\az_apk_keystore.jks" />
    <option name="KEY_ALIAS" value="key0" />
    <option name="REMEMBER_PASSWORDS" value="true" />
    <option name="BUILD_TARGET_KEY" value="apk" />
  </component>
  <component name="Git.Settings">
    <favorite-branches>
      <branch-storage>
        <map>
          <entry type="REMOTE">
            <value>
              <list>
                <branch-info repo="$PROJECT_DIR$" source="CueDetat/main" />
              </list>
            </value>
          </entry>
        </map>
      </branch-storage>
    </favorite-branches>
    <option name="PREVIOUS_COMMIT_AUTHORS">
      <list>
        <option value="Az" />
      </list>
    </option>
    <option name="PUSH_AUTO_UPDATE" value="true" />
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="main" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="RESET_MODE" value="SOFT" />
    <option name="SIGN_OFF_COMMIT" value="true" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;HereLiesAz&quot;
  }
}</component>
  <component name="GithubDefaultAccount">
    <option name="defaultAccountId" value="ec06c625-beeb-4144-b820-11c2bdc7ab20" />
  </component>
  <component name="GithubProjectSettings">
    <option name="branchProtectionPatterns">
      <list>
        <option value="main" />
      </list>
    </option>
  </component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/HereLiesAz/CueDetat&quot;,
    &quot;accountId&quot;: &quot;ec06c625-beeb-4144-b820-11c2bdc7ab20&quot;
  }
}</component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="ProjectErrors" />
  </component>
  <component name="ProjectCodeStyleSettingsMigration">
    <option name="version" value="2" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;customColor&quot;: &quot;&quot;,
  &quot;associatedIndex&quot;: 5
}</component>
  <component name="ProjectId" id="2yBtJ0nvE8PEdIJltJ0MUbDdTkP" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectReloadState">
    <option name="STATE" value="1" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Android App.app.executor&quot;: &quot;Run&quot;,
    &quot;ApkExportedModule&quot;: &quot;CueDetat.app&quot;,
    &quot;BundleExportedModule&quot;: &quot;CueDetat.app&quot;,
    &quot;ExportApk.ApkPathForCueDetat.app&quot;: &quot;C:\\Users\\azrie\\AndroidStudioProjects\\CueD8at\\app&quot;,
    &quot;ExportBundle.BundlePathForCueDetat.app&quot;: &quot;C:\\Users\\azrie\\AndroidStudioProjects\\CueD8at\\app&quot;,
    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,
    &quot;ResourceManagerPrefKey.ModuleName&quot;: &quot;CueDetat.app.main&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.cidr.known.project.marker&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.readMode.enableVisualFormatting&quot;: &quot;true&quot;,
    &quot;android-custom-viewC:/Users/azrie/AndroidStudioProjects/CueD8at/app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt_SELECTED&quot;: &quot;ProtractorOverlayView&quot;,
    &quot;cf.first.check.clang-format&quot;: &quot;false&quot;,
    &quot;cidr.known.project.marker&quot;: &quot;true&quot;,
    &quot;com.google.services.firebase.aqiPopupShown&quot;: &quot;true&quot;,
    &quot;dart.analysis.tool.window.visible&quot;: &quot;false&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/azrie/AndroidStudioProjects/CueD8at/app/src/main/res/drawable&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.17&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
    &quot;show.migrate.to.gradle.popup&quot;: &quot;false&quot;,
    &quot;vcs.patch.to.clipboard&quot;: &quot;true&quot;
  },
  &quot;keyToStringList&quot;: {
    &quot;ExportApk.BuildVariants&quot;: [
      &quot;release&quot;
    ],
    &quot;android-custom-viewC:/Users/azrie/AndroidStudioProjects/CueD8at/app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt_ProtractorOverlayView_DIMENSIONS&quot;: [
      &quot;1080&quot;,
      &quot;1920&quot;
    ]
  }
}</component>
  <component name="PsdUISettings">
    <option name="MODULE_TAB" value="Signing Configs" />
    <option name="BUILD_VARIANTS_TAB" value="Build Types" />
    <option name="LAST_EDITED_SIGNING_CONFIG" value="release" />
    <option name="LAST_EDITED_BUILD_TYPE" value="debug" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\drawable" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\drawable" />
      <recent name="C:\Users\azrie\AndroidStudioProjects\CueD8at" />
      <recent name="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\vectors" />
      <recent name="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\raw" />
      <recent name="C:\Users\azrie\AndroidStudioProjects\CueD8at\app\src\main\res\font" />
    </key>
    <key name="K2MoveDeclarationsDialog.RECENT_PACKAGE_KEY">
      <recent name="com.hereliesaz.cuedetat.ui.composables" />
      <recent name="com.hereliesaz.cuedetat.ui.composables.cuedetat" />
      <recent name="com.hereliesaz.cuedetat.ui.composables.cudetat" />
      <recent name="com.hereliesaz.cuedetat.ui.theme" />
      <recent name="com.hereliesaz.cuedetat.ui" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="app" type="AndroidRunConfigurationType" factoryName="Android App" activateToolWindowBeforeRun="false">
      <module name="CueDetat.app" />
      <option name="ANDROID_RUN_CONFIGURATION_SCHEMA_VERSION" value="1" />
      <option name="DEPLOY" value="true" />
      <option name="DEPLOY_APK_FROM_BUNDLE" value="false" />
      <option name="DEPLOY_AS_INSTANT" value="false" />
      <option name="ARTIFACT_NAME" value="" />
      <option name="PM_INSTALL_OPTIONS" value="" />
      <option name="ALL_USERS" value="false" />
      <option name="ALWAYS_INSTALL_WITH_PM" value="false" />
      <option name="ALLOW_ASSUME_VERIFIED" value="false" />
      <option name="CLEAR_APP_STORAGE" value="false" />
      <option name="DYNAMIC_FEATURES_DISABLED_LIST" value="" />
      <option name="ACTIVITY_EXTRA_FLAGS" value="" />
      <option name="MODE" value="default_activity" />
      <option name="RESTORE_ENABLED" value="false" />
      <option name="RESTORE_FILE" value="" />
      <option name="RESTORE_FRESH_INSTALL_ONLY" value="false" />
      <option name="CLEAR_LOGCAT" value="false" />
      <option name="SHOW_LOGCAT_AUTOMATICALLY" value="false" />
      <option name="TARGET_SELECTION_MODE" value="DEVICE_AND_SNAPSHOT_COMBO_BOX" />
      <option name="SELECTED_CLOUD_MATRIX_CONFIGURATION_ID" value="-1" />
      <option name="SELECTED_CLOUD_MATRIX_PROJECT_ID" value="" />
      <option name="DEBUGGER_TYPE" value="Auto" />
      <Auto>
        <option name="USE_JAVA_AWARE_DEBUGGER" value="false" />
        <option name="SHOW_STATIC_VARS" value="true" />
        <option name="WORKING_DIR" value="" />
        <option name="TARGET_LOGGING_CHANNELS" value="lldb process:gdb-remote packets" />
        <option name="SHOW_OPTIMIZED_WARNING" value="true" />
        <option name="ATTACH_ON_WAIT_FOR_DEBUGGER" value="false" />
        <option name="DEBUG_SANDBOX_SDK" value="false" />
      </Auto>
      <Hybrid>
        <option name="USE_JAVA_AWARE_DEBUGGER" value="false" />
        <option name="SHOW_STATIC_VARS" value="true" />
        <option name="WORKING_DIR" value="" />
        <option name="TARGET_LOGGING_CHANNELS" value="lldb process:gdb-remote packets" />
        <option name="SHOW_OPTIMIZED_WARNING" value="true" />
        <option name="ATTACH_ON_WAIT_FOR_DEBUGGER" value="false" />
        <option name="DEBUG_SANDBOX_SDK" value="false" />
      </Hybrid>
      <Java>
        <option name="ATTACH_ON_WAIT_FOR_DEBUGGER" value="false" />
        <option name="DEBUG_SANDBOX_SDK" value="false" />
      </Java>
      <Native>
        <option name="USE_JAVA_AWARE_DEBUGGER" value="false" />
        <option name="SHOW_STATIC_VARS" value="true" />
        <option name="WORKING_DIR" value="" />
        <option name="TARGET_LOGGING_CHANNELS" value="lldb process:gdb-remote packets" />
        <option name="SHOW_OPTIMIZED_WARNING" value="true" />
        <option name="ATTACH_ON_WAIT_FOR_DEBUGGER" value="false" />
        <option name="DEBUG_SANDBOX_SDK" value="false" />
      </Native>
      <Profilers>
        <option name="ADVANCED_PROFILING_ENABLED" value="false" />
        <option name="STARTUP_PROFILING_ENABLED" value="false" />
        <option name="STARTUP_CPU_PROFILING_ENABLED" value="false" />
        <option name="STARTUP_CPU_PROFILING_CONFIGURATION_NAME" value="Java/Kotlin Method Sample (legacy)" />
        <option name="STARTUP_NATIVE_MEMORY_PROFILING_ENABLED" value="false" />
        <option name="NATIVE_MEMORY_SAMPLE_RATE_BYTES" value="2048" />
      </Profilers>
      <option name="DEEP_LINK" value="" />
      <option name="ACTIVITY" value="" />
      <option name="ACTIVITY_CLASS" value="" />
      <option name="SEARCH_ACTIVITY_IN_GLOBAL_SCOPE" value="false" />
      <option name="SKIP_ACTIVITY_VALIDATION" value="false" />
      <method v="2">
        <option name="Android.Gradle.BeforeRunTask" enabled="true" />
      </method>
    </configuration>
  </component>
  <component name="ShelveChangesManager">
    <option name="remove_strategy" value="true" />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="9fbbdfde-14dd-4720-a481-cde04fa54f58" name="Changes" comment="" />
      <created>1749319721188</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1749319721188</updated>
    </task>
    <task id="LOCAL-00002" summary="init">
      <option name="closed" value="true" />
      <created>1749323667574</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1749323667574</updated>
    </task>
    <task id="LOCAL-00003" summary="init">
      <option name="closed" value="true" />
      <created>1749327955526</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1749327955526</updated>
    </task>
    <task id="LOCAL-00004" summary="init&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1749329046109</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1749329046109</updated>
    </task>
    <task id="LOCAL-00005" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749339624514</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1749339624514</updated>
    </task>
    <task id="LOCAL-00006" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1749342694794</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1749342694794</updated>
    </task>
    <task id="LOCAL-00007" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749486377165</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1749486377165</updated>
    </task>
    <task id="LOCAL-00008" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1749488511051</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1749488511051</updated>
    </task>
    <task id="LOCAL-00009" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1749489304412</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1749489304412</updated>
    </task>
    <task id="LOCAL-00010" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749498225665</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1749498225665</updated>
    </task>
    <task id="LOCAL-00011" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749498859071</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1749498859071</updated>
    </task>
    <task id="LOCAL-00012" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1749657760248</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1749657760248</updated>
    </task>
    <task id="LOCAL-00013" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749682895611</created>
      <option name="number" value="00013" />
      <option name="presentableId" value="LOCAL-00013" />
      <option name="project" value="LOCAL" />
      <updated>1749682895611</updated>
    </task>
    <task id="LOCAL-00014" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749695871208</created>
      <option name="number" value="00014" />
      <option name="presentableId" value="LOCAL-00014" />
      <option name="project" value="LOCAL" />
      <updated>1749695871208</updated>
    </task>
    <task id="LOCAL-00015" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749704055865</created>
      <option name="number" value="00015" />
      <option name="presentableId" value="LOCAL-00015" />
      <option name="project" value="LOCAL" />
      <updated>1749704055865</updated>
    </task>
    <task id="LOCAL-00016" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749792990444</created>
      <option name="number" value="00016" />
      <option name="presentableId" value="LOCAL-00016" />
      <option name="project" value="LOCAL" />
      <updated>1749792990444</updated>
    </task>
    <task id="LOCAL-00017" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1749793140305</created>
      <option name="number" value="00017" />
      <option name="presentableId" value="LOCAL-00017" />
      <option name="project" value="LOCAL" />
      <updated>1749793140305</updated>
    </task>
    <task id="LOCAL-00018" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749793179389</created>
      <option name="number" value="00018" />
      <option name="presentableId" value="LOCAL-00018" />
      <option name="project" value="LOCAL" />
      <updated>1749793179389</updated>
    </task>
    <task id="LOCAL-00019" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749795524652</created>
      <option name="number" value="00019" />
      <option name="presentableId" value="LOCAL-00019" />
      <option name="project" value="LOCAL" />
      <updated>1749795524652</updated>
    </task>
    <task id="LOCAL-00020" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749796117951</created>
      <option name="number" value="00020" />
      <option name="presentableId" value="LOCAL-00020" />
      <option name="project" value="LOCAL" />
      <updated>1749796117951</updated>
    </task>
    <task id="LOCAL-00021" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749847198397</created>
      <option name="number" value="00021" />
      <option name="presentableId" value="LOCAL-00021" />
      <option name="project" value="LOCAL" />
      <updated>1749847198397</updated>
    </task>
    <task id="LOCAL-00022" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1749859297891</created>
      <option name="number" value="00022" />
      <option name="presentableId" value="LOCAL-00022" />
      <option name="project" value="LOCAL" />
      <updated>1749859297891</updated>
    </task>
    <task id="LOCAL-00023" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/OverlayRenderer.kt">
      <option name="closed" value="true" />
      <created>1749859358615</created>
      <option name="number" value="00023" />
      <option name="presentableId" value="LOCAL-00023" />
      <option name="project" value="LOCAL" />
      <updated>1749859358615</updated>
    </task>
    <task id="LOCAL-00024" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/OverlayRenderer.kt">
      <option name="closed" value="true" />
      <created>1749862932678</created>
      <option name="number" value="00024" />
      <option name="presentableId" value="LOCAL-00024" />
      <option name="project" value="LOCAL" />
      <updated>1749862932678</updated>
    </task>
    <task id="LOCAL-00025" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/OverlayRenderer.kt">
      <option name="closed" value="true" />
      <created>1749865454923</created>
      <option name="number" value="00025" />
      <option name="presentableId" value="LOCAL-00025" />
      <option name="project" value="LOCAL" />
      <updated>1749865454923</updated>
    </task>
    <task id="LOCAL-00026" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/OverlayRenderer.kt">
      <option name="closed" value="true" />
      <created>1749865755118</created>
      <option name="number" value="00026" />
      <option name="presentableId" value="LOCAL-00026" />
      <option name="project" value="LOCAL" />
      <updated>1749865755118</updated>
    </task>
    <task id="LOCAL-00027" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/OverlayRenderer.kt">
      <option name="closed" value="true" />
      <created>1749865778773</created>
      <option name="number" value="00027" />
      <option name="presentableId" value="LOCAL-00027" />
      <option name="project" value="LOCAL" />
      <updated>1749865778773</updated>
    </task>
    <task id="LOCAL-00028" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749866411272</created>
      <option name="number" value="00028" />
      <option name="presentableId" value="LOCAL-00028" />
      <option name="project" value="LOCAL" />
      <updated>1749866411272</updated>
    </task>
    <task id="LOCAL-00029" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749866526370</created>
      <option name="number" value="00029" />
      <option name="presentableId" value="LOCAL-00029" />
      <option name="project" value="LOCAL" />
      <updated>1749866526370</updated>
    </task>
    <task id="LOCAL-00030" summary="Merge remote-tracking branch 'origin/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1749884477064</created>
      <option name="number" value="00030" />
      <option name="presentableId" value="LOCAL-00030" />
      <option name="project" value="LOCAL" />
      <updated>1749884477064</updated>
    </task>
    <task id="LOCAL-00031" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749900971023</created>
      <option name="number" value="00031" />
      <option name="presentableId" value="LOCAL-00031" />
      <option name="project" value="LOCAL" />
      <updated>1749900971023</updated>
    </task>
    <task id="LOCAL-00032" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749911880991</created>
      <option name="number" value="00032" />
      <option name="presentableId" value="LOCAL-00032" />
      <option name="project" value="LOCAL" />
      <updated>1749911880991</updated>
    </task>
    <task id="LOCAL-00033" summary="Last bits of housekeeping before starting the first major functional upgrade.">
      <option name="closed" value="true" />
      <created>1749964371556</created>
      <option name="number" value="00033" />
      <option name="presentableId" value="LOCAL-00033" />
      <option name="project" value="LOCAL" />
      <updated>1749964371556</updated>
    </task>
    <task id="LOCAL-00034" summary="Last bits of housekeeping before starting the first major functional upgrade.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1749964934721</created>
      <option name="number" value="00034" />
      <option name="presentableId" value="LOCAL-00034" />
      <option name="project" value="LOCAL" />
      <updated>1749964934721</updated>
    </task>
    <task id="LOCAL-00035" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1749965890596</created>
      <option name="number" value="00035" />
      <option name="presentableId" value="LOCAL-00035" />
      <option name="project" value="LOCAL" />
      <updated>1749965890596</updated>
    </task>
    <task id="LOCAL-00036" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1750035986807</created>
      <option name="number" value="00036" />
      <option name="presentableId" value="LOCAL-00036" />
      <option name="project" value="LOCAL" />
      <updated>1750035986807</updated>
    </task>
    <task id="LOCAL-00037" summary="Merge remote-tracking branch 'origin/main'">
      <option name="closed" value="true" />
      <created>1750037671374</created>
      <option name="number" value="00037" />
      <option name="presentableId" value="LOCAL-00037" />
      <option name="project" value="LOCAL" />
      <updated>1750037671374</updated>
    </task>
    <task id="LOCAL-00038" summary="Starting work on the table, which will give us the bank shot visualization">
      <option name="closed" value="true" />
      <created>1750043529283</created>
      <option name="number" value="00038" />
      <option name="presentableId" value="LOCAL-00038" />
      <option name="project" value="LOCAL" />
      <updated>1750043529283</updated>
    </task>
    <task id="LOCAL-00039" summary="Starting work on the table, which will give us the bank shot visualization">
      <option name="closed" value="true" />
      <created>1750045564065</created>
      <option name="number" value="00039" />
      <option name="presentableId" value="LOCAL-00039" />
      <option name="project" value="LOCAL" />
      <updated>1750045564065</updated>
    </task>
    <task id="LOCAL-00040" summary="Fixing a bug in the touch UI">
      <option name="closed" value="true" />
      <created>1750047075185</created>
      <option name="number" value="00040" />
      <option name="presentableId" value="LOCAL-00040" />
      <option name="project" value="LOCAL" />
      <updated>1750047075185</updated>
    </task>
    <task id="LOCAL-00041" summary="Fixing a bug in the touch UI&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750064494950</created>
      <option name="number" value="00041" />
      <option name="presentableId" value="LOCAL-00041" />
      <option name="project" value="LOCAL" />
      <updated>1750064494950</updated>
    </task>
    <task id="LOCAL-00042" summary="Fixing a bug in the touch UI&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750064723466</created>
      <option name="number" value="00042" />
      <option name="presentableId" value="LOCAL-00042" />
      <option name="project" value="LOCAL" />
      <updated>1750064723466</updated>
    </task>
    <task id="LOCAL-00043" summary="Fixing a bug in the touch UI&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750064792487</created>
      <option name="number" value="00043" />
      <option name="presentableId" value="LOCAL-00043" />
      <option name="project" value="LOCAL" />
      <updated>1750064792487</updated>
    </task>
    <task id="LOCAL-00044" summary="Fixing a bug in the touch UI&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750064967962</created>
      <option name="number" value="00044" />
      <option name="presentableId" value="LOCAL-00044" />
      <option name="project" value="LOCAL" />
      <updated>1750064967962</updated>
    </task>
    <task id="LOCAL-00045" summary="Merge remote-tracking branch 'CueDetat/main'&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/domain/StateReducer.kt&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt">
      <option name="closed" value="true" />
      <created>1750065040768</created>
      <option name="number" value="00045" />
      <option name="presentableId" value="LOCAL-00045" />
      <option name="project" value="LOCAL" />
      <updated>1750065040768</updated>
    </task>
    <task id="LOCAL-00046" summary="Merge remote-tracking branch 'CueDetat/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/domain/StateReducer.kt&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt">
      <option name="closed" value="true" />
      <created>1750065065628</created>
      <option name="number" value="00046" />
      <option name="presentableId" value="LOCAL-00046" />
      <option name="project" value="LOCAL" />
      <updated>1750065065628</updated>
    </task>
    <task id="LOCAL-00047" summary="Getting that bank calculator up innere.">
      <option name="closed" value="true" />
      <created>1750076882255</created>
      <option name="number" value="00047" />
      <option name="presentableId" value="LOCAL-00047" />
      <option name="project" value="LOCAL" />
      <updated>1750076882255</updated>
    </task>
    <task id="LOCAL-00048" summary="Getting that bank calculator up innere.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;">
      <option name="closed" value="true" />
      <created>1750077441843</created>
      <option name="number" value="00048" />
      <option name="presentableId" value="LOCAL-00048" />
      <option name="project" value="LOCAL" />
      <updated>1750077441843</updated>
    </task>
    <task id="LOCAL-00049" summary="Merge branch 'main' of https://github.com/HereLiesAz/CueDetat&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md">
      <option name="closed" value="true" />
      <created>1750077737903</created>
      <option name="number" value="00049" />
      <option name="presentableId" value="LOCAL-00049" />
      <option name="project" value="LOCAL" />
      <updated>1750077737903</updated>
    </task>
    <task id="LOCAL-00050" summary="NOW I'm getting the table and bank shot calculator in there.">
      <option name="closed" value="true" />
      <created>1750078295700</created>
      <option name="number" value="00050" />
      <option name="presentableId" value="LOCAL-00050" />
      <option name="project" value="LOCAL" />
      <updated>1750078295701</updated>
    </task>
    <option name="localTasksCounter" value="51" />
    <servers />
  </component>
  <component name="Vcs.Log.History.Properties">
    <option name="SHOW_DETAILS" value="true" />
    <option name="SHOW_ROOT_NAMES" value="true" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="RECENT_FILTERS">
      <map>
        <entry key="User">
          <value>
            <list>
              <RecentGroup>
                <option name="FILTER_VALUES">
                  <option value="*" />
                </option>
              </RecentGroup>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="branch">
                    <value>
                      <list>
                        <option value="CueDetat/main" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT" value="true" />
    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
    <option name="MARK_IGNORED_AS_EXCLUDED" value="true" />
    <option name="CLEAR_INITIAL_COMMIT_MESSAGE" value="true" />
    <MESSAGE value="init" />
    <MESSAGE value="init&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <MESSAGE value="Merge remote-tracking branch 'origin/main'&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/OverlayRenderer.kt" />
    <MESSAGE value="Merge remote-tracking branch 'origin/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/renderer/OverlayRenderer.kt" />
    <MESSAGE value="Merge remote-tracking branch 'origin/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <MESSAGE value="Last bits of housekeeping before starting the first major functional upgrade." />
    <MESSAGE value="Last bits of housekeeping before starting the first major functional upgrade.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <MESSAGE value="Merge remote-tracking branch 'origin/main'" />
    <MESSAGE value="Starting work on the table, which will give us the bank shot visualization" />
    <MESSAGE value="Fixing a bug in the touch UI" />
    <MESSAGE value="Fixing a bug in the touch UI&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <MESSAGE value="Merge remote-tracking branch 'CueDetat/main'&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/domain/StateReducer.kt&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt" />
    <MESSAGE value="Merge remote-tracking branch 'CueDetat/main'&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/domain/StateReducer.kt&#10;#&#9;app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt" />
    <MESSAGE value="Getting that bank calculator up innere." />
    <MESSAGE value="Getting that bank calculator up innere.&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;" />
    <MESSAGE value="Merge branch 'main' of https://github.com/HereLiesAz/CueDetat&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md" />
    <MESSAGE value="Merge branch 'main' of https://github.com/HereLiesAz/CueDetat&#10;&#10;Signed-off-by: hereliesaz &lt;hereliesaz@gmail.com&gt;&#10;&#10;# Conflicts:&#10;#&#9;Developers_Guide.md" />
    <MESSAGE value="NOW I'm getting the table and bank shot calculator in there." />
    <option name="LAST_COMMIT_MESSAGE" value="NOW I'm getting the table and bank shot calculator in there." />
    <option name="MAKE_NEW_CHANGELIST_ACTIVE" value="true" />
    <option name="OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT" value="true" />
    <option name="REFORMAT_BEFORE_PROJECT_COMMIT" value="true" />
    <option name="REARRANGE_BEFORE_PROJECT_COMMIT" value="true" />
  </component>
  <component name="play_dynamic_filters_status">
    <option name="appIdToCheckInfo">
      <map>
        <entry key="com.hereliesaz.cuedetat">
          <value>
            <CheckInfo lastCheckTimestamp="1750539214952" />
          </value>
        </entry>
        <entry key="com.hereliesaz.cuedetat.test">
          <value>
            <CheckInfo lastCheckTimestamp="1750539214950" />
          </value>
        </entry>
        <entry key="com.hereliesaz.cuedetat.trackless">
          <value>
            <CheckInfo lastCheckTimestamp="1749320159617" />
          </value>
        </entry>
        <entry key="com.hereliesaz.cuedetat.trackless.test">
          <value>
            <CheckInfo lastCheckTimestamp="1749320159623" />
          </value>
        </entry>
        <entry key="com.hereliesaz.poolprotractor.trackless.trackless">
          <value>
            <CheckInfo lastCheckTimestamp="1749319794625" />
          </value>
        </entry>
        <entry key="com.hereliesaz.poolprotractor.trackless.trackless.test">
          <value>
            <CheckInfo lastCheckTimestamp="1749319794627" />
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>


--- FILE: app/.gitignore ---

/build


--- FILE: app/proguard-rules.pro ---

# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile



--- FILE: app/release/output-metadata.json ---

{
  "version": 3,
  "artifactType": {
    "type": "APK",
    "kind": "Directory"
  },
  "applicationId": "com.hereliesaz.cuedetat",
  "variantName": "release",
  "elements": [
    {
      "type": "SINGLE",
      "filters": [],
      "attributes": [],
      "versionCode": 11,
      "versionName": "0.3.46",
      "outputFile": "CueDetat-0.3.46-release.apk"
    }
  ],
  "elementType": "File",
  "baselineProfiles": [
    {
      "minApi": 28,
      "maxApi": 30,
      "baselineProfiles": [
        "baselineProfiles/1/CueDetat-0.3.46-release.dm"
      ]
    },
    {
      "minApi": 31,
      "maxApi": 2147483647,
      "baselineProfiles": [
        "baselineProfiles/0/CueDetat-0.3.46-release.dm"
      ]
    }
  ],
  "minSdkVersionForDexing": 26
}


--- FILE: app/src/main/AndroidManifest.xml ---

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.CAMERA" />
    <uses-feature android:name="android.hardware.camera.any" />

    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:name=".MyApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.CueDetat"
        android:enableOnBackInvokedCallback="true"
        tools:targetApi="36">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:theme="@style/Theme.CueDetat">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/data/GithubRepository.kt ---

package com.hereliesaz.cuedetat.data

import com.hereliesaz.cuedetat.network.GithubApi
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Represents the result of a version fetch, providing more detail than a nullable string.
 */
sealed class VersionResult {
    /**
     * Indicates a successful fetch.
     * @param tagName The version tag from the release.
     */
    data class Success(val tagName: String) : VersionResult()

    /**
     * Indicates a failed API request.
     * @param code The HTTP status code of the failure.
     */
    data class Failure(val code: Int) : VersionResult()

    /**
     * Indicates a network or other unknown error occurred.
     */
    object Error : VersionResult()
}

@Singleton
class GithubRepository @Inject constructor(private val githubApi: GithubApi) {

    companion object {
        private const val REPO_OWNER = "hereliesaz"
        private const val REPO_NAME = "CueDetat"
    }

    /**
     * Fetches the latest release version name from the project's GitHub repository.
     * @return A [VersionResult] indicating success, failure with an HTTP code, or a generic error.
     */
    suspend fun getLatestVersion(): VersionResult {
        return try {
            val response = githubApi.getLatestRelease(REPO_OWNER, REPO_NAME)
            if (response.isSuccessful) {
                // If successful, ensure the body and tag name are not null.
                response.body()?.tag_name?.let {
                    VersionResult.Success(it)
                } ?: VersionResult.Failure(response.code()) // Success but empty body is a failure.
            } else {
                // If the request was not successful, return the HTTP error code.
                VersionResult.Failure(response.code())
            }
        } catch (e: Exception) {
            // Exceptions are the universe's way of saying "not today."
            VersionResult.Error
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/data/SensorRepository.kt ---

package com.hereliesaz.cuedetat.data

import android.content.Context
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.callbackFlow
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class SensorRepository @Inject constructor(
    @ApplicationContext context: Context
) {
    private val sensorManager = context.getSystemService(Context.SENSOR_SERVICE) as SensorManager
    private val rotationVectorSensor: Sensor? =
        sensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR)

    val pitchAngleFlow: Flow<Float> = callbackFlow {
        val listener = object : SensorEventListener {
            private val rotationMatrix = FloatArray(9)
            private val orientationAngles = FloatArray(3)

            override fun onSensorChanged(event: SensorEvent?) {
                if (event?.sensor?.type == Sensor.TYPE_ROTATION_VECTOR) {
                    SensorManager.getRotationMatrixFromVector(rotationMatrix, event.values)
                    SensorManager.getOrientation(rotationMatrix, orientationAngles)
                    val pitchInRadians = orientationAngles[1]
                    val pitchInDegrees = Math.toDegrees(pitchInRadians.toDouble()).toFloat()
                    trySend(-pitchInDegrees)
                }
            }

            override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {
                // Not used
            }
        }

        if (rotationVectorSensor != null) {
            sensorManager.registerListener(
                listener,
                rotationVectorSensor,
                SensorManager.SENSOR_DELAY_GAME
            )
        }

        awaitClose {
            sensorManager.unregisterListener(listener)
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/data/UpdateChecker.kt ---

package com.hereliesaz.cuedetat.data

import com.hereliesaz.cuedetat.BuildConfig
import javax.inject.Inject
import javax.inject.Singleton

/**
 * A sealed class representing the possible outcomes of an update check.
 */
sealed class UpdateResult {
    object UpToDate : UpdateResult()
    data class UpdateAvailable(val latestVersion: String) : UpdateResult()

    /**
     * Indicates that the update check failed.
     * @param reason A user-facing string explaining why.
     */
    data class CheckFailed(val reason: String) : UpdateResult()
}

/**
 * A dedicated class to handle the application update check logic.
 * It encapsulates the process of fetching the latest version and comparing it
 * with the current installed version.
 */
@Singleton
class UpdateChecker @Inject constructor(private val githubRepository: GithubRepository) {

    /**
     * Checks for a new application version on GitHub.
     * @return An [UpdateResult] indicating the outcome of the check.
     */
    suspend fun checkForUpdate(): UpdateResult {
        val versionResult = githubRepository.getLatestVersion()
        val currentVersion = BuildConfig.VERSION_NAME

        return when (versionResult) {
            is VersionResult.Success -> {
                val comparableLatestVersion = versionResult.tagName.removePrefix("v")
                if (comparableLatestVersion == currentVersion) {
                    UpdateResult.UpToDate
                } else {
                    UpdateResult.UpdateAvailable(versionResult.tagName)
                }
            }

            is VersionResult.Failure -> {
                // Provide a more descriptive reason based on the HTTP code.
                val reason = if (versionResult.code == 404) {
                    "No public release found."
                } else {
                    "API request failed (Code: ${versionResult.code})"
                }
                UpdateResult.CheckFailed(reason)
            }

            is VersionResult.Error -> {
                UpdateResult.CheckFailed("A network error occurred.")
            }
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/di/AppModule.kt ---

package com.hereliesaz.cuedetat.di

import com.hereliesaz.cuedetat.network.GithubApi
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object AppModule {

    @Provides
    @Singleton
    fun provideGithubApi(): GithubApi {
        return Retrofit.Builder()
            .baseUrl("https://api.github.com/")
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(GithubApi::class.java)
    }
}



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/domain/StateReducer.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/domain/StateReducer.kt
package com.hereliesaz.cuedetat.domain

import android.graphics.PointF
import com.hereliesaz.cuedetat.ui.MainScreenEvent
import com.hereliesaz.cuedetat.ui.ZoomMapping
import com.hereliesaz.cuedetat.view.model.ActualCueBall
import com.hereliesaz.cuedetat.view.model.Perspective
import com.hereliesaz.cuedetat.view.model.ProtractorUnit
import com.hereliesaz.cuedetat.view.state.OverlayState
import javax.inject.Inject
import kotlin.math.min

class StateReducer @Inject constructor() {

    private val tableToBallRatioLong = 88f

    fun reduce(currentState: OverlayState, event: MainScreenEvent): OverlayState {
        return when (event) {
            is MainScreenEvent.SizeChanged -> {
                if (currentState.viewWidth == 0) createInitialState(event.width, event.height)
                else currentState
            }

            is MainScreenEvent.ZoomScaleChanged -> {
                val currentZoom = ZoomMapping.sliderToZoom(currentState.zoomSliderPosition)
                val newZoom = (currentZoom * event.scaleFactor)
                    .coerceIn(ZoomMapping.MIN_ZOOM, ZoomMapping.MAX_ZOOM)
                val newSliderPos = ZoomMapping.zoomToSlider(newZoom)
                val newRadius =
                    (min(currentState.viewWidth, currentState.viewHeight) * 0.30f / 2f) * newZoom

                currentState.copy(
                    protractorUnit = currentState.protractorUnit.copy(radius = newRadius),
                    actualCueBall = currentState.actualCueBall?.copy(radius = newRadius),
                    zoomSliderPosition = newSliderPos,
                    valuesChangedSinceReset = true
                )
            }

            is MainScreenEvent.ZoomSliderChanged -> {
                val newSliderPos = event.position.coerceIn(0f, 100f)
                val newZoom = ZoomMapping.sliderToZoom(newSliderPos)
                    .coerceIn(ZoomMapping.MIN_ZOOM, ZoomMapping.MAX_ZOOM)
                val newRadius =
                    (min(currentState.viewWidth, currentState.viewHeight) * 0.30f / 2f) * newZoom

                currentState.copy(
                    protractorUnit = currentState.protractorUnit.copy(radius = newRadius),
                    actualCueBall = currentState.actualCueBall?.copy(radius = newRadius),
                    zoomSliderPosition = newSliderPos,
                    valuesChangedSinceReset = true
                )
            }

            is MainScreenEvent.RotationChanged -> {
                var normAng = event.newRotation % 360f
                if (normAng < 0) normAng += 360f
                currentState.copy(
                    protractorUnit = currentState.protractorUnit.copy(rotationDegrees = normAng),
                    valuesChangedSinceReset = true
                )
            }

            is MainScreenEvent.PitchAngleChanged -> currentState.copy(pitchAngle = event.pitch)

            is MainScreenEvent.UnitMoved -> {
                if (currentState.hasInverseMatrix) {
                    val newTarget =
                        Perspective.screenToLogical(event.position, currentState.inversePitchMatrix)
                    currentState.copy(
                        protractorUnit = currentState.protractorUnit.copy(center = newTarget),
                        valuesChangedSinceReset = true
                    )
                } else currentState
            }

            is MainScreenEvent.ActualCueBallMoved -> {
                if (currentState.hasInverseMatrix && currentState.actualCueBall != null) {
                    val newTarget =
                        Perspective.screenToLogical(event.position, currentState.inversePitchMatrix)
                    currentState.copy(
                        actualCueBall = currentState.actualCueBall.copy(center = newTarget),
                        valuesChangedSinceReset = true
                    )
                } else currentState
            }

            is MainScreenEvent.ToggleActualCueBall -> handleToggleActualCueBall(currentState)

            is MainScreenEvent.ToggleBankingMode -> handleToggleBankingMode(currentState)

            is MainScreenEvent.Reset -> {
                val newRadius = (min(
                    currentState.viewWidth,
                    currentState.viewHeight
                ) * 0.30f / 2f) * ZoomMapping.DEFAULT_ZOOM
                val updatedActualCueBall = currentState.actualCueBall?.copy(radius = newRadius)
                currentState.copy(
                    protractorUnit = ProtractorUnit(
                        center = PointF(currentState.viewWidth / 2f, currentState.viewHeight / 2f),
                        radius = newRadius,
                        rotationDegrees = 0f
                    ),
                    actualCueBall = updatedActualCueBall,
                    zoomSliderPosition = ZoomMapping.zoomToSlider(ZoomMapping.DEFAULT_ZOOM),
                    valuesChangedSinceReset = false,
                    pitchAngle = 0.0f,
                    isMoreHelpVisible = false,
                    areHelpersVisible = false,
                    isBankingMode = false
                )
            }

            is MainScreenEvent.ToggleHelp -> currentState.copy(areHelpersVisible = !currentState.areHelpersVisible)
            is MainScreenEvent.ToggleMoreHelp -> currentState.copy(isMoreHelpVisible = !currentState.isMoreHelpVisible)
            else -> currentState
        }
    }

    private fun handleToggleBankingMode(currentState: OverlayState): OverlayState {
        val bankingEnabled = !currentState.isBankingMode

        if (bankingEnabled) {
            // --- Auto-zoom logic ---
            val baseRadiusAtUnitZoom =
                (min(currentState.viewWidth, currentState.viewHeight) * 0.30f / 2f)
            val tableLogicalWidth = tableToBallRatioLong * baseRadiusAtUnitZoom
            // Target the rotated table's logical width to fit into 95% of the screen's height
            val desiredScreenHeight = currentState.viewHeight * 0.95f
            val newZoom = (desiredScreenHeight / tableLogicalWidth).coerceIn(
                ZoomMapping.MIN_ZOOM,
                ZoomMapping.MAX_ZOOM
            )
            val newSliderPos = ZoomMapping.zoomToSlider(newZoom)
            val newRadius = baseRadiusAtUnitZoom * newZoom

            // --- Centered cue ball logic ---
            val tableCenter = PointF(currentState.viewWidth / 2f, currentState.viewHeight / 2f)
            val newActualCueBall = ActualCueBall(
                center = tableCenter,
                radius = newRadius
            )

            return currentState.copy(
                isBankingMode = true,
                actualCueBall = newActualCueBall,
                protractorUnit = currentState.protractorUnit.copy(radius = newRadius),
                zoomSliderPosition = newSliderPos,
                warningText = null
            )
        } else {
            // When turning banking mode OFF, just toggle the flag.
            return currentState.copy(isBankingMode = false)
        }
    }


    private fun handleToggleActualCueBall(currentState: OverlayState): OverlayState {
        return if (currentState.actualCueBall == null) {
            if (!currentState.hasInverseMatrix) return currentState

            val ghostCueBallPos = currentState.protractorUnit.protractorCueBallCenter
            val screenBottomCenter =
                floatArrayOf(currentState.viewWidth / 2f, currentState.viewHeight.toFloat())
            val logicalBottomCenterArray = FloatArray(2)
            currentState.inversePitchMatrix.mapPoints(logicalBottomCenterArray, screenBottomCenter)
            val logicalBottomPos = PointF(logicalBottomCenterArray[0], logicalBottomCenterArray[1])

            val newDefaultPos = PointF(
                (ghostCueBallPos.x + logicalBottomPos.x) / 2f,
                (ghostCueBallPos.y + logicalBottomPos.y) / 2f
            )
            currentState.copy(
                actualCueBall = ActualCueBall(
                    center = newDefaultPos,
                    radius = currentState.protractorUnit.radius
                )
            )
        } else {
            currentState.copy(actualCueBall = null)
        }
    }

    private fun createInitialState(viewWidth: Int, viewHeight: Int): OverlayState {
        val radius = (min(viewWidth, viewHeight) * 0.30f / 2f) * ZoomMapping.DEFAULT_ZOOM
        return OverlayState(
            viewWidth = viewWidth,
            viewHeight = viewHeight,
            protractorUnit = ProtractorUnit(
                center = PointF(viewWidth / 2f, viewHeight / 2f),
                radius = radius,
                rotationDegrees = 0f
            ),
            zoomSliderPosition = ZoomMapping.zoomToSlider(ZoomMapping.DEFAULT_ZOOM)
        )
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/domain/UpdateStateUseCase.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/domain/UpdateStateUseCase.kt
package com.hereliesaz.cuedetat.domain

import android.graphics.Camera
import android.graphics.Matrix
import android.graphics.PointF
import com.hereliesaz.cuedetat.view.model.Perspective
import com.hereliesaz.cuedetat.view.state.OverlayState
import javax.inject.Inject
import kotlin.math.pow
import kotlin.math.sqrt

class UpdateStateUseCase @Inject constructor() {

    operator fun invoke(state: OverlayState, camera: Camera): OverlayState {
        if (state.viewWidth == 0 || state.viewHeight == 0) return state

        // Create the base matrix for the table surface and aiming tools
        val pitchMatrix = Perspective.createPitchMatrix(
            state.pitchAngle,
            state.viewWidth,
            state.viewHeight,
            camera
        )

        // Create the lifted matrix for the rails
        val railHeight = state.protractorUnit.radius * 1.5f
        val railPitchMatrix = Perspective.createPitchMatrix(
            state.pitchAngle,
            state.viewWidth,
            state.viewHeight,
            camera,
            lift = railHeight
        )

        // If in banking mode, apply a 90-degree rotation to both matrices
        if (state.isBankingMode) {
            val centerX = state.viewWidth / 2f
            val centerY = state.viewHeight / 2f
            pitchMatrix.preRotate(90f, centerX, centerY)
            railPitchMatrix.preRotate(90f, centerX, centerY)
        }


        val inverseMatrix = Matrix()
        val hasInverse = pitchMatrix.invert(inverseMatrix)

        val anchorPointA: PointF? = if (state.actualCueBall != null) {
            state.actualCueBall.center
        } else {
            if (hasInverse) {
                val screenAnchor = floatArrayOf(state.viewWidth / 2f, state.viewHeight.toFloat())
                val logicalAnchorArray = FloatArray(2)
                inverseMatrix.mapPoints(logicalAnchorArray, screenAnchor)
                PointF(logicalAnchorArray[0], logicalAnchorArray[1])
            } else {
                null
            }
        }

        val isImpossible = anchorPointA?.let { anchor ->
            val distAtoG = distance(anchor, state.protractorUnit.protractorCueBallCenter)
            val distAtoT = distance(anchor, state.protractorUnit.center)
            distAtoG > distAtoT
        } ?: false

        return state.copy(
            pitchMatrix = pitchMatrix,
            railPitchMatrix = railPitchMatrix, // Store the new rail matrix
            inversePitchMatrix = inverseMatrix,
            hasInverseMatrix = hasInverse,
            isImpossibleShot = isImpossible
        )
    }

    private fun distance(p1: PointF, p2: PointF): Float =
        sqrt((p1.x - p2.x).pow(2) + (p1.y - p2.y).pow(2))
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/domain/WarningManager.kt ---

package com.hereliesaz.cuedetat.domain

import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

class WarningManager @Inject constructor() {

    private var warningIndex = 0
    private var warningDismissJob: Job? = null

    private val _currentWarning = MutableStateFlow<String?>(null)
    val currentWarning = _currentWarning.asStateFlow()

    fun triggerWarning(warnings: Array<String>, scope: CoroutineScope) {
        warningDismissJob?.cancel()
        _currentWarning.value = warnings[warningIndex]
        warningIndex = (warningIndex + 1) % warnings.size
        warningDismissJob = scope.launch {
            delay(3000L)
            dismissWarning()
        }
    }

    private fun dismissWarning() {
        _currentWarning.value = null
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/MainActivity.kt ---

package com.hereliesaz.cuedetat

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.viewModels
import androidx.compose.runtime.Composable
import androidx.core.content.ContextCompat
import androidx.core.view.WindowCompat
import androidx.lifecycle.lifecycleScope
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.hereliesaz.cuedetat.ui.MainScreen
import com.hereliesaz.cuedetat.ui.MainScreenEvent
import com.hereliesaz.cuedetat.ui.MainViewModel
import com.hereliesaz.cuedetat.ui.theme.CueDetatTheme
import com.hereliesaz.cuedetat.view.state.SingleEvent
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach

@AndroidEntryPoint
class MainActivity : ComponentActivity() {

    private val viewModel: MainViewModel by viewModels()

    private val requestCameraPermissionLauncher =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted ->
            if (isGranted) {
                recreate()
            }
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        WindowCompat.setDecorFitsSystemWindows(window, false)

        if (hasCameraPermission()) {
            setContent {
                AppContent()
            }
        } else {
            requestCameraPermissionLauncher.launch(Manifest.permission.CAMERA)
        }

        observeSingleEvents()
    }

    private fun observeSingleEvents() {
        viewModel.singleEvent.onEach { event ->
            when (event) {
                is SingleEvent.OpenUrl -> {
                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(event.url))
                    startActivity(intent)
                    viewModel.onEvent(MainScreenEvent.SingleEventConsumed)
                }

                is SingleEvent.ShowDonationDialog -> {
                    showDonationDialog()
                    viewModel.onEvent(MainScreenEvent.SingleEventConsumed)
                }
                null -> {
                    // Do nothing
                }
            }
        }.launchIn(lifecycleScope)
    }

    private fun showDonationDialog() {
        val items = arrayOf("PayPal", "Venmo", "CashApp")
        val urls = arrayOf(
            "https://paypal.me/azcamehere",
            "https://venmo.com/u/hereliesaz",
            "https://cash.app/\$azcamehere"
        )

        MaterialAlertDialogBuilder(this)
            .setTitle("Chalk Your Tip")
            .setItems(items) { _, which ->
                if (which < urls.size) {
                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(urls[which]))
                    startActivity(intent)
                }
            }
            .setNegativeButton("Maybe Later", null)
            .show()
    }

    @Composable
    private fun AppContent() {
        CueDetatTheme {
            MainScreen(viewModel = viewModel)
        }
    }

    private fun hasCameraPermission() =
        ContextCompat.checkSelfPermission(
            this,
            Manifest.permission.CAMERA
        ) == PackageManager.PERMISSION_GRANTED
}



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/MyApplication.kt ---

package com.hereliesaz.cuedetat

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

/**
 * The Application class, annotated with @HiltAndroidApp, is the entry point for Hilt
 * and is responsible for creating the top-level dependency container.
 */
@HiltAndroidApp
class MyApplication : Application() {
    // This class can be empty. Its presence and annotation are all that's needed for Hilt.
}



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/network/GithubApi.kt ---

package com.hereliesaz.cuedetat.network

import retrofit2.Response
import retrofit2.http.GET
import retrofit2.http.Path

/**
 * A data class representing the relevant fields from a GitHub Release API response.
 * We only care about the tag name, which contains the version.
 */
data class GithubRelease(
    val tag_name: String
)

/**
 * Retrofit interface for the GitHub API.
 * Defines the endpoint for fetching the latest release of a repository.
 */
interface GithubApi {
    @GET("repos/{owner}/{repo}/releases/latest")
    suspend fun getLatestRelease(
        @Path("owner") owner: String,
        @Path("repo") repo: String
    ): Response<GithubRelease>
}



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/CameraPreview.kt ---

package com.hereliesaz.cuedetat.ui

import androidx.camera.core.CameraSelector
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.viewinterop.AndroidView
import androidx.core.content.ContextCompat
import androidx.lifecycle.compose.LocalLifecycleOwner

@Composable
fun CameraPreview(
    modifier: Modifier = Modifier,
    scaleType: PreviewView.ScaleType = PreviewView.ScaleType.FILL_CENTER
) {
    val context = LocalContext.current
    val lifecycleOwner = LocalLifecycleOwner.current // This now uses the correct dependency
    val cameraProviderFuture = remember { ProcessCameraProvider.getInstance(context) }

    AndroidView(
        factory = { ctx ->
            val previewView = PreviewView(ctx).apply {
                this.scaleType = scaleType
            }
            val executor = ContextCompat.getMainExecutor(ctx)
            cameraProviderFuture.addListener({
                val cameraProvider = cameraProviderFuture.get()
                val preview = Preview.Builder().build().also {
                    it.surfaceProvider = previewView.surfaceProvider
                }
                val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA
                try {
                    cameraProvider.unbindAll()
                    cameraProvider.bindToLifecycle(lifecycleOwner, cameraSelector, preview)
                } catch (exc: Exception) {
                    // Log error or handle exception
                }
            }, executor)
            previewView
        },
        modifier = modifier
    )
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/composables/ActionFabs.kt ---

package com.hereliesaz.cuedetat.ui.composables

import androidx.compose.foundation.layout.navigationBarsPadding
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.hereliesaz.cuedetat.R
import com.hereliesaz.cuedetat.ui.MainScreenEvent
import com.hereliesaz.cuedetat.view.state.OverlayState

@Composable
fun ResetFab(
    uiState: OverlayState,
    onEvent: (MainScreenEvent) -> Unit,
    modifier: Modifier = Modifier
) {
    FloatingActionButton(
        onClick = { onEvent(MainScreenEvent.Reset) },
        modifier = modifier
            .padding(16.dp)
            .navigationBarsPadding(),
        containerColor = if (uiState.valuesChangedSinceReset) MaterialTheme.colorScheme.secondaryContainer else MaterialTheme.colorScheme.surfaceVariant
    ) {
        if (uiState.areHelpersVisible) {
            Text(
                text = "Reset\nView",
                textAlign = TextAlign.Center,
                style = MaterialTheme.typography.labelSmall,
                color = if (uiState.valuesChangedSinceReset) MaterialTheme.colorScheme.onSecondaryContainer else MaterialTheme.colorScheme.onSurfaceVariant
            )
        } else {
            Icon(
                painter = painterResource(id = R.drawable.ic_undo_24),
                contentDescription = "Reset View",
                tint = if (uiState.valuesChangedSinceReset) MaterialTheme.colorScheme.onSecondaryContainer else MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

@Composable
fun ToggleCueBallFab(
    uiState: OverlayState,
    onEvent: (MainScreenEvent) -> Unit,
    modifier: Modifier = Modifier
) {
    FloatingActionButton(
        onClick = { onEvent(MainScreenEvent.ToggleActualCueBall) },
        modifier = modifier
            .padding(16.dp)
            .navigationBarsPadding(),
        containerColor = if (uiState.actualCueBall != null) MaterialTheme.colorScheme.secondaryContainer else MaterialTheme.colorScheme.surfaceVariant
    ) {
        if (uiState.areHelpersVisible) {
            Text(
                text = "Cue Ball\nToggle",
                textAlign = TextAlign.Center,
                style = MaterialTheme.typography.labelSmall,
                color = if (uiState.actualCueBall != null) MaterialTheme.colorScheme.onSecondaryContainer else MaterialTheme.colorScheme.onSurfaceVariant
            )
        } else {
            Icon(
                painter = painterResource(id = R.drawable.ic_jump_shot),
                contentDescription = "Toggle Actual Cue Ball",
                tint = if (uiState.actualCueBall != null) MaterialTheme.colorScheme.onSecondaryContainer else MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/composables/CameraBackground.kt ---

package com.hereliesaz.cuedetat.ui.composables

import androidx.camera.core.CameraSelector
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.viewinterop.AndroidView
import androidx.core.content.ContextCompat

@Composable
fun CameraBackground(
    modifier: Modifier = Modifier,
    scaleType: PreviewView.ScaleType = PreviewView.ScaleType.FILL_CENTER
) {
    val context = LocalContext.current
    val lifecycleOwner = LocalLifecycleOwner.current
    val cameraProviderFuture = remember { ProcessCameraProvider.getInstance(context) }

    AndroidView(
        factory = { ctx ->
            val previewView = PreviewView(ctx).apply {
                this.scaleType = scaleType
            }
            val executor = ContextCompat.getMainExecutor(ctx)
            cameraProviderFuture.addListener({
                val cameraProvider = cameraProviderFuture.get()
                val preview = Preview.Builder().build().also {
                    it.surfaceProvider = previewView.surfaceProvider
                }
                val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA
                try {
                    cameraProvider.unbindAll()
                    cameraProvider.bindToLifecycle(lifecycleOwner, cameraSelector, preview)
                } catch (exc: Exception) {
                    // Log error or handle exception
                }
            }, executor)
            previewView
        },
        modifier = modifier
    )
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/composables/KineticWarning.kt ---

package com.hereliesaz.cuedetat.ui.composables

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.BiasAlignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.platform.LocalResources
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.ExperimentalTextApi
import androidx.compose.ui.text.TextLayoutResult
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.rememberTextMeasurer
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.hereliesaz.cuedetat.ui.theme.WarningRed
import kotlin.random.Random

@OptIn(ExperimentalTextApi::class)
@Composable
fun KineticWarningOverlay(text: String?, modifier: Modifier = Modifier) {
    // Generate a random alignment each time a new warning appears
    val randomAlignment = remember(text) {
        if (text == null) Alignment.Center else
            BiasAlignment(
                horizontalBias = Random.nextDouble(-0.5, 0.5).toFloat(),
                verticalBias = Random.nextDouble(-0.7, 0.7).toFloat()
            )
    }

    AnimatedVisibility(
        visible = text != null,
        modifier = modifier.fillMaxSize(),
        enter = fadeIn(animationSpec = tween(300)),
        exit = fadeOut(animationSpec = tween(1000))
    ) {
        // This Box is now the root of the visible content. It does not fill the
        // screen and therefore cannot block touches meant for what's underneath.
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            contentAlignment = randomAlignment
        ) {
            if (text != null) {
                Column(
                    horizontalAlignment = Alignment.Start, // Align column content to the left
                    verticalArrangement = Arrangement.Center
                ) {
                    val words = text.split(" ")
                    val textMeasurer = rememberTextMeasurer()
                    val style = MaterialTheme.typography.displayLarge.copy(
                        textAlign = TextAlign.Start, // Align text to the left
                        color = WarningRed.copy(alpha = 0.85f)
                    )
                    val screenWidthPx = with(LocalDensity.current) {
                        (LocalResources.current.displayMetrics.widthPixels - 64.dp.toPx())
                    }

                    var currentLineWords = mutableListOf<String>()
                    words.forEach { word ->
                        val testLine = (currentLineWords + word).joinToString(" ")
                        val textLayoutResult = textMeasurer.measure(
                            text = AnnotatedString(testLine),
                            style = style.copy(fontSize = 100.sp)
                        )

                        if (textLayoutResult.size.width > screenWidthPx && currentLineWords.isNotEmpty()) {
                            KineticLine(
                                text = currentLineWords.joinToString(" "),
                                style = style,
                                screenWidthPx = screenWidthPx
                            )
                            currentLineWords = mutableListOf(word)
                        } else {
                            currentLineWords.add(word)
                        }
                    }
                    if (currentLineWords.isNotEmpty()) {
                        KineticLine(
                            text = currentLineWords.joinToString(" "),
                            style = style,
                            screenWidthPx = screenWidthPx
                        )
                    }
                }
            }
        }
    }
}

@Composable
private fun KineticLine(text: String, style: TextStyle, screenWidthPx: Float) {
    var readyToDraw by remember { mutableStateOf(false) }
    var dynamicFontSize by remember { mutableStateOf(100.sp) }

    Text(
        text = text,
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 2.dp),
        style = style.copy(fontSize = dynamicFontSize),
        maxLines = 1,
        onTextLayout = { result: TextLayoutResult ->
            if (result.hasVisualOverflow && !readyToDraw) {
                val scaleFactor = screenWidthPx / result.size.width
                dynamicFontSize = (dynamicFontSize.value * scaleFactor * 0.95f).sp
            } else {
                readyToDraw = true
            }
        }
    )
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/composables/MenuDrawer.kt ---

package com.hereliesaz.cuedetat.ui.composables

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.outlined.HelpOutline
import androidx.compose.material.icons.outlined.Brush
import androidx.compose.material.icons.outlined.MonetizationOn
import androidx.compose.material.icons.outlined.SystemUpdate
import androidx.compose.material.icons.outlined.ViewInAr
import androidx.compose.material3.DividerDefaults
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.ModalDrawerSheet
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.res.vectorResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.hereliesaz.cuedetat.R
import com.hereliesaz.cuedetat.ui.MainScreenEvent
import com.hereliesaz.cuedetat.ui.theme.AccentGold
import com.hereliesaz.cuedetat.view.state.OverlayState

@Composable
fun MenuDrawerContent(
    uiState: OverlayState,
    onEvent: (MainScreenEvent) -> Unit,
    onCloseDrawer: () -> Unit
) {
    ModalDrawerSheet {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 24.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = stringResource(id = R.string.app_name),
                color = AccentGold,
                style = MaterialTheme.typography.displaySmall,
                textAlign = TextAlign.Center
            )
        }
        HorizontalDivider(Modifier, DividerDefaults.Thickness, DividerDefaults.color)
        Spacer(modifier = Modifier.height(8.dp))

        // --- Help Section ---
        MenuItem(
            icon = ImageVector.vectorResource(R.drawable.ic_help_outline_24),
            text = stringResource(if (uiState.areHelpersVisible) R.string.hide_helpers else R.string.show_helpers),
            onClick = {
                onEvent(MainScreenEvent.ToggleHelp)
                onCloseDrawer()
            }
        )
        MenuItem(
            icon = Icons.AutoMirrored.Outlined.HelpOutline,
            text = "More Help",
            onClick = {
                onEvent(MainScreenEvent.ToggleMoreHelp)
                onCloseDrawer()
            }
        )
        HorizontalDivider(
            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
            thickness = DividerDefaults.Thickness,
            color = DividerDefaults.color
        )

        // --- View Controls ---
        MenuItem(
            icon = ImageVector.vectorResource(R.drawable.ic_undo_24),
            text = "Reset View",
            onClick = {
                onEvent(MainScreenEvent.Reset)
                onCloseDrawer()
            }
        )
        MenuItem(
            icon = ImageVector.vectorResource(R.drawable.ic_jump_shot),
            text = "Toggle Cue Ball",
            onClick = {
                onEvent(MainScreenEvent.ToggleActualCueBall)
                onCloseDrawer()
            }
        )
        HorizontalDivider(
            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
            thickness = DividerDefaults.Thickness,
            color = DividerDefaults.color
        )

        // --- Future Features ---
        MenuItem(
            icon = Icons.Outlined.ViewInAr,
            text = "Toggle Table",
            onClick = {
                onEvent(MainScreenEvent.FeatureComingSoon)
                onCloseDrawer()
            }
        )
        MenuItem(
            icon = Icons.Outlined.ViewInAr,
            text = "Calculate Bank",
            onClick = {
                onEvent(MainScreenEvent.ToggleBankingMode)
                onCloseDrawer()
            }
        )
        HorizontalDivider(
            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
            thickness = DividerDefaults.Thickness,
            color = DividerDefaults.color
        )

        // --- Meta Section ---
        MenuItem(
            icon = Icons.Outlined.Brush,
            text = "About Me",
            onClick = {
                onEvent(MainScreenEvent.ViewArt)
                onCloseDrawer()
            }
        )
        MenuItem(
            icon = Icons.Outlined.MonetizationOn,
            text = "Chalk Your Tip",
            onClick = {
                onEvent(MainScreenEvent.ShowDonationOptions)
                onCloseDrawer()
            }
        )
        MenuItem(
            icon = Icons.Outlined.SystemUpdate,
            text = "Check for Updates",
            onClick = {
                onEvent(MainScreenEvent.CheckForUpdate)
                onCloseDrawer()
            }
        )
        Spacer(modifier = Modifier.height(12.dp))
    }
}

@Composable
private fun MenuItem(icon: ImageVector, text: String, onClick: () -> Unit) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clickable(onClick = onClick)
            .padding(horizontal = 24.dp, vertical = 16.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(imageVector = icon, contentDescription = text, modifier = Modifier.size(24.dp))
        Spacer(modifier = Modifier.width(16.dp))
        Text(text = text, style = MaterialTheme.typography.bodyLarge)
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/composables/TopControls.kt ---

package com.hereliesaz.cuedetat.ui.composables

import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.statusBarsPadding
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.hereliesaz.cuedetat.R
import com.hereliesaz.cuedetat.ui.theme.AccentGold
import com.hereliesaz.cuedetat.view.state.OverlayState

@Composable
fun TopControls(
    uiState: OverlayState,
    onMenuClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier
            .fillMaxWidth()
            .statusBarsPadding()
            .padding(start = 16.dp, end = 16.dp, top = 16.dp),
        horizontalArrangement = Arrangement.Start,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Box(
            modifier = Modifier
                .size(width = 200.dp, height = 64.dp)
                .clickable(onClick = onMenuClick),
            contentAlignment = Alignment.CenterStart
        ) {
            if (uiState.areHelpersVisible) {
                Text(
                    text = stringResource(id = R.string.app_name),
                    style = MaterialTheme.typography.titleLarge.copy(fontSize = 28.sp),
                    color = AccentGold,
                    textAlign = TextAlign.Start
                )
            } else {
                Image(
                    painter = painterResource(id = R.drawable.ic_launcher),
                    contentDescription = "Menu",
                    modifier = Modifier
                        .size(64.dp)
                        .clip(CircleShape)
                )
            }
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/composables/ZoomControls.kt ---

package com.hereliesaz.cuedetat.ui.composables

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.size
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.SliderDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import com.hereliesaz.cuedetat.R
import com.hereliesaz.cuedetat.ui.MainScreenEvent
import com.hereliesaz.cuedetat.ui.VerticalSlider
import com.hereliesaz.cuedetat.view.state.OverlayState

@Composable
fun ZoomControls(
    uiState: OverlayState,
    onEvent: (MainScreenEvent) -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier,
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        if (uiState.areHelpersVisible) {
            Text(
                text = "Zoom",
                style = MaterialTheme.typography.bodyLarge,
                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
            )
        } else {
            Icon(
                painter = painterResource(id = R.drawable.ic_zoom_in_24),
                contentDescription = stringResource(id = R.string.zoom_icon),
                tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),
                modifier = Modifier.size(36.dp)
            )
        }

        Spacer(modifier = Modifier.height(24.dp))
        VerticalSlider(
            value = uiState.zoomSliderPosition,
            onValueChange = { onEvent(MainScreenEvent.ZoomSliderChanged(it)) },
            valueRange = 0f..100f,
            modifier = Modifier.fillMaxHeight(),
            colors = SliderDefaults.colors(
                activeTrackColor = MaterialTheme.colorScheme.primary,
                inactiveTrackColor = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.2f),
                thumbColor = MaterialTheme.colorScheme.primary
            )
        )
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/MainScreen.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/ui/MainScreen.kt
package com.hereliesaz.cuedetat.ui

import android.widget.Toast
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.DrawerValue
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.ModalNavigationDrawer
import androidx.compose.material3.rememberDrawerState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.viewinterop.AndroidView
import androidx.compose.ui.zIndex
import com.hereliesaz.cuedetat.ui.composables.CameraBackground
import com.hereliesaz.cuedetat.ui.composables.KineticWarningOverlay
import com.hereliesaz.cuedetat.ui.composables.MenuDrawerContent
import com.hereliesaz.cuedetat.ui.composables.ResetFab
import com.hereliesaz.cuedetat.ui.composables.ToggleCueBallFab
import com.hereliesaz.cuedetat.ui.composables.TopControls
import com.hereliesaz.cuedetat.ui.composables.ZoomControls
import com.hereliesaz.cuedetat.view.ProtractorOverlayView
import com.hereliesaz.cuedetat.view.state.ToastMessage
import kotlinx.coroutines.launch

@Composable
fun MainScreen(viewModel: MainViewModel) {
    val uiState by viewModel.uiState.collectAsState()
    val toastMessage by viewModel.toastMessage.collectAsState()
    val context = LocalContext.current
    val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)
    val scope = rememberCoroutineScope()

    val protractorView = remember {
        ProtractorOverlayView(context).apply {
            onSizeChanged = { w, h -> viewModel.onEvent(MainScreenEvent.SizeChanged(w, h)) }
            onRotationChange = { rot -> viewModel.onEvent(MainScreenEvent.RotationChanged(rot)) }
            onUnitMove = { pos -> viewModel.onEvent(MainScreenEvent.UnitMoved(pos)) }
            onActualCueBallMoved =
                { pos -> viewModel.onEvent(MainScreenEvent.ActualCueBallMoved(pos)) }
            onScale =
                { scaleFactor -> viewModel.onEvent(MainScreenEvent.ZoomScaleChanged(scaleFactor)) }
            onGestureStarted = { viewModel.onEvent(MainScreenEvent.GestureStarted) }
            onGestureEnded = { viewModel.onEvent(MainScreenEvent.GestureEnded) }
        }
    }


    val colorScheme = MaterialTheme.colorScheme
    LaunchedEffect(colorScheme) {
        viewModel.onEvent(MainScreenEvent.ThemeChanged(colorScheme))
    }

    LaunchedEffect(toastMessage) {
        toastMessage?.let {
            val messageText = when (it) {
                is ToastMessage.StringResource -> context.getString(
                    it.id,
                    *it.formatArgs.toTypedArray()
                )
                is ToastMessage.PlainText -> it.text
            }
            Toast.makeText(context, messageText, Toast.LENGTH_SHORT).show()
            viewModel.onEvent(MainScreenEvent.ToastShown)
        }
    }

    ModalNavigationDrawer(
        drawerState = drawerState,
        gesturesEnabled = drawerState.isOpen,
        drawerContent = {
            MenuDrawerContent(
                uiState = uiState,
                onEvent = viewModel::onEvent,
                onCloseDrawer = { scope.launch { drawerState.close() } }
            )
        }
    ) {
        Box(modifier = Modifier.fillMaxSize()) {
            CameraBackground(
                modifier = Modifier
                    .fillMaxSize()
                    .zIndex(0f)
            )

            AndroidView(
                factory = { protractorView },
                modifier = Modifier
                    .fillMaxSize()
                    .zIndex(1f)
            ) { view ->
                view.updateState(uiState)
            }

            TopControls(
                uiState = uiState,
                onMenuClick = { scope.launch { drawerState.open() } },
                modifier = Modifier.zIndex(2f)
            )

            ZoomControls(
                uiState = uiState,
                onEvent = viewModel::onEvent,
                modifier = Modifier
                    .align(Alignment.CenterEnd)
                    .fillMaxHeight(0.4f)
                    .zIndex(2f)
            )

            ToggleCueBallFab(
                uiState = uiState,
                onEvent = viewModel::onEvent,
                modifier = Modifier
                    .align(Alignment.BottomStart)
                    .zIndex(2f)
            )

            ResetFab(
                uiState = uiState,
                onEvent = viewModel::onEvent,
                modifier = Modifier
                    .align(Alignment.BottomEnd)
                    .zIndex(2f)
            )

            KineticWarningOverlay(
                text = uiState.warningText,
                modifier = Modifier.zIndex(3f)
            )
        }
    }
}



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/MainScreenEvent.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/ui/MainScreenEvent.kt
package com.hereliesaz.cuedetat.ui

import android.graphics.PointF
import androidx.compose.material3.ColorScheme

sealed class MainScreenEvent {
    data class SizeChanged(val width: Int, val height: Int) : MainScreenEvent()
    data class ZoomSliderChanged(val position: Float) : MainScreenEvent()
    data class ZoomScaleChanged(val scaleFactor: Float) : MainScreenEvent()
    data class RotationChanged(val newRotation: Float) : MainScreenEvent()
    data class PitchAngleChanged(val pitch: Float) : MainScreenEvent()
    data class UnitMoved(val position: PointF) : MainScreenEvent()
    data class ActualCueBallMoved(val position: PointF) : MainScreenEvent()
    data class ThemeChanged(val scheme: ColorScheme) : MainScreenEvent()
    object Reset : MainScreenEvent()
    object ToggleHelp : MainScreenEvent()
    object ToggleMoreHelp : MainScreenEvent()
    object ToggleActualCueBall : MainScreenEvent()
    object ToggleBankingMode : MainScreenEvent()
    object CheckForUpdate : MainScreenEvent()
    object ViewArt : MainScreenEvent()
    object FeatureComingSoon : MainScreenEvent()
    object ShowDonationOptions : MainScreenEvent()
    object SingleEventConsumed : MainScreenEvent()
    object ToastShown : MainScreenEvent()
    object GestureStarted : MainScreenEvent()
    object GestureEnded : MainScreenEvent()
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/MainViewModel.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/ui/MainViewModel.kt
package com.hereliesaz.cuedetat.ui

import android.app.Application
import android.graphics.Camera
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.hereliesaz.cuedetat.R
import com.hereliesaz.cuedetat.data.SensorRepository
import com.hereliesaz.cuedetat.data.UpdateChecker
import com.hereliesaz.cuedetat.data.UpdateResult
import com.hereliesaz.cuedetat.domain.StateReducer
import com.hereliesaz.cuedetat.domain.UpdateStateUseCase
import com.hereliesaz.cuedetat.view.state.OverlayState
import com.hereliesaz.cuedetat.view.state.SingleEvent
import com.hereliesaz.cuedetat.view.state.ToastMessage
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class MainViewModel @Inject constructor(
    private val sensorRepository: SensorRepository,
    private val updateChecker: UpdateChecker,
    private val application: Application,
    private val updateStateUseCase: UpdateStateUseCase,
    private val stateReducer: StateReducer
) : ViewModel() {

    private val graphicsCamera = Camera()
    private val insultingWarnings: Array<String> =
        application.resources.getStringArray(R.array.insulting_warnings)
    private var warningIndex = 0

    private val _uiState = MutableStateFlow(OverlayState())
    val uiState = _uiState.asStateFlow()

    private val _toastMessage = MutableStateFlow<ToastMessage?>(null)
    val toastMessage = _toastMessage.asStateFlow()

    private val _singleEvent = MutableStateFlow<SingleEvent?>(null)
    val singleEvent = _singleEvent.asStateFlow()

    init {
        sensorRepository.pitchAngleFlow
            .onEach { onEvent(MainScreenEvent.PitchAngleChanged(it)) }
            .launchIn(viewModelScope)
    }

    fun onEvent(event: MainScreenEvent) {
        when (event) {
            is MainScreenEvent.CheckForUpdate -> checkForUpdate()
            is MainScreenEvent.ViewArt -> _singleEvent.value =
                SingleEvent.OpenUrl("https://instagram.com/hereliesaz")
            is MainScreenEvent.ShowDonationOptions -> _singleEvent.value =
                SingleEvent.ShowDonationDialog

            is MainScreenEvent.FeatureComingSoon -> _toastMessage.value =
                ToastMessage.PlainText("Feature coming soon!")

            is MainScreenEvent.SingleEventConsumed -> _singleEvent.value = null
            is MainScreenEvent.ToastShown -> _toastMessage.value = null

            is MainScreenEvent.ThemeChanged -> {
                _uiState.value = _uiState.value.copy(dynamicColorScheme = event.scheme)
            }

            is MainScreenEvent.GestureStarted -> {
                _uiState.value = _uiState.value.copy(warningText = null)
            }

            is MainScreenEvent.GestureEnded -> {
                if (!_uiState.value.isBankingMode && _uiState.value.isImpossibleShot) {
                    val nextWarning = insultingWarnings[warningIndex]
                    warningIndex = (warningIndex + 1) % insultingWarnings.size
                    _uiState.value = _uiState.value.copy(warningText = nextWarning)
                }
            }

            else -> updateContinuousState(event)
        }
    }

    private fun updateContinuousState(event: MainScreenEvent) {
        val oldState = _uiState.value
        val updatedState = stateReducer.reduce(oldState, event)
        val finalState = updateStateUseCase(updatedState, graphicsCamera)
        // Preserve the warning text during continuous updates
        val warningText =
            if (oldState.warningText != null && finalState.isImpossibleShot) oldState.warningText else null
        _uiState.value = finalState.copy(warningText = warningText)
    }

    private fun checkForUpdate() {
        viewModelScope.launch {
            val result = updateChecker.checkForUpdate()
            _toastMessage.value = when (result) {
                is UpdateResult.UpdateAvailable -> ToastMessage.StringResource(
                    R.string.update_available,
                    listOf(result.latestVersion)
                )
                is UpdateResult.UpToDate -> ToastMessage.StringResource(R.string.update_no_new_release)
                is UpdateResult.CheckFailed -> ToastMessage.PlainText(result.reason)
            }
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/MenuAction.kt ---

package com.hereliesaz.cuedetat.ui

/**
 * A sealed class to represent all possible user actions originating from UI menus or buttons.
 * This provides a clean, type-safe way to pass events from the UI to the ViewModel.
 */
sealed class MenuAction {
    object Reset : MenuAction()
    object ToggleHelp : MenuAction()
    object ToggleJumpingBall : MenuAction()
    object CheckForUpdate : MenuAction()
    object ToggleTheme : MenuAction()
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/theme/Color.kt ---

package com.hereliesaz.cuedetat.ui.theme

import androidx.compose.ui.graphics.Color

val AccentGold = Color(0xFFBDA559)
val DarkerAccentGold = Color(0xFF968141)
val MutedMaroon = Color(0xFF7E344D) // Adjusted for more brightness
val MutedGray = Color(0xFFA9A9A9)
val WarningRed = Color(0xFFC05D5D)


val AcidPatina = Color(0xFF8EA96E)       // Muted strange green
val RustedEmber = Color(0xFFA85632)      // Burnt rust, toned down
val OilSlick = Color(0xFF555E5C)         // Gritty gray-green
val OxidizedBrass = Color(0xFFB98E5A)    // Warm, muted highlight
val VioletResidue = Color(0xFF8374A9)    // Muted violet gray
val ScorchedUmber = Color(0xFF4A2E1C)    // Deep, rich, almost-black
val ColdAsh = Color(0xFFA6A6A6)          // High-vis light gray


val TargetAcid = Color(0xFFA4FF00)      // Neon toxic green
val TacticalRust = Color(0xFFC1440E)    // Aggressive orange-red
val ConcreteVein = Color(0xFF7D7D7D)    // Mid-gray, utility
val MoltenBrass = Color(0xFFD9821B)     // Warm, edgy accent
val GuerillaViolet = Color(0xFF6E44FF)  // Striking contrast color
val AshlineFog = Color(0xFFBFBFBF)      // High-vis neutral
val RebelYellow = Color(0xFFFFD000)  // Primary yellow
val BurntBrass = Color(0xFF8A5A00)   // Dirty metallic accent
val SmokeyGrunge = Color(0xFF3B3B3B) // Deep, gritty gray (but not black)


val TargetGold = Color(0xFFFFB700)   // Vibrant highlight gold
val MellowYellow = Color(0xFFD4AF37)    // Muted gold
val AgedAmber = Color(0xFFC69026)       // Secondary accent
val SmokedOchre = Color(0xFF9B6A17)     // Button-friendly highlight
val RogueUmber = Color(0xFF5C2E00)      // Dark background substitute
val SteelAsh = Color(0xFF4A4A4A)        // Surface gray
val GunmetalFog = Color(0xFF6A6A6A)     // Light neutral gray
val FaintGoldmist = Color(0xFFF0DFAF)   // Subtle text glow

val StaticClay = Color(0xFFCEBCA8)       // Neutral base
val DeadChannel = Color(0xFF817F8D)      // Digital noise purple-gray
val SmokeSignal = Color(0xFF5A5D63)      // Mid gray with cold nerve
val CharredOlive = Color(0xFF484C3E)     // Military murk green
val PyrrhicRust = Color(0xFF9C4E2C)      // Bloodied rust
val AshWasp = Color(0xFFADA44F)          // Acid ghost
val LowFidelityBlue = Color(0xFF5C6E83)  // Desaturated steel blue

val IcedOpal = Color(0xFFD5E4E2)         // Pale blue-gray
val SoftInterference = Color(0xFFB6A4D6) // Powdered lavender
val StaticMint = Color(0xFF9DDDC8)       // Desaturated mint
val CorrodedSky = Color(0xFF8A99B2)      // Faded blue
val HalogenDusk = Color(0xFFD3B18A)      // Pale copper light
val FeverSlate = Color(0xFF6B7079)       // Cool slate anchor
val TarnishedMauve = Color(0xFFA08C98)   // Soft mauve-gray


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/theme/Shape.kt ---

package com.hereliesaz.cuedetat.ui.theme

import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Shapes
import androidx.compose.ui.unit.dp

val Shapes = Shapes(
    // A subtle, almost imperceptible rounding. Like the edges of a well-worn tombstone.
    extraSmall = RoundedCornerShape(2.dp),
    small = RoundedCornerShape(4.dp),
    medium = RoundedCornerShape(8.dp),
    large = RoundedCornerShape(12.dp),
    extraLarge = RoundedCornerShape(16.dp)
)



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/theme/Theme.kt ---

package com.hereliesaz.cuedetat.ui.theme

import android.app.Activity
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

private val AppDarkColorScheme = darkColorScheme(
    primary = AccentGold,
    secondary = AcidPatina,
    tertiary = MutedGray,
    background = Color(0xFF121212),
    surface = Color(0xFF1E1E1E),
    onPrimary = Color.Black,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFFE6E1E5),
    onSurface = Color(0xFFE6E1E5),
    outline = MutedGray.copy(alpha = 0.5f),
    surfaceVariant = Color(0xFF49454F),
    onSurfaceVariant = Color(0xFFCAC4D0),
    tertiaryContainer = AcidPatina.copy(alpha = 0.3f),
    onTertiaryContainer = Color.White,
    secondaryContainer = AccentGold.copy(alpha = 0.3f),
    onSecondaryContainer = Color.White,

    )

private val AppLightColorScheme = lightColorScheme(
    primary = DarkerAccentGold,
    secondary = AcidPatina,
    tertiary = MutedGray,
    background = Color(0xFFF7F2F9),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    outline = MutedGray.copy(alpha = 0.5f),
    surfaceVariant = Color(0xFFE7E0EC),
    onSurfaceVariant = Color(0xFF49454F),
    tertiaryContainer = AcidPatina.copy(alpha = 0.3f),
    onTertiaryContainer = Color.Black,
    secondaryContainer = AccentGold.copy(alpha = 0.3f),
    onSecondaryContainer = Color.Black,
)

@Composable
fun CueDetatTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        darkTheme -> AppDarkColorScheme
        else -> AppLightColorScheme
    }
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            window.statusBarColor = Color.Transparent.toArgb() // Make status bar transparent
            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !darkTheme
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/theme/Type.kt ---

package com.hereliesaz.cuedetat.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp
import com.hereliesaz.cuedetat.R

val Barbaro = FontFamily(
    Font(R.font.barbaro, FontWeight.Normal)
)

// Set of Material typography styles to start with
val Typography = Typography(
    displayLarge = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 64.sp,
    ),
    displayMedium = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 52.sp,
    ),
    displaySmall = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 44.sp,
    ),
    headlineLarge = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 36.sp,
    ),
    headlineMedium = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 32.sp,
    ),
    headlineSmall = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 28.sp,
    ),
    titleLarge = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 32.sp,
        lineHeight = 36.sp,
        letterSpacing = 0.sp
    ),
    titleMedium = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 26.sp,
    ),
    titleSmall = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp
    ),
    bodyLarge = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 24.sp,
        lineHeight = 30.sp,
        letterSpacing = 0.5.sp
    ),
    bodyMedium = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 20.sp,
    ),
    bodySmall = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 18.sp,
    ),
    labelLarge = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 20.sp,
    ),
    labelMedium = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 18.sp,
    ),
    labelSmall = TextStyle(
        fontFamily = Barbaro,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 22.sp,
        letterSpacing = 0.5.sp
    )
)



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/VerticalSlider.kt ---

package com.hereliesaz.cuedetat.ui

import androidx.compose.foundation.Canvas
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.width
import androidx.compose.material3.SliderColors
import androidx.compose.material3.SliderDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.unit.dp

/**
 * A vertical slider implementation that uses standard Compose state flow.
 */
@Composable
fun VerticalSlider(
    value: Float,
    onValueChange: (Float) -> Unit,
    modifier: Modifier = Modifier,
    valueRange: ClosedFloatingPointRange<Float> = 0f..1f,
    colors: SliderColors = SliderDefaults.colors()
) {
    BoxWithConstraints(
        modifier = modifier
            .width(48.dp) // A reasonable default width for touch targets
            .fillMaxHeight()
            .pointerInput(Unit) {
                detectDragGestures { change, _ ->
                    val height = size.height.toFloat()
                    val range = valueRange.endInclusive - valueRange.start
                    if (range <= 0) return@detectDragGestures

                    val rawValue =
                        valueRange.start + ((height - change.position.y) / height) * range
                    onValueChange(rawValue.coerceIn(valueRange))
                    change.consume()
                }
            }
    ) {
        val trackWidthPx = with(LocalDensity.current) { 6.dp.toPx() }
        val thumbRadiusPx = with(LocalDensity.current) { 12.dp.toPx() }
        val height = constraints.maxHeight.toFloat()

        val valueRangeTotal = valueRange.endInclusive - valueRange.start
        val normalizedValue = if (valueRangeTotal > 0) {
            (value - valueRange.start) / valueRangeTotal
        } else {
            0f
        }
        val thumbY = height - (normalizedValue * height)

        Canvas(modifier = Modifier.matchParentSize()) {
            val centerX = size.width / 2f

            drawLine(
                color = colors.inactiveTrackColor,
                start = Offset(centerX, 0f),
                end = Offset(centerX, height),
                strokeWidth = trackWidthPx,
                cap = StrokeCap.Round
            )

            drawLine(
                color = colors.activeTrackColor,
                start = Offset(centerX, height),
                end = Offset(centerX, thumbY),
                strokeWidth = trackWidthPx,
                cap = StrokeCap.Round
            )

            drawCircle(
                color = colors.thumbColor,
                radius = thumbRadiusPx,
                center = Offset(centerX, thumbY)
            )
        }
    }
}



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/ui/ZoomMapping.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/ui/ZoomMapping.kt
package com.hereliesaz.cuedetat.ui

import kotlin.math.ln
import kotlin.math.pow

internal object ZoomMapping {
    // --- Master Zoom Controls ---
    const val MIN_ZOOM = 0.084f // Changed from 0.05f to limit max zoom-out
    const val DEFAULT_ZOOM = 0.4f
    const val MAX_ZOOM = 0.6f
    // ----------------------------

    // This constant determines the curve of the exponential zoom.
    // It is calculated to map the slider's 0-100 range precisely to the MIN_ZOOM-MAX_ZOOM range.
    // Formula: B = (MAX_ZOOM / MIN_ZOOM) ^ (1 / 100)
    private val B = (MAX_ZOOM / MIN_ZOOM).pow(0.01f)

    /**
     * Converts a slider position (0f-100f) to an exponential zoom factor.
     */
    fun sliderToZoom(sliderValue: Float): Float = MIN_ZOOM * B.pow(sliderValue)

    /**
     * Converts a zoom factor back to its corresponding slider position (0f-100f).
     */
    fun zoomToSlider(zoomFactor: Float): Float {
        if (zoomFactor <= MIN_ZOOM) return 0f
        if (zoomFactor >= MAX_ZOOM) return 100f
        // Formula: sliderValue = log(zoomFactor / MIN_ZOOM) / log(B)
        return (ln(zoomFactor / MIN_ZOOM) / ln(B))
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/model/LogicalPlane.kt ---

package com.hereliesaz.cuedetat.view.model

import android.graphics.PointF

/**
 * Represents an object with a position and radius on the logical 2D plane.
 */
interface ILogicalBall {
    val center: PointF
    val radius: Float
}

/**
 * The main aiming tool, consisting of a Target Ball and a Protractor Cue Ball.
 * Its position is defined by the Target Ball's center.
 */
data class ProtractorUnit(
    override val center: PointF,
    override val radius: Float,
    val rotationDegrees: Float
) : ILogicalBall {

    /**
     * Calculates the position of the Protractor Cue Ball based on the unit's center and rotation.
     */
    val protractorCueBallCenter: PointF
        get() {
            val angleRad = Math.toRadians(rotationDegrees.toDouble())
            val distance = 2 * radius
            return PointF(
                center.x - (distance * kotlin.math.sin(angleRad)).toFloat(),
                center.y + (distance * kotlin.math.cos(angleRad)).toFloat()
            )
        }
}

/**
 * The user-positioned aiming sight.
 */
data class ActualCueBall(
    override val center: PointF,
    override val radius: Float
) : ILogicalBall



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/model/Perspective.kt ---

package com.hereliesaz.cuedetat.view.model

import android.graphics.Camera
import android.graphics.Matrix
import android.graphics.PointF

/**
 * A helper object for handling the 3D perspective transformations.
 */
object Perspective {

    /**
     * Creates the 3D transformation matrix that pivots around the center of the view.
     * An optional lift parameter can be provided to translate the object vertically
     * in the 3D space before projection.
     */
    fun createPitchMatrix(
        pitchAngle: Float,
        viewWidth: Int,
        viewHeight: Int,
        camera: Camera,
        lift: Float = 0f // A positive value lifts the object "up" from the plane
    ): Matrix {
        val matrix = Matrix()
        camera.save()
        camera.setLocation(0f, 0f, -32f) // Move camera back to reduce distortion

        // Apply lift in 3D space. Android's Camera Y-axis is inverted.
        if (lift != 0f) {
            camera.translate(0f, lift, 0f)
        }

        camera.rotateX(pitchAngle)
        camera.getMatrix(matrix)
        camera.restore()

        val pivotX = viewWidth / 2f
        val pivotY = viewHeight / 2f
        matrix.preTranslate(-pivotX, -pivotY)
        matrix.postTranslate(pivotX, pivotY)

        return matrix
    }

    /**
     * Projects a point from the screen space (user touch) to the logical 2D plane.
     */
    fun screenToLogical(screenPoint: PointF, inverseMatrix: Matrix): PointF {
        val logicalCoords = floatArrayOf(screenPoint.x, screenPoint.y)
        inverseMatrix.mapPoints(logicalCoords)
        return PointF(logicalCoords[0], logicalCoords[1])
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/PaintCache.kt ---

package com.hereliesaz.cuedetat.view

import android.graphics.Color
import android.graphics.DashPathEffect
import android.graphics.Paint
import android.graphics.Typeface
import androidx.compose.material3.ColorScheme
import androidx.compose.ui.graphics.toArgb
import com.hereliesaz.cuedetat.ui.theme.TargetAcid

class PaintCache {
    private val GLOW_RADIUS_FIXED = 8f
    private var glowColor: Int = Color.argb(100, 255, 196, 0)
    private var textShadowColor: Int = Color.argb(180, 0, 0, 0)

    val tableOutlinePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE
        strokeWidth = 4f
    }

    val targetCirclePaint =
        Paint(Paint.ANTI_ALIAS_FLAG).apply { style = Paint.Style.STROKE; strokeWidth = 5f }
    val cueCirclePaint =
        Paint(Paint.ANTI_ALIAS_FLAG).apply { style = Paint.Style.STROKE; strokeWidth = 5f }
    val targetCenterMarkPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { style = Paint.Style.FILL }
    val cueCenterMarkPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { style = Paint.Style.FILL }
    val protractorLinePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { strokeWidth = 3f }
    val aimingLinePaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { strokeWidth = 5f }


    val ghostCueOutlinePaint =
        Paint(Paint.ANTI_ALIAS_FLAG).apply { style = Paint.Style.STROKE; strokeWidth = 6f }
    val targetGhostBallOutlinePaint =
        Paint(Paint.ANTI_ALIAS_FLAG).apply { style = Paint.Style.STROKE; strokeWidth = 6f }

    val actualCueBallGhostPaint =
        Paint(Paint.ANTI_ALIAS_FLAG).apply { style = Paint.Style.STROKE; strokeWidth = 6f }
    val actualCueBallBasePaint =
        Paint(Paint.ANTI_ALIAS_FLAG).apply { style = Paint.Style.STROKE; strokeWidth = 2f }
    val actualCueBallCenterMarkPaint =
        Paint(Paint.ANTI_ALIAS_FLAG).apply { style = Paint.Style.FILL }
    val shotLinePaint =
        Paint(Paint.ANTI_ALIAS_FLAG).apply {
            color = Color.parseColor("#CCCCCC"); style = Paint.Style.STROKE; strokeWidth = 5f
        }

    val aimingSightPaint =
        Paint(Paint.ANTI_ALIAS_FLAG).apply { strokeWidth = 4f; style = Paint.Style.STROKE }
    val cueBallTextPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { textAlign = Paint.Align.CENTER }
    val targetBallTextPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { textAlign = Paint.Align.CENTER }
    val actualCueBallTextPaint =
        Paint(Paint.ANTI_ALIAS_FLAG).apply { textAlign = Paint.Align.CENTER }

    val tangentLineDottedPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE
        strokeWidth = 2f
        pathEffect = DashPathEffect(floatArrayOf(15f, 10f), 0f)
    }
    val tangentLineSolidPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        style = Paint.Style.STROKE
        strokeWidth = 5f
        pathEffect = null
    }
    val ghostBallTextPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { textAlign = Paint.Align.CENTER }
    val lineTextPaint = Paint(Paint.ANTI_ALIAS_FLAG).apply { textAlign = Paint.Align.CENTER }


    val warningPaintRed1 = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        color = Color.parseColor("#C05D5D")
        style = Paint.Style.STROKE
        strokeWidth = 5f
    }
    val warningPaintRed2 = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        color = Color.parseColor("#A04C4C")
        style = Paint.Style.STROKE
        strokeWidth = 6f
    }
    val warningPaintRed3 = Paint(Paint.ANTI_ALIAS_FLAG).apply {
        color = Color.parseColor("#80E57373")
        style = Paint.Style.STROKE
        strokeWidth = 5f
        setShadowLayer(GLOW_RADIUS_FIXED, 0f, 0f, Color.parseColor("#FF5252"))
    }


    fun setTypeface(typeface: Typeface?) {
        cueBallTextPaint.typeface = typeface
        targetBallTextPaint.typeface = typeface
        ghostBallTextPaint.typeface = typeface
        lineTextPaint.typeface = typeface
        actualCueBallTextPaint.typeface = typeface
    }

    fun updateColors(colorScheme: ColorScheme) {
        glowColor = colorScheme.primary.copy(alpha = 0.4f).toArgb()
        textShadowColor = colorScheme.background.copy(alpha = 0.6f).toArgb()

        tableOutlinePaint.apply {
            color = TargetAcid.toArgb()
            val glow = TargetAcid.copy(alpha = 0.6f).toArgb()
            setShadowLayer(GLOW_RADIUS_FIXED, 0f, 0f, glow)
        }

        targetCirclePaint.color = colorScheme.primary.toArgb()
        cueCirclePaint.color = colorScheme.tertiary.toArgb()
        targetCenterMarkPaint.color = cueCirclePaint.color
        cueCenterMarkPaint.color = targetCirclePaint.color

        actualCueBallGhostPaint.color = colorScheme.secondary.toArgb()
        actualCueBallBasePaint.color = colorScheme.secondary.copy(alpha = 0.5f).toArgb()
        actualCueBallCenterMarkPaint.color = colorScheme.secondary.toArgb()

        ghostCueOutlinePaint.color = colorScheme.tertiary.copy(alpha = 0.7f).toArgb()
        targetGhostBallOutlinePaint.color = colorScheme.primary.copy(alpha = 0.7f).toArgb()

        protractorLinePaint.color = colorScheme.onSurface.copy(alpha = 0.2f).toArgb()
        aimingLinePaint.apply {
            color = colorScheme.primary.toArgb()
            setShadowLayer(GLOW_RADIUS_FIXED, 0f, 0f, glowColor)
        }

        aimingSightPaint.apply {
            color = colorScheme.primary.toArgb()
            setShadowLayer(GLOW_RADIUS_FIXED, 0f, 0f, glowColor)
        }

        tangentLineDottedPaint.color = colorScheme.outline.toArgb()
        tangentLineSolidPaint.apply {
            color = colorScheme.secondary.toArgb()
            setShadowLayer(GLOW_RADIUS_FIXED, 0f, 0f, glowColor)
        }

        cueBallTextPaint.apply {
            color = cueCirclePaint.color
            setShadowLayer(2f, 1f, 1f, textShadowColor)
        }
        targetBallTextPaint.apply {
            color = targetCirclePaint.color
            setShadowLayer(2f, 1f, 1f, textShadowColor)
        }
        actualCueBallTextPaint.apply {
            color = actualCueBallGhostPaint.color
            setShadowLayer(2f, 1f, 1f, textShadowColor)
        }

        ghostBallTextPaint.apply {
            color = colorScheme.onSurface.toArgb()
            setShadowLayer(2f, 1f, 1f, textShadowColor)
        }
        lineTextPaint.apply {
            color = colorScheme.onSurface.copy(alpha = 0.7f).toArgb()
            setShadowLayer(1f, 1f, 1f, textShadowColor)
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt ---

// app/src/main/java/com/hereliesaz/cuedetat/view/ProtractorOverlayView.kt
package com.hereliesaz.cuedetat.view

import android.annotation.SuppressLint
import android.content.Context
import android.graphics.Canvas
import android.graphics.PointF
import android.graphics.Typeface
import android.view.MotionEvent
import android.view.ScaleGestureDetector
import android.view.View
import android.view.ViewConfiguration
import androidx.core.content.res.ResourcesCompat
import com.hereliesaz.cuedetat.R
import com.hereliesaz.cuedetat.view.renderer.OverlayRenderer
import com.hereliesaz.cuedetat.view.renderer.util.DrawingUtils
import com.hereliesaz.cuedetat.view.state.OverlayState
import kotlin.math.abs

@SuppressLint("ClickableViewAccessibility")
class ProtractorOverlayView(context: Context) : View(context) {

    private enum class InteractionMode {
        NONE,
        SCALING,
        ROTATING,
        MOVING_UNIT,
        MOVING_CUE_BALL
    }

    private val renderer = OverlayRenderer()
    private val paints = PaintCache()

    private var canonicalState = OverlayState()
    private var barbaroTypeface: Typeface? = null

    // Callbacks to the ViewModel
    var onSizeChanged: ((Int, Int) -> Unit)? = null
    var onRotationChange: ((Float) -> Unit)? = null
    var onUnitMove: ((PointF) -> Unit)? = null
    var onActualCueBallMoved: ((PointF) -> Unit)? = null
    var onScale: ((Float) -> Unit)? = null
    var onGestureStarted: (() -> Unit)? = null
    var onGestureEnded: (() -> Unit)? = null

    // Gesture Handling
    private val scaleGestureDetector: ScaleGestureDetector
    private var lastTouchX = 0f
    private val touchSlop = ViewConfiguration.get(context).scaledTouchSlop
    private var interactionMode = InteractionMode.NONE

    init {
        if (!isInEditMode) {
            barbaroTypeface = ResourcesCompat.getFont(context, R.font.barbaro)
            paints.setTypeface(barbaroTypeface)
        }
        val listener = object : ScaleGestureDetector.SimpleOnScaleGestureListener() {
            override fun onScaleBegin(detector: ScaleGestureDetector): Boolean {
                onGestureStarted?.invoke()
                interactionMode = InteractionMode.SCALING
                return true
            }

            override fun onScale(detector: ScaleGestureDetector): Boolean {
                onScale?.invoke(detector.scaleFactor)
                return true
            }

            override fun onScaleEnd(detector: ScaleGestureDetector) {
                onGestureEnded?.invoke()
                interactionMode = InteractionMode.NONE
            }
        }
        scaleGestureDetector = ScaleGestureDetector(context, listener)
    }

    override fun onDraw(canvas: Canvas) {
        super.onDraw(canvas)
        renderer.draw(canvas, canonicalState, paints, barbaroTypeface)
    }

    override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {
        super.onSizeChanged(w, h, oldw, oldh)
        onSizeChanged?.invoke(w, h)
    }

    override fun onTouchEvent(event: MotionEvent): Boolean {
        scaleGestureDetector.onTouchEvent(event)
        if (interactionMode == InteractionMode.SCALING) {
            return true
        }

        val touchX = event.x
        val touchY = event.y

        when (event.action) {
            MotionEvent.ACTION_DOWN -> {
                onGestureStarted?.invoke()
                lastTouchX = touchX

                val touchPoint = PointF(touchX, touchY)
                val unitScreenPos = DrawingUtils.mapPoint(
                    canonicalState.protractorUnit.center,
                    canonicalState.pitchMatrix
                )
                val unitRadiusInfo = DrawingUtils.getPerspectiveRadiusAndLift(
                    canonicalState.protractorUnit,
                    canonicalState
                )

                if (DrawingUtils.distance(
                        touchPoint,
                        unitScreenPos
                    ) < unitRadiusInfo.radius + touchSlop
                ) {
                    interactionMode = InteractionMode.MOVING_UNIT
                    return true
                }

                canonicalState.actualCueBall?.let {
                    val cueBallScreenPos =
                        DrawingUtils.mapPoint(it.center, canonicalState.pitchMatrix)
                    val cueBallRadiusInfo =
                        DrawingUtils.getPerspectiveRadiusAndLift(it, canonicalState)
                    if (DrawingUtils.distance(
                            touchPoint,
                            cueBallScreenPos
                        ) < cueBallRadiusInfo.radius + touchSlop
                    ) {
                        interactionMode = InteractionMode.MOVING_CUE_BALL
                        return true
                    }
                }

                interactionMode = InteractionMode.ROTATING
                return true
            }

            MotionEvent.ACTION_MOVE -> {
                val dx = touchX - lastTouchX

                when (interactionMode) {
                    InteractionMode.ROTATING -> {
                        if (abs(dx) > touchSlop) {
                            val newRotation =
                                canonicalState.protractorUnit.rotationDegrees - (dx * 0.3f)
                            onRotationChange?.invoke(newRotation)
                            lastTouchX = touchX
                        }
                    }
                    InteractionMode.MOVING_UNIT -> {
                        onUnitMove?.invoke(PointF(touchX, touchY))
                    }
                    InteractionMode.MOVING_CUE_BALL -> {
                        if (canonicalState.actualCueBall != null) {
                            onActualCueBallMoved?.invoke(PointF(touchX, touchY))
                        }
                    }
                    else -> return true
                }
                return true
            }

            MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -> {
                onGestureEnded?.invoke()
                interactionMode = InteractionMode.NONE
                return true
            }
        }
        return super.onTouchEvent(event)
    }

    fun updateState(newState: OverlayState) {
        this.canonicalState = newState
        paints.updateColors(newState.dynamicColorScheme)
        invalidate()
    }
}



--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/BallRenderer.kt ---

package com.hereliesaz.cuedetat.view.renderer

import android.graphics.Canvas
import android.graphics.Matrix
import android.graphics.PointF
import android.graphics.Typeface
import com.hereliesaz.cuedetat.view.PaintCache
import com.hereliesaz.cuedetat.view.model.ILogicalBall
import com.hereliesaz.cuedetat.view.renderer.text.BallTextRenderer
import com.hereliesaz.cuedetat.view.renderer.util.DrawingUtils
import com.hereliesaz.cuedetat.view.state.OverlayState

class BallRenderer {

    private val textRenderer = BallTextRenderer()

    fun drawLogicalBalls(canvas: Canvas, state: OverlayState, paints: PaintCache) {
        state.actualCueBall?.let {
            canvas.drawCircle(it.center.x, it.center.y, it.radius, paints.actualCueBallBasePaint)
            canvas.drawCircle(
                it.center.x,
                it.center.y,
                it.radius / 5f,
                paints.actualCueBallCenterMarkPaint
            )
        }

        if (state.isBankingMode) return // Don't draw the protractor unit in banking mode

        canvas.save()
        canvas.translate(state.protractorUnit.center.x, state.protractorUnit.center.y)
        canvas.rotate(state.protractorUnit.rotationDegrees)

        canvas.drawCircle(0f, 0f, state.protractorUnit.radius, paints.targetCirclePaint)
        canvas.drawCircle(0f, 0f, state.protractorUnit.radius / 5f, paints.targetCenterMarkPaint)

        val cueBallLocalCenter = state.protractorUnit.protractorCueBallCenter.let {
            val p = PointF(it.x, it.y)
            p.offset(-state.protractorUnit.center.x, -state.protractorUnit.center.y)
            p
        }
        val rotationInvertedMatrix =
            Matrix().apply { setRotate(-state.protractorUnit.rotationDegrees) }
        val cueBallRelativePosition = floatArrayOf(cueBallLocalCenter.x, cueBallLocalCenter.y)
        rotationInvertedMatrix.mapPoints(cueBallRelativePosition)
        val cuePos = PointF(cueBallRelativePosition[0], cueBallRelativePosition[1])

        val cuePaint =
            if (state.isImpossibleShot) paints.warningPaintRed1 else paints.cueCirclePaint
        canvas.drawCircle(cuePos.x, cuePos.y, state.protractorUnit.radius, cuePaint)
        canvas.drawCircle(
            cuePos.x,
            cuePos.y,
            state.protractorUnit.radius / 5f,
            paints.cueCenterMarkPaint
        )

        canvas.restore()
    }

    fun drawScreenSpaceBalls(
        canvas: Canvas,
        state: OverlayState,
        paints: PaintCache,
        typeface: Typeface?
    ) {
        paints.targetBallTextPaint.typeface = typeface
        paints.cueBallTextPaint.typeface = typeface
        paints.ghostBallTextPaint.typeface = typeface
        paints.actualCueBallTextPaint.typeface = typeface

        state.actualCueBall?.let {
            val radiusInfo = DrawingUtils.getPerspectiveRadiusAndLift(it, state)
            val screenBasePos = DrawingUtils.mapPoint(it.center, state.pitchMatrix)
            val ghostCenterY = screenBasePos.y - radiusInfo.lift
            canvas.drawCircle(
                screenBasePos.x,
                ghostCenterY,
                radiusInfo.radius,
                paints.actualCueBallGhostPaint
            )
            if (state.areHelpersVisible) {
                textRenderer.draw(
                    canvas,
                    paints.actualCueBallTextPaint,
                    state.zoomSliderPosition,
                    screenBasePos.x,
                    ghostCenterY,
                    radiusInfo.radius,
                    "Actual Cue Ball"
                )
            }
        }

        if (state.isBankingMode) return // Don't draw ghost balls for the protractor unit

        val targetRadiusInfo = DrawingUtils.getPerspectiveRadiusAndLift(state.protractorUnit, state)
        val cueRadiusInfo = DrawingUtils.getPerspectiveRadiusAndLift(object : ILogicalBall {
            override val center = state.protractorUnit.protractorCueBallCenter
            override val radius = state.protractorUnit.radius
        }, state)

        val pTGC = DrawingUtils.mapPoint(state.protractorUnit.center, state.pitchMatrix)
        val pCGC =
            DrawingUtils.mapPoint(state.protractorUnit.protractorCueBallCenter, state.pitchMatrix)

        val targetGhostCenterY = pTGC.y - targetRadiusInfo.lift
        val cueGhostCenterY = pCGC.y - cueRadiusInfo.lift

        canvas.drawCircle(
            pTGC.x,
            targetGhostCenterY,
            targetRadiusInfo.radius,
            paints.targetGhostBallOutlinePaint
        )
        val cueGhostPaint =
            if (state.isImpossibleShot) paints.warningPaintRed2 else paints.ghostCueOutlinePaint
        canvas.drawCircle(pCGC.x, cueGhostCenterY, cueRadiusInfo.radius, cueGhostPaint)

        if (state.areHelpersVisible) {
            textRenderer.draw(
                canvas,
                paints.targetBallTextPaint,
                state.zoomSliderPosition,
                pTGC.x,
                targetGhostCenterY,
                targetRadiusInfo.radius,
                "Target Ball"
            )
            textRenderer.draw(
                canvas,
                paints.cueBallTextPaint,
                state.zoomSliderPosition,
                pCGC.x,
                cueGhostCenterY,
                cueRadiusInfo.radius,
                "Ghost Cue Ball"
            )
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/LineRenderer.kt ---

package com.hereliesaz.cuedetat.view.renderer

import android.graphics.Canvas
import android.graphics.Matrix
import android.graphics.Paint
import android.graphics.PointF
import android.graphics.Typeface
import com.hereliesaz.cuedetat.view.PaintCache
import com.hereliesaz.cuedetat.view.renderer.text.LineTextRenderer
import com.hereliesaz.cuedetat.view.state.OverlayState
import kotlin.math.atan2
import kotlin.math.cos
import kotlin.math.sin
import kotlin.math.sqrt

class LineRenderer {
    // --- POSITION CONTROL CONSTANTS ---
    private val SHOT_LINE_LABEL_DISTANCE_FACTOR = 15f
    private val RIGHT_TANGENT_LABEL_DISTANCE_FACTOR = 7f
    private val LEFT_TANGENT_LABEL_DISTANCE_FACTOR = 7f
    private val AIMING_LINE_LABEL_DISTANCE_FACTOR = 10f
    private val PROTRACTOR_LABEL_DISTANCE_FACTOR = 20f

    // --- ANGLE CONTROL CONSTANTS ---
    private val SHOT_LINE_LABEL_ANGLE_OFFSET = -2f
    private val RIGHT_TANGENT_LABEL_ANGLE_OFFSET = -5f
    private val LEFT_TANGENT_LABEL_ANGLE_OFFSET = 5f
    private val AIMING_LINE_LABEL_ANGLE_OFFSET = -2f
    private val PROTRACTOR_LABEL_ANGLE_OFFSET = 0f

    // --- ROTATION CONTROL CONSTANTS ---
    private val SHOT_LINE_LABEL_ROTATION = 0f
    private val RIGHT_TANGENT_LABEL_ROTATION = 0f
    private val LEFT_TANGENT_LABEL_ROTATION = 180f
    private val AIMING_LINE_LABEL_ROTATION = 0f
    private val PROTRACTOR_LABEL_ROTATION = 90f

    // --- NEW FONT SIZE CONTROL CONSTANTS ---
    private val SHOT_LINE_LABEL_FONT_SIZE = 38f
    private val RIGHT_TANGENT_LABEL_FONT_SIZE = 38f
    private val LEFT_TANGENT_LABEL_FONT_SIZE = 38f
    private val AIMING_LINE_LABEL_FONT_SIZE = 38f
    private val PROTRACTOR_LABEL_FONT_SIZE = 42f


    private val PROTRACTOR_ANGLES = floatArrayOf(0f, 14f, 30f, 36f, 43f, 48f)
    private val textRenderer = LineTextRenderer()

    fun drawLogicalLines(
        canvas: Canvas,
        state: OverlayState,
        paints: PaintCache,
        typeface: Typeface?
    ) {
        paints.lineTextPaint.typeface = typeface
        drawShotLine(canvas, state, paints)

        if (state.isBankingMode) return // Don't draw protractor lines in banking mode

        canvas.save()
        canvas.translate(state.protractorUnit.center.x, state.protractorUnit.center.y)
        canvas.rotate(state.protractorUnit.rotationDegrees)
        val cueBallLocalCenter = state.protractorUnit.protractorCueBallCenter.let {
            val p = PointF(it.x, it.y)
            p.offset(-state.protractorUnit.center.x, -state.protractorUnit.center.y)
            p
        }
        val rotationInvertedMatrix =
            Matrix().apply { setRotate(-state.protractorUnit.rotationDegrees) }
        val cueBallRelativePosition = floatArrayOf(cueBallLocalCenter.x, cueBallLocalCenter.y)
        rotationInvertedMatrix.mapPoints(cueBallRelativePosition)
        val cuePos = PointF(cueBallRelativePosition[0], cueBallRelativePosition[1])
        drawTangentLines(canvas, cuePos, paints, state)
        drawProtractorLines(canvas, cuePos, paints, state)
        canvas.restore()
    }

    private fun getAngle(from: PointF, to: PointF): Float {
        return Math.toDegrees(atan2(to.y - from.y, to.x - from.x).toDouble()).toFloat()
    }

    private fun drawShotLine(canvas: Canvas, state: OverlayState, paints: PaintCache) {
        val startPoint: PointF = state.actualCueBall?.center ?: run {
            if (!state.hasInverseMatrix) return
            val screenAnchor = floatArrayOf(state.viewWidth / 2f, state.viewHeight.toFloat())
            val logicalAnchorArray = FloatArray(2)
            state.inversePitchMatrix.mapPoints(logicalAnchorArray, screenAnchor)
            PointF(logicalAnchorArray[0], logicalAnchorArray[1])
        }

        val throughPoint = state.protractorUnit.protractorCueBallCenter
        val dirX = throughPoint.x - startPoint.x
        val dirY = throughPoint.y - startPoint.y
        val mag = sqrt(dirX * dirX + dirY * dirY)
        if (mag > 0.001f) {
            val extendFactor = 5000f
            val ndx = dirX / mag
            val ndy = dirY / mag
            val paint =
                if (state.isImpossibleShot) paints.warningPaintRed3 else paints.shotLinePaint
            canvas.drawLine(
                startPoint.x,
                startPoint.y,
                startPoint.x + ndx * extendFactor,
                startPoint.y + ndy * extendFactor,
                paint
            )

            if (state.areHelpersVisible) {
                val textPaint = Paint(paints.lineTextPaint).apply { color = paint.color }
                val labelDistance = state.protractorUnit.radius * SHOT_LINE_LABEL_DISTANCE_FACTOR
                val lineAngle = getAngle(startPoint, throughPoint)
                textRenderer.draw(
                    canvas,
                    "Shot Line",
                    throughPoint,
                    lineAngle,
                    labelDistance,
                    SHOT_LINE_LABEL_ANGLE_OFFSET,
                    SHOT_LINE_LABEL_ROTATION,
                    textPaint,
                    SHOT_LINE_LABEL_FONT_SIZE,
                    state.zoomSliderPosition
                )
            }
        }
    }

    private fun drawTangentLines(
        canvas: Canvas,
        cueLocalPos: PointF,
        paints: PaintCache,
        state: OverlayState
    ) {
        val dx = 0f - cueLocalPos.x
        val dy = 0f - cueLocalPos.y
        val mag = sqrt(dx * dx + dy * dy)
        if (mag > 0.001f) {
            val extend = state.viewWidth.coerceAtLeast(state.viewHeight) * 1.5f
            val dX = -dy / mag
            val dY = dx / mag

            val rightPaint =
                if (state.isImpossibleShot || state.protractorUnit.rotationDegrees <= 180f) paints.tangentLineDottedPaint else paints.tangentLineSolidPaint
            val leftPaint =
                if (state.isImpossibleShot || state.protractorUnit.rotationDegrees > 180f) paints.tangentLineDottedPaint else paints.tangentLineSolidPaint

            val rightEndPoint = PointF(cueLocalPos.x + dX * extend, cueLocalPos.y + dY * extend)
            val leftEndPoint = PointF(cueLocalPos.x - dX * extend, cueLocalPos.y - dY * extend)

            canvas.drawLine(
                cueLocalPos.x,
                cueLocalPos.y,
                rightEndPoint.x,
                rightEndPoint.y,
                rightPaint
            )
            canvas.drawLine(cueLocalPos.x, cueLocalPos.y, leftEndPoint.x, leftEndPoint.y, leftPaint)

            if (state.areHelpersVisible) {
                val textPaintRight = Paint(paints.lineTextPaint).apply { color = rightPaint.color }
                val textPaintLeft = Paint(paints.lineTextPaint).apply { color = leftPaint.color }

                val rightLabelDistance =
                    state.protractorUnit.radius * RIGHT_TANGENT_LABEL_DISTANCE_FACTOR
                val leftLabelDistance =
                    state.protractorUnit.radius * LEFT_TANGENT_LABEL_DISTANCE_FACTOR

                val rightLineAngle = getAngle(cueLocalPos, rightEndPoint)
                val leftLineAngle = getAngle(cueLocalPos, leftEndPoint)

                textRenderer.draw(
                    canvas,
                    "Tangent Line",
                    cueLocalPos,
                    rightLineAngle,
                    rightLabelDistance,
                    RIGHT_TANGENT_LABEL_ANGLE_OFFSET,
                    RIGHT_TANGENT_LABEL_ROTATION,
                    textPaintRight,
                    RIGHT_TANGENT_LABEL_FONT_SIZE,
                    state.zoomSliderPosition
                )
                textRenderer.draw(
                    canvas,
                    "Tangent Line",
                    cueLocalPos,
                    leftLineAngle,
                    leftLabelDistance,
                    LEFT_TANGENT_LABEL_ANGLE_OFFSET,
                    LEFT_TANGENT_LABEL_ROTATION,
                    textPaintLeft,
                    LEFT_TANGENT_LABEL_FONT_SIZE,
                    state.zoomSliderPosition
                )
            }
        }
    }

    private fun drawProtractorLines(
        canvas: Canvas,
        cueLocalPos: PointF,
        paints: PaintCache,
        state: OverlayState
    ) {
        val lineLength = 2000f
        val origin = PointF(0f, 0f)

        // Aiming Line
        val aimDirX = 0 - cueLocalPos.x
        val aimDirY = 0 - cueLocalPos.y
        val mag = sqrt(aimDirX * aimDirX + aimDirY * aimDirY)
        if (mag > 0.001f) {
            val nX = aimDirX / mag
            val nY = aimDirY / mag
            val endPoint = PointF(cueLocalPos.x + nX * lineLength, cueLocalPos.y + nY * lineLength)
            canvas.drawLine(
                cueLocalPos.x,
                cueLocalPos.y,
                endPoint.x,
                endPoint.y,
                paints.aimingLinePaint
            )

            if (state.areHelpersVisible) {
                val textPaint =
                    Paint(paints.lineTextPaint).apply { color = paints.aimingLinePaint.color }
                val labelDistance = state.protractorUnit.radius * AIMING_LINE_LABEL_DISTANCE_FACTOR
                val lineAngle = getAngle(cueLocalPos, endPoint)
                textRenderer.draw(
                    canvas,
                    "Aiming Line",
                    cueLocalPos,
                    lineAngle,
                    labelDistance,
                    AIMING_LINE_LABEL_ANGLE_OFFSET,
                    AIMING_LINE_LABEL_ROTATION,
                    textPaint,
                    AIMING_LINE_LABEL_FONT_SIZE,
                    state.zoomSliderPosition
                )
            }
        }

        // Angle lines
        PROTRACTOR_ANGLES.forEach { angle ->
            if (angle == 0f) return@forEach
            val r = Math.toRadians(angle.toDouble())
            val eX = (lineLength * sin(r)).toFloat()
            val eY = (lineLength * cos(r)).toFloat()

            val endPoints =
                listOf(PointF(eX, eY), PointF(-eX, -eY), PointF(-eX, eY), PointF(eX, -eY))
            endPoints.forEach { endPoint ->
                canvas.drawLine(
                    origin.x,
                    origin.y,
                    endPoint.x,
                    endPoint.y,
                    paints.protractorLinePaint
                )
                if (state.areHelpersVisible) {
                    val textPaint = Paint(paints.lineTextPaint).apply {
                        color = paints.protractorLinePaint.color
                    }
                    val labelDistance =
                        state.protractorUnit.radius * PROTRACTOR_LABEL_DISTANCE_FACTOR
                    val lineAngle = getAngle(origin, endPoint)
                    val label = "${angle.toInt()}°"
                    textRenderer.draw(
                        canvas,
                        label,
                        origin,
                        lineAngle,
                        labelDistance,
                        PROTRACTOR_LABEL_ANGLE_OFFSET,
                        PROTRACTOR_LABEL_ROTATION,
                        textPaint,
                        PROTRACTOR_LABEL_FONT_SIZE,
                        state.zoomSliderPosition
                    )
                }
            }
        }
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/OverlayRenderer.kt ---

package com.hereliesaz.cuedetat.view.renderer

import android.graphics.Canvas
import android.graphics.Typeface
import com.hereliesaz.cuedetat.view.PaintCache
import com.hereliesaz.cuedetat.view.state.OverlayState

class OverlayRenderer {

    private val ballRenderer = BallRenderer()
    private val lineRenderer = LineRenderer()
    private val tableRenderer = TableRenderer()
    private val railRenderer = RailRenderer()

    fun draw(canvas: Canvas, state: OverlayState, paints: PaintCache, typeface: Typeface?) {
        if (state.viewWidth == 0 || state.viewHeight == 0) return

        // --- Draw Banking Mode elements if active ---
        if (state.isBankingMode) {
            // Draw base table with the standard matrix
            canvas.save()
            canvas.concat(state.pitchMatrix)
            tableRenderer.draw(canvas, state, paints)
            canvas.restore()

            // Draw rails with the special, lifted matrix
            canvas.save()
            canvas.concat(state.railPitchMatrix)
            railRenderer.draw(canvas, state, paints)
            canvas.restore()
        }

        // --- Draw all elements on the 3D logical plane ---
        canvas.save()
        canvas.concat(state.pitchMatrix)

        lineRenderer.drawLogicalLines(canvas, state, paints, typeface)
        ballRenderer.drawLogicalBalls(canvas, state, paints)

        canvas.restore()

        // --- Draw screen-space elements (ghosts) on top ---
        ballRenderer.drawScreenSpaceBalls(canvas, state, paints, typeface)
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/RailRenderer.kt ---

package com.hereliesaz.cuedetat.view.renderer

import android.graphics.Canvas
import android.graphics.Matrix
import android.graphics.Paint
import android.graphics.Path
import android.graphics.RectF
import androidx.core.graphics.PathParser
import com.hereliesaz.cuedetat.view.PaintCache
import com.hereliesaz.cuedetat.view.state.OverlayState

class RailRenderer {

    companion object {
        // SVG path data containing ONLY the outer rail shape, with the inner line removed.
        private const val SVG_RAIL_PATH_DATA =
            "M2186 2727 c-10 -7 -23 -38 -29 -70 l-12 -58 -767 1 -768 0 -67 55 c-78 63 -113 70 -139 30 -21 -33 -11 -58 52 -129 l46 -51 -1 -685 c-1 -377 -4 -720 -7 -762 -7 -77 -7 -78 -67 -148 -57 -67 -59 -71 -47 -100 7 -16 20 -32 30 -35 21 -7 70 4 70 15 0 4 27 26 59 49 l59 41 771 0 771 0 0 -47 c0 -54 5 -65 37 -82 57 -29 97 0 107 79 l7 53 282 -7 c155 -3 506 -6 779 -6 l497 0 68 -60 c76 -66 110 -74 143 -32 26 32 12 66 -55 132 l-55 54 0 766 0 766 46 44 c25 25 54 59 65 77 19 30 19 34 4 63 -12 24 -22 30 -49 30 -26 0 -46 -12 -93 -55 l-61 -55 -778 0 -779 -1 -8 48 c-13 77 -64 114 -111 80z"
    }

    private val tableToBallRatioLong = 88f
    private val tableToBallRatioShort = 44f
    private var cachedRailPath: Path? = null

    fun draw(canvas: Canvas, state: OverlayState, paints: PaintCache) {
        if (cachedRailPath == null) {
            cachedRailPath = PathParser.createPathFromPathData(SVG_RAIL_PATH_DATA)
        }
        val railPath = Path(cachedRailPath) // Work with a copy

        val ballRadius = state.protractorUnit.radius
        if (ballRadius <= 0) return

        // Define the target size and position for the rails on the logical canvas
        val tableHeight = tableToBallRatioShort * ballRadius
        val tableWidth = tableToBallRatioLong * ballRadius
        val tableCenterX = state.viewWidth / 2f
        val tableCenterY = state.viewHeight / 2f

        val targetBounds = RectF(
            tableCenterX - tableWidth / 2,
            tableCenterY - tableHeight / 2,
            tableCenterX + tableWidth / 2,
            tableCenterY + tableHeight / 2
        )

        // Get the original bounds from the parsed SVG path
        val originalBounds = RectF()
        railPath.computeBounds(originalBounds, true)

        // Create a matrix to scale and translate the SVG path to fit the target bounds
        val matrix = Matrix()
        matrix.setRectToRect(originalBounds, targetBounds, Matrix.ScaleToFit.FILL)
        railPath.transform(matrix)


        // --- Draw Rails and Diamonds ---
        canvas.drawPath(railPath, paints.tableOutlinePaint)

        // --- Draw Diamonds relative to the table bounds ---
        val diamondRadius = ballRadius / 4f
        val diamondPaint = Paint(paints.tableOutlinePaint).apply {
            style = Paint.Style.FILL_AND_STROKE
        }
        val railOffset = ballRadius * 3.0f

        // Diamonds on the long rails (top and bottom)
        for (i in 1..3) {
            val xPos = targetBounds.left + (tableWidth * (i / 4f))
            canvas.drawCircle(xPos, targetBounds.top - railOffset, diamondRadius, diamondPaint)
            canvas.drawCircle(xPos, targetBounds.bottom + railOffset, diamondRadius, diamondPaint)
        }
        // Diamonds on the short rails (left and right)
        canvas.drawCircle(targetBounds.left - railOffset, tableCenterY, diamondRadius, diamondPaint)
        canvas.drawCircle(
            targetBounds.right + railOffset,
            tableCenterY,
            diamondRadius,
            diamondPaint
        )
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/TableRenderer.kt ---

package com.hereliesaz.cuedetat.view.renderer

import android.graphics.Canvas
import com.hereliesaz.cuedetat.view.PaintCache
import com.hereliesaz.cuedetat.view.state.OverlayState

class TableRenderer {

    // Standard 2:1 ratio for pool tables.
    // Size is based on ball radius. A standard 9ft table (100"x50") and a 2.25" ball
    // gives a play surface width of ~44 ball diameters. We'll use radius, so ~88.
    private val tableToBallRatioLong = 88f
    private val tableToBallRatioShort = 44f

    fun draw(canvas: Canvas, state: OverlayState, paints: PaintCache) {
        val ballRadius = state.protractorUnit.radius
        if (ballRadius <= 0) return

        // Calculate table dimensions based on the current ball radius to maintain proportion
        val tableHeight = tableToBallRatioShort * ballRadius
        val tableWidth = tableToBallRatioLong * ballRadius
        // Position the table in the center of the view for stability
        val tableCenterX = state.viewWidth / 2f
        val tableCenterY = state.viewHeight / 2f

        val left = tableCenterX - tableWidth / 2
        val top = tableCenterY - tableHeight / 2
        val right = tableCenterX + tableWidth / 2
        val bottom = tableCenterY + tableHeight / 2

        // Draw the main table outline
        canvas.drawRect(left, top, right, bottom, paints.tableOutlinePaint)

        // --- Draw Holes ---
        // Pockets are roughly twice the diameter of a ball
        val pocketRadius = ballRadius * 2f
        val holePaint = paints.tableOutlinePaint
        // Corner Pockets
        canvas.drawCircle(left, top, pocketRadius, holePaint)
        canvas.drawCircle(right, top, pocketRadius, holePaint)
        canvas.drawCircle(left, bottom, pocketRadius, holePaint)
        canvas.drawCircle(right, bottom, pocketRadius, holePaint)
        // Side Pockets
        canvas.drawCircle(tableCenterX, top, pocketRadius, holePaint)
        canvas.drawCircle(tableCenterX, bottom, pocketRadius, holePaint)
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/text/BallTextRenderer.kt ---

package com.hereliesaz.cuedetat.view.renderer.text

import android.graphics.Canvas
import android.graphics.Paint
import com.hereliesaz.cuedetat.ui.ZoomMapping

class BallTextRenderer {

    private val baseGhostBallTextSize = 42f
    private val minGhostBallTextSize = 20f
    private val maxGhostBallTextSize = 80f

    fun draw(
        canvas: Canvas,
        paint: Paint,
        zoomSliderPosition: Float,
        x: Float,
        y: Float,
        radius: Float,
        text: String
    ) {
        val zoomFactor = ZoomMapping.sliderToZoom(zoomSliderPosition) / ZoomMapping.DEFAULT_ZOOM
        val currentTextSize = (baseGhostBallTextSize * zoomFactor).coerceIn(
            minGhostBallTextSize,
            maxGhostBallTextSize
        )
        paint.textSize = currentTextSize
        val textMetrics = paint.fontMetrics
        val textPadding = 5f * zoomFactor.coerceAtLeast(0.5f)
        val visualTop = y - radius
        val baseline = visualTop - textPadding - textMetrics.descent
        canvas.drawText(text, x, baseline, paint)
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/text/LineTextRenderer.kt ---

package com.hereliesaz.cuedetat.view.renderer.text

import android.graphics.Canvas
import android.graphics.Paint
import android.graphics.PointF
import com.hereliesaz.cuedetat.ui.ZoomMapping
import kotlin.math.cos
import kotlin.math.sin

class LineTextRenderer {

    private val minLineTextSize = 18f
    private val maxLineTextSize = 70f

    fun draw(
        canvas: Canvas,
        text: String,
        origin: PointF,
        lineAngleDegrees: Float,
        distanceFromOrigin: Float,
        angleOffsetDegrees: Float,
        rotationOffsetDegrees: Float,
        paint: Paint,
        baseFontSize: Float,
        zoomSliderPosition: Float
    ) {
        val zoomFactor = ZoomMapping.sliderToZoom(zoomSliderPosition) / ZoomMapping.DEFAULT_ZOOM
        val currentTextSize = (baseFontSize * zoomFactor).coerceIn(minLineTextSize, maxLineTextSize)
        paint.textSize = currentTextSize

        val textAngleRadians = Math.toRadians((lineAngleDegrees + angleOffsetDegrees).toDouble())

        val textX = origin.x + (distanceFromOrigin * cos(textAngleRadians)).toFloat()
        val textY = origin.y + (distanceFromOrigin * sin(textAngleRadians)).toFloat()

        canvas.save()
        canvas.rotate(lineAngleDegrees + rotationOffsetDegrees, textX, textY)
        canvas.drawText(text, textX, textY, paint)
        canvas.restore()
    }
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/renderer/util/DrawingUtils.kt ---

package com.hereliesaz.cuedetat.view.renderer.util

import android.graphics.Matrix
import android.graphics.PointF
import com.hereliesaz.cuedetat.view.model.ILogicalBall
import com.hereliesaz.cuedetat.view.state.OverlayState
import kotlin.math.abs
import kotlin.math.pow
import kotlin.math.sin
import kotlin.math.sqrt

object DrawingUtils {

    data class PerspectiveRadiusInfo(val radius: Float, val lift: Float)

    fun getPerspectiveRadiusAndLift(
        ball: ILogicalBall,
        state: OverlayState
    ): PerspectiveRadiusInfo {
        if (!state.hasInverseMatrix) return PerspectiveRadiusInfo(ball.radius, 0f)

        val screenCenter = mapPoint(ball.center, state.pitchMatrix)
        val logicalHorizontalEdge = PointF(ball.center.x + ball.radius, ball.center.y)
        val screenHorizontalEdge = mapPoint(logicalHorizontalEdge, state.pitchMatrix)
        val radiusOnScreen = distance(screenCenter, screenHorizontalEdge)
        val lift = radiusOnScreen * abs(sin(Math.toRadians(state.pitchAngle.toDouble()))).toFloat()
        return PerspectiveRadiusInfo(radiusOnScreen, lift)
    }

    fun mapPoint(p: PointF, m: Matrix): PointF {
        val arr = floatArrayOf(p.x, p.y)
        m.mapPoints(arr)
        return PointF(arr[0], arr[1])
    }

    fun distance(p1: PointF, p2: PointF): Float =
        sqrt((p1.x - p2.x).pow(2) + (p1.y - p2.y).pow(2))
}


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/state/OverlayState.kt ---

// hereliesaz/cued8at/CueD8at-66142b655f7e247d83b8004a442ad41e04dd6348/app/src/main/java/com/hereliesaz/cuedetat/view/state/OverlayState.kt
package com.hereliesaz.cuedetat.view.state

import android.graphics.Matrix
import android.graphics.PointF
import androidx.compose.material3.ColorScheme
import androidx.compose.material3.darkColorScheme
import com.hereliesaz.cuedetat.view.model.ActualCueBall
import com.hereliesaz.cuedetat.view.model.ProtractorUnit

data class OverlayState(
    // View dimensions
    val viewWidth: Int = 0,
    val viewHeight: Int = 0,

    // Core logical model
    val protractorUnit: ProtractorUnit = ProtractorUnit(PointF(0f, 0f), 1f, 0f),
    val actualCueBall: ActualCueBall? = null,

    // UI control state
    val zoomSliderPosition: Float = 100f, // REVERTED to original value
    val areHelpersVisible: Boolean = false,
    val isMoreHelpVisible: Boolean = false,
    val valuesChangedSinceReset: Boolean = false,

    // New banking mode state
    val isBankingMode: Boolean = false,

    // Sensor and perspective data
    val pitchAngle: Float = 0.0f,
    val pitchMatrix: Matrix = Matrix(),
    val railPitchMatrix: Matrix = Matrix(), // New matrix for lifted rails
    val inversePitchMatrix: Matrix = Matrix(),
    val hasInverseMatrix: Boolean = false,

    // Derived state
    val isImpossibleShot: Boolean = false,
    val warningText: String? = null,

    // Theming
    val dynamicColorScheme: ColorScheme = darkColorScheme()
)


--- FILE: app/src/main/java/com/hereliesaz/cuedetat/view/state/ScreenState.kt ---

package com.hereliesaz.cuedetat.view.state

sealed class ToastMessage {
    data class StringResource(val id: Int, val formatArgs: List<Any> = emptyList()) : ToastMessage()
    data class PlainText(val text: String) : ToastMessage()
}

sealed class SingleEvent {
    data class OpenUrl(val url: String) : SingleEvent()
    object ShowDonationDialog : SingleEvent()
}



--- FILE: app/src/main/res/drawable/blank_tansparent.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="684dp"
    android:height="684dp"
    android:viewportWidth="684"
    android:viewportHeight="684">

</vector>


--- FILE: app/src/main/res/drawable/ic_dark_mode_24.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M20,15.31L23.31,12 20,8.69V4h-4.69L12,0.69 8.69,4H4v4.69L0.69,12 4,15.31V20h4.69L12,23.31 15.31,20H20v-4.69zM12,18V6c3.31,0 6,2.69 6,6s-2.69,6 -6,6z"/>
    
</vector>



--- FILE: app/src/main/res/drawable/ic_help_outline_24.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M11,18h2v-2h-2v2zM12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM12,20c-4.41,0 -8,-3.59 -8,-8s3.59,-8 8,-8 8,3.59 8,8 -3.59,8 -8,8zM12,6c-2.21,0 -4,1.79 -4,4h2c0,-1.1 0.9,-2 2,-2s2,0.9 2,2c0,2 -3,1.75 -3,5h2c0,-2.25 3,-2.5 3,-5 0,-2.21 -1.79,-4 -4,-4z"/>
    
</vector>



--- FILE: app/src/main/res/drawable/ic_jump_shot.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:tint="?attr/colorControlNormal"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M12,8l-6,6 1.41,1.41L12,10.83l4.59,4.58L18,14l-6,-6z" />
    <path
        android:fillColor="@android:color/white"
        android:pathData="M12,2a10,10 0 1,0 0,20 10,10 0 1,0 0,-20zm0,18a8,8 0 1,1 0,-16 8,8 0 1,1 0,16z" />
</vector>


--- FILE: app/src/main/res/drawable/ic_launcher_background.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="684"
    android:viewportHeight="684">
  <group android:scaleX="0.0056481482"
      android:scaleY="0.0056481482"
      android:translateX="133.38"
      android:translateY="133.38">

  </group>
</vector>


--- FILE: app/src/main/res/drawable/ic_light_mode_24.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android" android:autoMirrored="true" android:height="24dp" android:tint="#FFFFFF" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M20,15.31L23.31,12 20,8.69V4h-4.69L12,0.69 8.69,4H4v4.69L0.69,12 4,15.31V20h4.69L12,23.31 15.31,20H20v-4.69zM12,18V6c3.31,0 6,2.69 6,6s-2.69,6 -6,6z"/>
    
</vector>



--- FILE: app/src/main/res/drawable/ic_undo_24.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M12.5,8c-2.65,0 -5.05,0.99 -6.9,2.6L2,7v9h9l-3.62,-3.62c1.39,-1.16 3.16,-1.88 5.12,-1.88 3.54,0 6.55,2.31 7.6,5.5l2.37,-0.78C21.08,11.96 17.15,8 12.5,8z"/>
</vector>


--- FILE: app/src/main/res/drawable/ic_zoom_in_24.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M15.5,14h-0.79l-0.28,-0.27C15.41,12.59 16,11.11 16,9.5 16,5.91 13.09,3 9.5,3S3,5.91 3,9.5 5.91,16 9.5,16c1.61,0 3.09,-0.59 4.23,-1.57l0.27,0.28v0.79l5,4.99L20.49,19l-4.99,-5zM9.5,14C7.01,14 5,11.99 5,9.5S7.01,5 9.5,5 14,7.01 14,9.5 11.99,14 9.5,14zM10,7H9v2H7v1h2v2h1v-2h2V9h-2z"/>
</vector>


--- FILE: app/src/main/res/drawable/pool_table.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="612dp"
    android:height="459dp"
    android:viewportWidth="612"
    android:viewportHeight="459">
  <path
      android:pathData="M291.15,94.12c2.18,1.96 5.45,3.07 9.53,3.07s7.44,-1.11 9.69,-3.07h237.82c1.03,6.8 6.23,12.28 12.98,13.84l0.02,231.18c-6.34,1.07 -11.49,5.56 -13.39,11.46l-239.9,-0c-2.04,-0.98 -4.5,-1.51 -7.22,-1.52 -2.74,-0 -5.19,0.53 -7.2,1.52l-238.04,-0c-1.77,-5.48 -6.33,-9.74 -12.05,-11.18v-232.83c5.77,-1.83 10.21,-6.58 11.47,-12.47h236.29Z"
      android:strokeWidth="5"
      android:fillColor="#00000000"
      android:strokeColor="#047a0c"/>
  <path
      android:pathData="M29.51,81.2c9.31,-8.8 20.78,7.46 29.95,14.18l228.02,-1.34c1.45,-1.45 0.66,-21.59 13.2,-21.53s10.49,21.4 12.84,21.87l231.29,0.66c2.84,-0.66 22.75,-24.98 31.33,-14.16s-7.13,19.79 -14.84,30.31l-0.34,226c6.35,5.81 23.8,19.67 15.28,28.02s-24.88,-9.2 -31.75,-13.86c-15.98,-0.08 -130.12,-0.74 -231.29,-1.32 -1.14,8.51 -2.62,21.07 -12.52,21.43s-10.2,-7.25 -12.84,-21.09L58.11,352.6C47.2,361.22 36.18,374.48 28.47,365.21s8.66,-20.65 14.79,-28.16l0.4,-225.51c-7.6,-9.99 -23.46,-21.54 -14.16,-30.33Z"
      android:strokeWidth="5"
      android:fillColor="#00000000"
      android:strokeColor="#19f604"/>
</vector>



--- FILE: app/src/main/res/drawable/seekbar_custom_track.xml ---

<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- Background track -->
    <item android:id="@android:id/background">
        <shape android:shape="rectangle">
            <corners android:radius="4dp" /> <!-- Adjust for desired roundness -->
            <solid android:color="?attr/colorSurfaceVariant" />
            <size android:height="8dp" /> <!-- This is the THICKNESS of the track drawable -->
        </shape>
    </item>

    <!-- Progress track -->
    <item android:id="@android:id/progress">
        <scale android:scaleWidth="100%">
            <shape android:shape="rectangle">
                <corners android:radius="4dp" />
                <solid android:color="?attr/colorPrimary" />
                <size android:height="8dp" /> <!-- Must match background thickness -->
            </shape>
        </scale>
    </item>

    <!-- Secondary progress (optional, remove if not needed) -->
    <item android:id="@android:id/secondaryProgress">
        <scale android:scaleWidth="100%">
            <shape android:shape="rectangle">
                <corners android:radius="4dp"/>
                <solid android:color="@android:color/transparent"/> <!-- Or a muted color -->
                <size android:height="8dp"/>
            </shape>
        </scale>
    </item>
</layer-list>


--- FILE: app/src/main/res/font/barbaro_family.xml ---

<?xml version="1.0" encoding="utf-8"?>
<font-family xmlns:android="http://schemas.android.com/apk/res/android">
    <font
        android:font="@font/barbaro"
        android:fontStyle="normal"
        android:fontWeight="400" />
</font-family>



--- FILE: app/src/main/res/layout/activity_main.xml ---

<?xml version="1.0" encoding="utf-8"?>
<FrameLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/activity_main_root"
    android:layout_width="match_parent"
    android:layout_height="match_parent"

    >

    <androidx.camera.view.PreviewView
        android:id="@+id/cameraPreviewView"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <com.hereliesaz.poolprotractor.ProtractorOverlayView
        android:id="@+id/protractorOverlayView"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/controls_relative_layout"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <androidx.constraintlayout.widget.ConstraintLayout
            android:id="@+id/zoomControlsLayout"
            android:layout_width="55dp"
            android:layout_height="486dp"
            android:layout_marginEnd="8dp"
            android:gravity="center_vertical"
            android:layoutMode="opticalBounds"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.974"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintVertical_bias="0.497">

            <ImageView
                android:id="@+id/zoomIcon"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginBottom="46dp"
                android:contentDescription="@string/zoom_icon"
                android:padding="8dp"
                android:src="@drawable/ic_zoom_in_24"
                android:visibility="visible"
                app:layout_constraintBottom_toTopOf="@+id/zoomSlider"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintHorizontal_bias="0.5"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent"
                app:tint="?attr/colorControlNormal"
                tools:ignore="TouchTargetSizeCheck"
                tools:visibility="visible" />

            <SeekBar
                android:id="@+id/zoomSlider"
                android:layout_width="24dp"
                android:layout_height="400dp"
                android:max="100"
                android:progress="50"
                android:progressDrawable="@drawable/seekbar_custom_track"
                android:thumbTint="?attr/colorPrimary"
                android:rotation="90"
                android:visibility="visible"
                app:layout_constraintBottom_toBottomOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintHorizontal_bias="0.5"
                app:layout_constraintStart_toStartOf="parent" />

        </androidx.constraintlayout.widget.ConstraintLayout>

        <com.google.android.material.floatingactionbutton.FloatingActionButton
            android:id="@+id/resetButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginEnd="24dp"
            android:layout_marginBottom="24dp"
            android:contentDescription="@string/reset_view"
            android:src="@drawable/ic_undo_24"
            app:backgroundTint="?attr/colorPrimaryContainer"
            app:fabSize="mini"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:tint="?attr/colorOnPrimaryContainer" />

        <com.google.android.material.floatingactionbutton.FloatingActionButton
            android:id="@+id/helpButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="24dp"
            android:layout_marginBottom="24dp"
            android:contentDescription="@string/toggle_help_lines"
            android:src="@drawable/ic_help_outline_24"
            app:backgroundTint="?attr/colorSecondaryContainer"
            app:fabSize="mini"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:tint="?attr/colorOnSecondaryContainer" />

    </androidx.constraintlayout.widget.ConstraintLayout>

    <androidx.compose.ui.platform.ComposeView
        android:id="@+id/composeThemeView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:visibility="gone" />

</FrameLayout>


--- FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml ---

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/logo_cue_detat"/>
    <foreground android:drawable="@drawable/logo_cue_detat"/>
</adaptive-icon>


--- FILE: app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml ---

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/logo_cue_detat"/>
    <foreground android:drawable="@drawable/logo_cue_detat"/>
</adaptive-icon>


--- FILE: app/src/main/res/values/colors.xml ---

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>

    <color name="accent_gold">#FFBDA559</color>
    <color name="darker_accent_gold">#FF968141</color>
    <color name="muted_maroon">#FF7E344D</color>
    <color name="muted_gray">#FFA9A9A9</color>
    <color name="warning_red">#FFC05D5D</color>
    <color name="acid_patina">#FF8EA96E</color>
    <color name="rusted_ember">#FFA85632</color>
    <color name="oil_slick">#FF555E5C</color>
    <color name="oxidized_brass">#FFB98E5A</color>
    <color name="violet_residue">#FF8374A9</color>
    <color name="scorched_umber">#FF4A2E1C</color>
    <color name="cold_ash">#FFA6A6A6</color>
    <color name="target_acid">#FFA4FF00</color>
    <color name="tactical_rust">#FFC1440E</color>
    <color name="concrete_vein">#FF7D7D7D</color>
    <color name="molten_brass">#FFD9821B</color>
    <color name="guerilla_violet">#FF6E44FF</color>
    <color name="ashline_fog">#FFBFBFBF</color>
    <color name="rebel_yellow">#FFFFD000</color>
    <color name="burnt_brass">#FF8A5A00</color>
    <color name="smokey_grunge">#FF3B3B3B</color>
    <color name="target_gold">#FFFFB700</color>
    <color name="mellow_yellow">#FFD4AF37</color>
    <color name="aged_amber">#FFC69026</color>
    <color name="smoked_ochre">#FF9B6A17</color>
    <color name="rogue_umber">#FF5C2E00</color>
    <color name="steel_ash">#FF4A4A4A</color>
    <color name="gunmetal_fog">#FF6A6A6A</color>
    <color name="faint_goldmist">#FFF0DFAF</color>
    <color name="static_clay">#FFCEBCA8</color>
    <color name="dead_channel">#FF817F8D</color>
    <color name="smoke_signal">#FF5A5D63</color>
    <color name="charred_olive">#FF484C3E</color>
    <color name="pyrrhic_rust">#FF9C4E2C</color>
    <color name="ash_wasp">#FFADA44F</color>
    <color name="low_fidelity_blue">#FF5C6E83</color>
    <color name="iced_opal">#FFD5E4E2</color>
    <color name="soft_interference">#FFB6A4D6</color>
    <color name="static_mint">#FF9DDDC8</color>
    <color name="corroded_sky">#FF8A99B2</color>
    <color name="halogen_dusk">#FFD3B18A</color>
    <color name="fever_slate">#FF6B7079</color>
    <color name="tarnished_mauve">#FFA08C98</color>
</resources>


--- FILE: app/src/main/res/values/strings.xml ---

<resources>
    <string name="app_name"> Cue D\’état</string>
    <string name="zoom_icon">Zoom Icon</string>
    <string name="reset_view">Reset View</string>
    <string name="show_helpers">WTF is all this?</string>
    <string name="hide_helpers">Okay, I get it</string>
    <string name="permission_denied">Camera permission is required to use this app.</string>
    <string name="toggle_help_lines">Help</string>

    <!-- Update Checker -->
    <string name="update_check_failed">Update check failed.</string>
    <string name="update_no_new_release">You are on the latest version.</string>
    <string name="update_available">Version %1$s is available!</string>


    <!-- Insulting Warnings -->
    <string name="warning_message_area">Sarcastic Warning Message Area</string>
    <string name="tagline">May your shot be better than your excuses.</string>

    <string-array name="insulting_warnings">
        <item>Physics called. It wants your law degree back.</item>
        <item>A fine example of geometric optimism.</item>
        <item>Aiming is not a suggestion.</item>
        <item>Even the chalk finds your methods dusty.</item>
        <item>Let\'s list other things you could be doing instead. There\'s knitting, and… </item>
        <item>Talent not detected.</item>
        <item>Can\'t even scratch common sense.</item>
        <item>There are no shots over there. I checked.</item>
        <item>Do you need a bigger phone or a smaller table?</item>
        <item>Your Mrs. called, she wants her title back.</item>
        <item>\'A do not, this is,\' says Yoda.</item>
        <item>Nope.</item>
        <item>Not happening.</item>
        <item>Won\'t work.</item>
        <item>Try harder.</item>
        <item>PLEASE try harder.</item>
        <item>Try gooder?</item>
        <item>Try... better. That\'s the one I was looking for. No, not your shot. The word I was looking for.</item>
        <item>No.</item>
        <item>Physics says no.</item>
        <item>God says no.</item>
        <item>Your mom says she\'s proud no matter what.</item>
        <item>Your father says nothing.</item>
        <item>Hey batter, batter…</item>
        <item>In the beginning, God created a better shot.</item>
        <item>Am I crying from laughing, or is this just sad?</item>
        <item>Am I pretty, yet?</item>
        <item>Do you even know how to pool, bro?</item>
        <item>That\'s… an angle. Not a good one.</item>
        <item>I can\'t be more disappointed than your dad.</item>
        <item>Consult a physicist. Or a therapist.</item>
        <item>Maybe if you put your phone down once in a while....</item>
    </string-array>
</resources>



--- FILE: app/src/main/res/values/themes.xml ---

<resources>
    <!-- Base application theme. -->
    <!-- For Material 3 components like FloatingActionButton, prefer a Material3 theme -->
    <style name="Theme.CueDetat" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Primary brand color. -->
        <item name="colorPrimary">@color/purple_500</item>
        <!-- <item name="colorPrimaryVariant">@color/purple_700</item> --> <!-- M3 uses colorPrimaryContainer, etc. -->
        <item name="colorOnPrimary">@color/white</item>
        <!-- Secondary brand color. -->
        <item name="colorSecondary">@color/teal_200</item>
        <!-- <item name="colorSecondaryVariant">@color/teal_700</item> --> <!-- M3 uses colorSecondaryContainer, etc. -->
        <item name="colorOnSecondary">@color/black</item>
        <!-- Status bar color. -->
        <item name="android:statusBarColor">?attr/colorPrimary</item> <!-- Or a specific color -->
        <!-- Customize your theme here. -->
        <item name="android:windowLightStatusBar">true
        </item> <!-- true for light themes, false for dark -->
        <item name="android:navigationBarColor">@android:color/transparent</item>
    </style>
</resources>


--- FILE: app/src/main/res/xml/backup_rules.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
<!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>


--- FILE: app/src/main/res/xml/data_extraction_rules.xml ---

<?xml version="1.0" encoding="utf-8"?>
<!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>


--- FILE: Developers_Guide.md ---

### **`Developers_Guide.md`**

```markdown
Project Development Guide: Cue D'état
This document outlines the core architecture, concepts, and future direction of the Cue D'état
application. It serves as a single source of truth to prevent regressions and ensure consistent
development. Consider it a note-to-self for the AI working on this project, and keep it updated
accordingly with ANYTHING that will be useful to the next AI in the next chat.

NEVER change what is written here, only add to it. Always include anything that you note to yourself as a matter of clarification.

1. Core Concepts & Official Terminology
   A precise vocabulary is critical. The following terms are to be used exclusively.

Logical Plane: An abstract, infinite 2D coordinate system (like graph paper) where all aiming
geometry is defined and calculated. This is the "world" of the simulation.

Screen Plane: The physical 2D plane of the device's screen. This is the "window" through which
the user views the Logical Plane.

Perspective Transformation: The process, handled by a single pitchMatrix, of projecting the
Logical Plane onto the Screen Plane to create the 3D illusion. Crucially, this transformation must
always pivot around the absolute center of the view.

On-Screen Elements:

Protractor Unit: The primary aiming apparatus. It consists of two components that are
always linked.

Target Ball: The logical and visual center of the Protractor Unit. The user drags this
on-screen to move the entire unit.

Ghost Cue Ball: The second ball in the unit. Its position on the Logical Plane is
always derived from the Target Ball's position plus the user-controlled rotation angle.

* **Actual Cue Ball**: A separate, independent entity representing the real-world cue ball.
* Its visibility is toggled by the user via a FAB.
  * It has a **2D Base**, which exists on the Logical Plane. The user drags the ball on the
  screen, and the app calculates the corresponding position for this base on the Logical
  Plane.
  * It has a **3D Ghost**, which is a visual representation that appears to "float" above the 2D
  base.
   * **Shot Line**: The line representing the player's line of sight to the cue ball.
      * It must be drawn on the Logical Plane to adhere to perspective.
      * Its path is defined as a ray originating from an anchor point and passing through the center
        of the Ghost Cue Ball.
   * **Anchor Points**:
      * If the **Actual Cue Ball** is visible, the anchor is the center of its 2D Base.
      * If the **Actual Cue Ball** is hidden, the anchor is the logical point corresponding to the
        bottom-center of the screen.
   * **Aiming Line**: The line representing the path the Target Ball will take upon impact.
      * It is always the line of centers between the Ghost Cue Ball and the Target Ball, extending
        through the Target Ball.

## 2. Architectural Model & File Structure

The architecture strictly separates data, logic, and presentation.

## 3. ViewModel and State Management (MainViewModel.kt)
   The MainViewModel serves as the central nervous system of the application. It does not perform
   complex calculations itself, but rather orchestrates the flow of information between the user
   interface, background services (like the SensorRepository), and the state-modification logic.

Single Source of Truth: The ViewModel holds the canonical application state in a
MutableStateFlow<OverlayState>. The UI observes this flow and redraws only when the state object
changes. This ensures a predictable, unidirectional data flow.

Event-Driven Logic: All user interactions and sensor updates are funneled through a single entry
point: the onEvent(event: MainScreenEvent) function. This function acts as a triage center,
delegating tasks based on the event type.

Continuous vs. Discrete Events: The onEvent function makes a critical distinction between two types
of events:

Continuous State Updates: Events that happen in real-time during a gesture (e.g., UnitMoved,
RotationChanged). These are passed to the updateContinuousState function, which runs the
StateReducer and UpdateStateUseCase to calculate the new geometry and immediately update the _
uiState. This allows visual elements like the red warning lines to appear instantly.

Delayed Warning Text Logic: To prevent the sarcastic warning text from flickering during a gesture,
its display is managed by the discrete GestureStarted and GestureEnded events:

GestureStarted: When a touch gesture begins, the warningText in the OverlayState is immediately set
to null. This clears any existing warning text from the screen.

GestureEnded: When the user lifts their finger, this event is fired. The ViewModel checks if the
current state is an isImpossibleShot. If it is, a new sarcastic warning is selected and set in the
OverlayState, causing it to appear after the user has committed to their shot. This separates the
immediate geometric feedback (red lines) from the delayed textual feedback (sarcasm).

## 4. Key Implementation Learnings & Mandates (June 16, 2025)

   This section captures critical design decisions and implementation details that have been
   clarified
   through development iterations. Adherence to these points is mandatory to prevent regressions.

   A. Operational Modes: Protractor vs. Banking
   The application has two mutually exclusive primary modes:
   - Protractor Mode: The default mode. All standard aiming tools (Protractor Unit, Target Ball,
     Ghost Cue Ball, Tangent Lines, etc.) are active. The user moves these tools to line up shots.
   - Banking Mode: Activated by the "Calculate Bank" menu item. In this mode, the Protractor
     Unit and its related elements are hidden. A static, wireframe pool table is displayed instead
     as a fixed frame of reference. The `ActualCueBall` is the primary interactive element.

   B. State Transition for Banking Mode
   Entering Banking Mode is a complex state change handled by the StateReducer and must perform the
   following actions simultaneously:
   1. Set isBankingMode = true.
   2. Force the ActualCueBall to be visible and positioned at the exact logical center of the view
      (viewWidth / 2f, viewHeight / 2f).
   3. Calculate and apply a new zoom level to ensure the entire wireframe table is visible on the
      screen. This is not a user-controlled zoom.
   4. All other aiming elements (Protractor Unit, warnings, etc.) are disabled/hidden.

   C. Rendering of Lifted 3D Objects (Rails)
   To create the illusion of an object being "lifted" above the logical plane (e.g., the pool table
   rails), a dedicated perspective matrix MUST be used.
   - The OverlayState must contain both a base pitchMatrix and a separate railPitchMatrix.
   - The railPitchMatrix is generated in the UpdateStateUseCase by calling
     Perspective.createPitchMatrix and passing a positive floating-point value to the `lift`
     parameter.
   - The Android Camera's Y-axis is inverted; therefore, to lift an object "up" (closer to the
     viewer), a POSITIVE Y translation must be applied within the Perspective helper.
     `camera.translate(0f, lift, 0f)`.

   D. Rendering of Rotated Objects (The Table)
   Any rotation of a logical object (like the 90-degree rotation of the table in Banking Mode) MUST
   be applied to its transformation matrix *before* the perspective projection. This is done by
   calling `matrix.preRotate(...)` in the `UpdateStateUseCase` after the matrix is created but
   before it is set in the state. Renderers themselves should not apply 2D rotations.

   E. High-Fidelity Shape Rendering (Vector Assets)
   For any complex, static shape required by the design (e.g., the pool table rails), programmatic
   approximation using lines and arcs is FORBIDDEN due to repeated failures.
   - The mandatory approach is to use user-provided SVG assets.
   - The SVG's path data string (the `d` attribute) MUST be parsed using
     `androidx.core.graphics.PathParser.createPathFromPathData()`.
   - The renderer must then scale the parsed path to fit the dynamic logical dimensions required by
     the application state.

The architecture strictly separates data, logic, and presentation.
```

```
com/hereliesaz/cuedetat/
├── view/
│   ├── model/
│   │   ├── LogicalPlane.kt      // Defines the abstract geometry (ProtractorUnit, ActualCueBall).
│   │   └── Perspective.kt       // Manages the 3D transformation logic.
│   ├── renderer/
│   │   ├── util/
│   │   │   └── DrawingUtils.kt  // Shared, static helper functions for drawing math.
│   │   ├── BallRenderer.kt      // Draws all ball and ghost ball elements.
│   │   ├── LineRenderer.kt      // Draws all line and label elements.
│   │   └── OverlayRenderer.kt   // The coordinator. Initializes and calls other renderers.
│   └── state/
│       ├── OverlayState.kt      // An immutable snapshot of the entire scene's state.
│       └── ScreenState.kt       // Defines UI-level states like Toast messages.
├── domain/
│   ├── StateReducer.kt        // Pure function to handle state changes from events.
│   └── UpdateStateUseCase.kt  // Pure function for complex, derived state calculations.
└── ui/
    ├── composables/           // Small, reusable UI components.
    ├── MainViewModel.kt       // The lean coordinator of state and events.
    ├── MainScreen.kt          // The main Composable screen, assembles components.
    └── MainScreenEvent.kt     // Defines all possible user interactions.
```

**The Golden Rule**: The `ViewModel` is the only component that can create or modify the
`OverlayState`. The `View` and `Renderer` components are "dumb" components that only receive state
and display it.

## 3. Rendering Pipeline

To avoid rendering artifacts, the following order of operations is mandatory:

1. **ViewModel**: Calculates the single, centrally-pivoted `pitchMatrix` based on sensor input. It
   also calculates the logical positions of all objects. This is packaged into an `OverlayState`
   object.
   2. **Renderer**: Receives the `OverlayState`.
   1. `canvas.concat(pitchMatrix)`: Applies the 3D perspective to the entire canvas once.
   2. **Draw Logical Plane**: All elements that exist in the 3D world (Protractor Unit, Actual Cue
      Ball's base, all lines and their labels) are drawn onto this single transformed canvas at
      their logical (x, y) coordinates.
   3. **Draw Screen Space**: Elements that don't exist on the 3D plane (the "ghost" effects for the
      balls) are drawn last, without the `pitchMatrix`, using the projected coordinates of their
      logical counterparts.

## 4. Notes from the Void (Lessons Learned)

* **A Word on State**: The purity of the unidirectional data flow is paramount. When a bug appears,
  the first question is always: "Is the `OverlayState` correct?" If the state is right, the bug is
  in the Renderer. If the state is wrong, the bug is in the ViewModel. There is no third option.

* **The Tyranny of Coordinates**: A significant portion of development has been a Sisyphean struggle
  against coordinate systems. A point's meaning is defined entirely by the space it inhabits:
  Logical, Pitched, or Screen. Mapping between them must be done with monastic precision. The
  `ProtractorOverlayView` must only speak in Screen Coordinates to the ViewModel, which then
  translates them to the Logical Plane.

* **On Impossible Shots**: Early warning systems relied on crude angle checks and physical overlap
  detection. These have been deprecated and removed. The sole trigger for a warning event is now a
  more elegant and geometrically sound check. It compares the distance from the player's perspective
  point (A) to the GhostCueBall (G) and the TargetBall (T). A shot is deemed impossible if the
  distance A-G is greater than the distance A-T, as this implies aiming "behind" the target. If the
  `ActualCueBall` is visible, its center serves as point A. If the `ActualCueBall` is hidden, point
  A defaults to the logical point corresponding to the bottom-center of the screen. This unified
  logic applies universally, providing a single, robust principle for all aiming scenarios.

* **The Overhead Anomaly**: The initial "lift" logic correctly placed the 3D ghost ball "on top" of
  the 2D base, but this created a visual disconnect when viewed from directly overhead (0° pitch).
  From this angle, the ghost appeared as a separate circle floating above the base, rather than
  being perfectly aligned with it. The illusion of a single 3D object was broken. The lift
  calculation was corrected to be proportional to the sine of the pitch angle (
  `lift = radius * sin(pitch)`). This ensures the lift is 0 at 0° pitch (making the ghost and base
  concentric) and increases smoothly as the phone tilts, preserving the 3D illusion across all
  viewing angles.

* **State-Driven UI Consistency**: The `areHelpersVisible` flag in `OverlayState` is an example of a
  single state driving multiple UI changes. It not only toggles the helper text on the
  `OverlayRenderer` but also controls the branding in the `TopControls` composable and the
  appearance of the FABs (switching between icons and text). This pattern should be maintained to
  ensure a consistent and predictable UI. A change in one part of the app's "mode" should be
  reflected logically across all relevant components.

* **The Labyrinth of Label Placement**: The seemingly simple act of placing a text label next to a
  line became a tragicomedy of errors.
   * **Initial Diagnosis**: It was assumed that a small, fixed horizontal offset (`hOffset`) would
     suffice. This failed spectacularly, producing no visible change. This failure was, in itself,
     a success: it proved the logical coordinate space was vastly larger than assumed, and that our
     understanding of scale was flawed.
   * **The Red Herring of `drawTextOnPath`**: The primary tool, `drawTextOnPath`, was treated as a
     black box. Its `vOffset` parameter was discovered to be the silent culprit, pushing labels an
     enormous perpendicular distance away from their intended paths, even when the horizontal
     offset was small. The realization was that we were trying to finesse a sledgehammer.
   * **The Refactor That Wasn't**: An attempt to solve the problem by refactoring the
     `OverlayRenderer` into smaller, more specialized classes was architecturally sound but
     executed poorly. It severed dependencies and broke the build, proving that a good idea
     implemented badly is often worse than a bad idea implemented well. The subsequent decision to
     revert the refactor, fix the build, and *then* re-implement the refactor correctly was a
     critical lesson in not being afraid to retreat and regroup.
   * **The Rotational Farce**: A subsequent attempt to use a more "direct" coordinate calculation
     with `canvas.rotate()` resulted in all labels comically stacking on top of each other,
     anchored to the wrong point and rotated into nonsense. This was a valuable lesson in humility.
   * **The Final, Simple Truth**: The solution, as is often the case, was to stop fighting the tool
     and understand the environment. By returning to `drawTextOnPath` and setting its perpendicular
     offset (`vOffset`) to zero, we regained control. The horizontal offset (`hOffset`) was then
     made dynamic—a multiple of the ball's on-screen radius—ensuring the labels now sit a
     predictable, scalable distance from their origin points.

* **The Great Unraveling (A Refactoring Failure)**: A recent, ambitious effort to decompose the
  monolithic `MainViewModel` and `MainScreen` serves as a stark warning. The principle was sound:
  break large components into smaller, single-responsibility units. The execution was a catastrophe.
  In the process of creating a `StateReducer` and various new composables, the connections between
  them were not re-established correctly in a single, atomic step. This left the application in a
  perpetually broken state across several iterations, a testament to the fact that demolition
  without a clear and immediate reconstruction plan leads only to ruin. **Lesson**: A refactoring is
  not complete until the system compiles and runs as it did before. It is not a multi-stage process;
  it is a single, decisive, and fully-tested action.

* **The Heresy of the Domain (A Refactoring Success)**: Out of the ashes of the Great Unraveling
  came a moment of clarity. An early version of the `StateReducer` contained a dependency on a
  UI-layer component (`ColorScheme`). This was a violation of clean architecture. The error was
  identified and corrected by removing the theme-related logic from the domain layer and handling it
  exclusively in the ViewModel. This solidified the boundary between pure business logic and UI
  concerns. **Lesson**: The Domain layer must remain pure. It must not know about colors, views, or
  any other UI-specific constructs.

* **Case Study: Debugging the Zoom Functionality**: This documents the challenging but ultimately
  successful process of implementing and refining the zoom functionality. It serves as a practical
  example of debugging complex interactions between the Android View system, Compose state
  management, and user input.
   * **Initial Goal**: The primary objective was to implement a pinch-to-zoom gesture on the main
     camera view and ensure it was perfectly synchronized with the vertical zoom slider. Both
     controls needed to respect a shared set of zoom limits.
   * **Initial Failures & Misleading Symptoms**: Our first attempts to integrate the
     `ScaleGestureDetector` into the `ProtractorOverlayView` led to a series of cascading failures
     that were difficult to diagnose:
      * **State Desynchronization**: An early version caused the pinch gesture and the slider to
        fall out of sync. Pinching past the zoom limit and then touching the slider would cause
        the view to "jump" back to the correct state.
      * **Input Freeze**: Subsequent attempts to fix the synchronization resulted in the view
        becoming completely unresponsive to touch.
      * **Application Not Responding (ANR)**: At its worst, the application would freeze entirely
        upon startup, failing to respond even to sensor-driven tilting. Logcat analysis showed a
        `Choreographer` warning about skipping frames, indicating the main thread was blocked.
        These symptoms were caused by a race condition between the high-frequency events of the
        `ScaleGestureDetector` and the slower, asynchronous nature of the Compose/ViewModel state
        update loop. The gesture listener was often using stale state data for its calculations,
        leading to incorrect values and, in the worst case, an event storm that overwhelmed the
        main thread.
   * **The Breakthrough (Diagnosis)**: The key insight came from analyzing the Logcat output. The
     logs proved that the state logic (`StateReducer`) was correctly clamping the zoom values, but
     the UI was not reflecting this correct state. This pointed to a deeper issue, likely a race
     condition or the app's main thread being overwhelmed by a storm of high-frequency gesture
     events. The `Skipped frames` warning was a major clue.
   * **The Solution (Architectural Refactor)**: The final, successful solution involved a minor
     architectural change to centralize all zoom logic within the `StateReducer`.
      * The `ProtractorOverlayView` was simplified to only report the raw, unprocessed
        `scaleFactor` from the `ScaleGestureDetector`.
      * A new `ZoomScaleChanged` event was created to carry this raw data.
      * The `StateReducer` was made solely responsible for taking the current zoom, applying the
        scale factor, and clamping the result to the `MIN_ZOOM` and `MAX_ZOOM` limits defined in
        `ZoomMapping.kt`.
   * **Final Tuning**: Subsequent changes were straightforward adjustments to the `MIN_ZOOM` and
     `MAX_ZOOM` constants in `ZoomMapping.kt` to meet the specific UI requirements.

## 5. Future Development Plan

The current foundational architecture is designed to support future expansion.

* **Bank/Kick Shot Calculator**: A virtual table boundary can be added to the Logical Plane. The
  AimingLine can then be reflected off these boundaries to project multi-rail shots.
   * **Object/Table Detection (Computer Vision)**: The ultimate goal.
   * Use OpenCV or ML Kit to detect the boundaries of the pool table. These screen coordinates can
     be projected back to the Logical Plane to define the virtual table.
   * Detect the screen coordinates of the cue ball and object balls. These can be used to
     automatically place the `ActualCueBall` and `ProtractorUnit` on the Logical Plane, removing
     the need for manual positioning.
* **"English" / Spin Visualization**: Add UI controls to simulate sidespin, which would alter the
  path of the tangent lines.



--- FILE: gradle.properties ---

# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true

# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official

# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true
org.gradle.configuration-cache=true
kapt.incremental.apt=false
kotlin.daemon.useFallbackStrategy=false


--- FILE: gradlew ---

#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"



--- FILE: gradlew.bat ---

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



--- FILE: README.md ---

# Cue D’état - An IRL Billiards Aiming Assistant for Android

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
![GitHub Release](https://img.shields.io/github/v/release/hereliesaz/CueDetat?include_prereleases&display_name=release)


**_May your aim be truer than your excuses._**


**Cue D’état** is an Android app to ostensibly help billiards players line up and aim, determine shot angles, make cut shots, understand the cue ball tangent, improve their geometric understanding of the game. Maybe get called a cheater, even though using this app is entirely legal. At the very least, get yourself a high-tech understanding of how bad you are at pool.

It uses your phone's camera and orientation sensors to overlay a dynamic protractor and aiming guide onto the real-world view of a pool table.

**(Warning: May induce an inflated sense of skill, followed by the crushing reality of physics. Use with a healthy dose of self-deprecating humor.)**



## Features

*   **Live Camera Augmented Reality Overlay:**
    *   See the guides directly on your pool game.
    *   Designed for easy one or two-handed use. 
*   **Dynamic Protractor:**
    *   See where the balls will go before you hit them.  
    *   Rotates and zooms with on-screen gestures, tilts using the gyroscope. 
*   **Cue Ball & Target Ball Representation:**
    *   Simulated "ghost balls" on a projected plane.
    *   Visual feedback for aiming path and potential collisions.
*   **Pitch-Adjusted Perspective:** The protractor plane tilts based on your phone's orientation for a three-dimensional augmented reality.
*   **Where will the Cue ball go?** Visualizes the tangent line and the resulting cue ball path if English (sidespin) were applied.
*   **Guided Shots** Guide lines extend from the target ball to line up with your table's pockets.
*   **VERY Helpful Help:**
    *   Labels for key lines and what to do with them.
    *   Instructions better than Ikea's.
    *   Toggleable Help visibility for a cleaner view.
    *   Uplifting messages of slightly disdainful encouragement.



## Screenshots Placeholder

*   Pretend this is a screenshot.
*   This, too.
*   Imagine looking at a photo of the app in use.
*   Note the craft.
*   The flippant attitude towards detail.
*   I'm a genieaouxess.
*   And this is a photo from a vacation two years ago that I accidentally pretend included.



## How It Works: The Gore. The Details.

1.  **Camera Preview:** Uses CameraX to display a live feed from the device camera.
2.  **Sensor Input:** Leverages the `TYPE_ROTATION_VECTOR` sensor to determine the phone's pitch, roll, and yaw. The pitch is primarily used to tilt the 2D protractor plane. An offset is applied to account for natural phone holding angles.
3.  **Custom View (`ProtractorOverlayView`):** All guides and visual elements are drawn on a custom `View` that overlays the camera preview.
4.  **Drawing Logic:**
    *   **Protractor Plane:** A logical 2D plane is defined. Circles representing the cue and target ball positions, protractor angle lines, and deflection lines are drawn on this plane.
    *   **3D Projection (Simplified):** An `android.graphics.Camera` object is used to apply an X-axis rotation (based on phone pitch) to this logical plane, creating a 3D perspective effect. This transformed matrix is then applied to the canvas.
    *   **Ghost Balls:** Screen-space circles are drawn to represent the "3D" position of the cue and target balls. Their Y-offset from the projected plane centers is scaled by the sine of the pitch angle (raised to a power for a more pronounced effect) to simulate them floating above the plane.
    *   **Helper Text:** Text labels are drawn either on the (lifted) protractor plane or directly in screen space, with basic collision avoidance and dynamic sizing.
5.  **Gesture Handling:**
    *   `ScaleGestureDetector` for pinch-to-zoom.
    *   `MotionEvent` tracking for single-finger pan-to-rotate.
6.  **Theming:** Uses Jetpack Compose for Material 3 theming, with color values then passed to the custom view's `Paint` objects.



## Known Quirks & Future Delusions

*   **Text Collision Avoidance:** Current implementation is basic (first-drawn wins space).
*   **A Virtual Table for Virtually Useful Bank Shot Projection:** Using more sophisticated dynamic layout involving a line drawing of a billiards table will come someday.
*   **True 3D Rendering:** This app fakes 3D with 2D canvas tricks. Moving to OpenGL ES or a 3D engine like Filament would allow for actual 3D models and lighting, but would also drastically increase complexity. And probably anxiety. But probably not usefulness.
*   **Ball, Table and Pocket Detection:** The ultimate fantasy. Using CV to detect the table, balls, and pockets automatically. For now, you are the CV.
*   **Insulting Warnings:** The pool of sarcastic remarks is finite. Contributions welcome if they tickle me the required level of pink.
*   **Performance:** Drawing many complex paths and text elements on every frame can be demanding. Optimizations are an ongoing battle. And yet, somehow, it feels more like a you-problem.



## License

Distributed under the MIT License. Basically, completely free to use however you'd like, just gimme a shoutout. I make money making art. So, like this:
Cue D’état by HereLiesAz (https://instagram.com/hereliesaz)


## Acknowledgments (of Who to Blame)

*   The ghosts of billiards past whose missed shots inspired this.
*   The people I've tried to teach all these things.
*   Physics. And geometry. Where my hoes at?!

---




--- NON-TEXT ASSET FILE LIST (Content not included) ---

The following files were found but their content was not included to save space.

This list helps the AI understand available resources.


- app/src/main/ic_launcher-playstore.png

- app/src/main/res/drawable/ic_launcher.webp

- app/src/main/res/drawable/logo_cue_detat.webp

- app/src/main/res/font/barbaro.ttf

- app/src/main/res/mipmap-hdpi/ic_launcher.webp

- app/src/main/res/mipmap-hdpi/ic_launcher_background.webp

- app/src/main/res/mipmap-hdpi/ic_launcher_foreground.webp

- app/src/main/res/mipmap-hdpi/ic_launcher_round.webp

- app/src/main/res/mipmap-mdpi/ic_launcher.webp

- app/src/main/res/mipmap-mdpi/ic_launcher_background.webp

- app/src/main/res/mipmap-mdpi/ic_launcher_foreground.webp

- app/src/main/res/mipmap-mdpi/ic_launcher_round.webp

- app/src/main/res/mipmap-xhdpi/ic_launcher.webp

- app/src/main/res/mipmap-xhdpi/ic_launcher_background.webp

- app/src/main/res/mipmap-xhdpi/ic_launcher_foreground.webp

- app/src/main/res/mipmap-xhdpi/ic_launcher_round.webp

- app/src/main/res/mipmap-xxhdpi/ic_launcher.webp

- app/src/main/res/mipmap-xxhdpi/ic_launcher_background.webp

- app/src/main/res/mipmap-xxhdpi/ic_launcher_foreground.webp

- app/src/main/res/mipmap-xxhdpi/ic_launcher_round.webp

- app/src/main/res/mipmap-xxxhdpi/ic_launcher.webp

- app/src/main/res/mipmap-xxxhdpi/ic_launcher_background.webp

- app/src/main/res/mipmap-xxxhdpi/ic_launcher_foreground.webp

- app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.webp




--- END OF BACKUP ---

